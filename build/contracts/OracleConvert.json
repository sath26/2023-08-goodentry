{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clToken0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "clToken1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CL_TOKENA",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CL_TOKENB",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "37": "interfaces/AggregatorV3Interface.sol",
    "7": "contracts/helper/OracleConvert.sol"
  },
  "ast": {
    "absolutePath": "contracts/helper/OracleConvert.sol",
    "exportedSymbols": {
      "AggregatorV3Interface": [
        11709
      ],
      "OracleConvert": [
        5207
      ]
    },
    "id": 5208,
    "license": "none",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5033,
        "literals": [
          "solidity",
          "0.8",
          ".19"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:7"
      },
      {
        "absolutePath": "interfaces/AggregatorV3Interface.sol",
        "file": "../../interfaces/AggregatorV3Interface.sol",
        "id": 5034,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5208,
        "sourceUnit": 11710,
        "src": "58:52:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "OracleConvert",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 5207,
        "linearizedBaseContracts": [
          5207
        ],
        "name": "OracleConvert",
        "nameLocation": "508:13:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "e4571356",
            "id": 5037,
            "mutability": "immutable",
            "name": "CL_TOKENA",
            "nameLocation": "567:9:7",
            "nodeType": "VariableDeclaration",
            "scope": 5207,
            "src": "528:48:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
              "typeString": "contract AggregatorV3Interface"
            },
            "typeName": {
              "id": 5036,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 5035,
                "name": "AggregatorV3Interface",
                "nameLocations": [
                  "528:21:7"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 11709,
                "src": "528:21:7"
              },
              "referencedDeclaration": 11709,
              "src": "528:21:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                "typeString": "contract AggregatorV3Interface"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5fcf91aa",
            "id": 5040,
            "mutability": "immutable",
            "name": "CL_TOKENB",
            "nameLocation": "621:9:7",
            "nodeType": "VariableDeclaration",
            "scope": 5207,
            "src": "582:48:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
              "typeString": "contract AggregatorV3Interface"
            },
            "typeName": {
              "id": 5039,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 5038,
                "name": "AggregatorV3Interface",
                "nameLocations": [
                  "582:21:7"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 11709,
                "src": "582:21:7"
              },
              "referencedDeclaration": 11709,
              "src": "582:21:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                "typeString": "contract AggregatorV3Interface"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 5090,
              "nodeType": "Block",
              "src": "794:266:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 5061,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 5054,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 5049,
                            "name": "clToken0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5043,
                            "src": "808:8:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "307830",
                                "id": 5052,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "828:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0x0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 5051,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "820:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 5050,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "820:7:7",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 5053,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "820:12:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "808:24:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 5060,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 5055,
                            "name": "clToken1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5045,
                            "src": "836:8:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "307830",
                                "id": 5058,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "856:3:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0x0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 5057,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "848:7:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 5056,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "848:7:7",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 5059,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "848:12:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "836:24:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "808:52:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c69642061646472657373",
                        "id": 5062,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "862:17:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
                          "typeString": "literal_string \"Invalid address\""
                        },
                        "value": "Invalid address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
                          "typeString": "literal_string \"Invalid address\""
                        }
                      ],
                      "id": 5048,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "800:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 5063,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "800:80:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5064,
                  "nodeType": "ExpressionStatement",
                  "src": "800:80:7"
                },
                {
                  "expression": {
                    "id": 5069,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5065,
                      "name": "CL_TOKENA",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5037,
                      "src": "884:9:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                        "typeString": "contract AggregatorV3Interface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 5067,
                          "name": "clToken0",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5043,
                          "src": "918:8:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 5066,
                        "name": "AggregatorV3Interface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11709,
                        "src": "896:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$11709_$",
                          "typeString": "type(contract AggregatorV3Interface)"
                        }
                      },
                      "id": 5068,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "896:31:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                        "typeString": "contract AggregatorV3Interface"
                      }
                    },
                    "src": "884:43:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                      "typeString": "contract AggregatorV3Interface"
                    }
                  },
                  "id": 5070,
                  "nodeType": "ExpressionStatement",
                  "src": "884:43:7"
                },
                {
                  "expression": {
                    "id": 5075,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5071,
                      "name": "CL_TOKENB",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5040,
                      "src": "931:9:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                        "typeString": "contract AggregatorV3Interface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 5073,
                          "name": "clToken1",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5045,
                          "src": "965:8:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 5072,
                        "name": "AggregatorV3Interface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11709,
                        "src": "943:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$11709_$",
                          "typeString": "type(contract AggregatorV3Interface)"
                        }
                      },
                      "id": 5074,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "943:31:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                        "typeString": "contract AggregatorV3Interface"
                      }
                    },
                    "src": "931:43:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                      "typeString": "contract AggregatorV3Interface"
                    }
                  },
                  "id": 5076,
                  "nodeType": "ExpressionStatement",
                  "src": "931:43:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "id": 5086,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "id": 5084,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 5078,
                                "name": "CL_TOKENA",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5037,
                                "src": "988:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                                  "typeString": "contract AggregatorV3Interface"
                                }
                              },
                              "id": 5079,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "998:8:7",
                              "memberName": "decimals",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 11670,
                              "src": "988:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                "typeString": "function () view external returns (uint8)"
                              }
                            },
                            "id": 5080,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "988:20:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 5081,
                                "name": "CL_TOKENB",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5040,
                                "src": "1011:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                                  "typeString": "contract AggregatorV3Interface"
                                }
                              },
                              "id": 5082,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1021:8:7",
                              "memberName": "decimals",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 11670,
                              "src": "1011:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                "typeString": "function () view external returns (uint8)"
                              }
                            },
                            "id": 5083,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1011:20:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "988:43:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "hexValue": "3136",
                          "id": 5085,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1035:2:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_16_by_1",
                            "typeString": "int_const 16"
                          },
                          "value": "16"
                        },
                        "src": "988:49:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "446563696d616c73206572726f72",
                        "id": 5087,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1039:16:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a9d74000e506b7be185c047ed08c4eb4bd0b039e6ddec8e437134d829bf78b20",
                          "typeString": "literal_string \"Decimals error\""
                        },
                        "value": "Decimals error"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a9d74000e506b7be185c047ed08c4eb4bd0b039e6ddec8e437134d829bf78b20",
                          "typeString": "literal_string \"Decimals error\""
                        }
                      ],
                      "id": 5077,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "980:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 5088,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "980:76:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5089,
                  "nodeType": "ExpressionStatement",
                  "src": "980:76:7"
                }
              ]
            },
            "documentation": {
              "id": 5041,
              "nodeType": "StructuredDocumentation",
              "src": "637:106:7",
              "text": "@param clToken0 Underlying token0 ChainLink feed\n @param clToken1 Underlying token1 ChainLink feed"
            },
            "id": 5091,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5046,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5043,
                  "mutability": "mutable",
                  "name": "clToken0",
                  "nameLocation": "766:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5091,
                  "src": "758:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5042,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "758:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5045,
                  "mutability": "mutable",
                  "name": "clToken1",
                  "nameLocation": "784:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5091,
                  "src": "776:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5044,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "776:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "757:37:7"
            },
            "returnParameters": {
              "id": 5047,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "794:0:7"
            },
            "scope": 5207,
            "src": "745:315:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5099,
              "nodeType": "Block",
              "src": "1148:19:7",
              "statements": [
                {
                  "expression": {
                    "hexValue": "38",
                    "id": 5097,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1161:1:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_8_by_1",
                      "typeString": "int_const 8"
                    },
                    "value": "8"
                  },
                  "functionReturnParameters": 5096,
                  "id": 5098,
                  "nodeType": "Return",
                  "src": "1154:8:7"
                }
              ]
            },
            "documentation": {
              "id": 5092,
              "nodeType": "StructuredDocumentation",
              "src": "1064:31:7",
              "text": "@notice Get oracle decimals"
            },
            "functionSelector": "313ce567",
            "id": 5100,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nameLocation": "1107:8:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5093,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1115:2:7"
            },
            "returnParameters": {
              "id": 5096,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5095,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5100,
                  "src": "1141:5:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 5094,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1141:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1140:7:7"
            },
            "scope": 5207,
            "src": "1098:69:7",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5126,
              "nodeType": "Block",
              "src": "1384:172:7",
              "statements": [
                {
                  "assignments": [
                    null,
                    5110,
                    null,
                    5112,
                    null
                  ],
                  "declarations": [
                    null,
                    {
                      "constant": false,
                      "id": 5110,
                      "mutability": "mutable",
                      "name": "price",
                      "nameLocation": "1411:5:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 5126,
                      "src": "1407:9:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 5109,
                        "name": "int",
                        "nodeType": "ElementaryTypeName",
                        "src": "1407:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null,
                    {
                      "constant": false,
                      "id": 5112,
                      "mutability": "mutable",
                      "name": "timeStamp",
                      "nameLocation": "1437:9:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 5126,
                      "src": "1432:14:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 5111,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1432:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 5116,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 5113,
                        "name": "priceFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5104,
                        "src": "1456:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                          "typeString": "contract AggregatorV3Interface"
                        }
                      },
                      "id": 5114,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1466:15:7",
                      "memberName": "latestRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11708,
                      "src": "1456:25:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function () view external returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 5115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1456:27:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1390:93:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 5120,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 5118,
                          "name": "timeStamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5112,
                          "src": "1497:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 5119,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1509:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1497:13:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "526f756e64206e6f7420636f6d706c657465",
                        "id": 5121,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1512:20:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b7ecab3e737ab1feff263511100307a44f17c7fb1128774d25941524e6209697",
                          "typeString": "literal_string \"Round not complete\""
                        },
                        "value": "Round not complete"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b7ecab3e737ab1feff263511100307a44f17c7fb1128774d25941524e6209697",
                          "typeString": "literal_string \"Round not complete\""
                        }
                      ],
                      "id": 5117,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1489:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 5122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1489:44:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5123,
                  "nodeType": "ExpressionStatement",
                  "src": "1489:44:7"
                },
                {
                  "expression": {
                    "id": 5124,
                    "name": "price",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 5110,
                    "src": "1546:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "functionReturnParameters": 5108,
                  "id": 5125,
                  "nodeType": "Return",
                  "src": "1539:12:7"
                }
              ]
            },
            "documentation": {
              "id": 5101,
              "nodeType": "StructuredDocumentation",
              "src": "1171:127:7",
              "text": "@notice Get the price for the latest available round of a feed\n @param priceFeed Price feed\n @return Latest price"
            },
            "id": 5127,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAnswer",
            "nameLocation": "1310:9:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5105,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5104,
                  "mutability": "mutable",
                  "name": "priceFeed",
                  "nameLocation": "1342:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5127,
                  "src": "1320:31:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                    "typeString": "contract AggregatorV3Interface"
                  },
                  "typeName": {
                    "id": 5103,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5102,
                      "name": "AggregatorV3Interface",
                      "nameLocations": [
                        "1320:21:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 11709,
                      "src": "1320:21:7"
                    },
                    "referencedDeclaration": 11709,
                    "src": "1320:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                      "typeString": "contract AggregatorV3Interface"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1319:33:7"
            },
            "returnParameters": {
              "id": 5108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5107,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5127,
                  "src": "1376:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 5106,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1376:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1375:8:7"
            },
            "scope": 5207,
            "src": "1301:255:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 5172,
              "nodeType": "Block",
              "src": "1706:191:7",
              "statements": [
                {
                  "assignments": [
                    5134
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5134,
                      "mutability": "mutable",
                      "name": "priceA",
                      "nameLocation": "1717:6:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 5172,
                      "src": "1712:11:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 5133,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1712:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5141,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 5138,
                            "name": "CL_TOKENA",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5037,
                            "src": "1741:9:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                              "typeString": "contract AggregatorV3Interface"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                              "typeString": "contract AggregatorV3Interface"
                            }
                          ],
                          "id": 5137,
                          "name": "getAnswer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5127,
                          "src": "1731:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_contract$_AggregatorV3Interface_$11709_$returns$_t_int256_$",
                            "typeString": "function (contract AggregatorV3Interface) view returns (int256)"
                          }
                        },
                        "id": 5139,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1731:20:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      ],
                      "id": 5136,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1726:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 5135,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1726:4:7",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 5140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1726:26:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1712:40:7"
                },
                {
                  "assignments": [
                    5143
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5143,
                      "mutability": "mutable",
                      "name": "priceB",
                      "nameLocation": "1763:6:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 5172,
                      "src": "1758:11:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 5142,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1758:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5150,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 5147,
                            "name": "CL_TOKENB",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5040,
                            "src": "1787:9:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                              "typeString": "contract AggregatorV3Interface"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                              "typeString": "contract AggregatorV3Interface"
                            }
                          ],
                          "id": 5146,
                          "name": "getAnswer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5127,
                          "src": "1777:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_contract$_AggregatorV3Interface_$11709_$returns$_t_int256_$",
                            "typeString": "function (contract AggregatorV3Interface) view returns (int256)"
                          }
                        },
                        "id": 5148,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1777:20:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      ],
                      "id": 5145,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1772:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 5144,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1772:4:7",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 5149,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1772:26:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1758:40:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 5169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5155,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 5153,
                            "name": "priceA",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5134,
                            "src": "1815:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 5154,
                            "name": "priceB",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5143,
                            "src": "1824:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1815:15:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 5167,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 5156,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1834:2:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 5165,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      },
                                      "id": 5163,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "arguments": [],
                                        "expression": {
                                          "argumentTypes": [],
                                          "expression": {
                                            "id": 5157,
                                            "name": "CL_TOKENB",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 5040,
                                            "src": "1841:9:7",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                                              "typeString": "contract AggregatorV3Interface"
                                            }
                                          },
                                          "id": 5158,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "1851:8:7",
                                          "memberName": "decimals",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 11670,
                                          "src": "1841:18:7",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                            "typeString": "function () view external returns (uint8)"
                                          }
                                        },
                                        "id": 5159,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "1841:20:7",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "arguments": [],
                                        "expression": {
                                          "argumentTypes": [],
                                          "expression": {
                                            "id": 5160,
                                            "name": "CL_TOKENA",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 5037,
                                            "src": "1864:9:7",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_AggregatorV3Interface_$11709",
                                              "typeString": "contract AggregatorV3Interface"
                                            }
                                          },
                                          "id": 5161,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "1874:8:7",
                                          "memberName": "decimals",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 11670,
                                          "src": "1864:18:7",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                            "typeString": "function () view external returns (uint8)"
                                          }
                                        },
                                        "id": 5162,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "1864:20:7",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "src": "1841:43:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "hexValue": "38",
                                      "id": 5164,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1887:1:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_8_by_1",
                                        "typeString": "int_const 8"
                                      },
                                      "value": "8"
                                    },
                                    "src": "1841:47:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  }
                                ],
                                "id": 5166,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "1840:49:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "src": "1834:55:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 5168,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1833:57:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1815:75:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5152,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1811:3:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_int256_$",
                        "typeString": "type(int256)"
                      },
                      "typeName": {
                        "id": 5151,
                        "name": "int",
                        "nodeType": "ElementaryTypeName",
                        "src": "1811:3:7",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 5170,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1811:80:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "functionReturnParameters": 5132,
                  "id": 5171,
                  "nodeType": "Return",
                  "src": "1804:87:7"
                }
              ]
            },
            "documentation": {
              "id": 5128,
              "nodeType": "StructuredDocumentation",
              "src": "1560:90:7",
              "text": "@notice Get the oracle price for the latest available round\n @return Latest price"
            },
            "functionSelector": "50d25bcd",
            "id": 5173,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "latestAnswer",
            "nameLocation": "1662:12:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5129,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1674:2:7"
            },
            "returnParameters": {
              "id": 5132,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5131,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5173,
                  "src": "1698:6:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 5130,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1698:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1697:8:7"
            },
            "scope": 5207,
            "src": "1653:244:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5205,
              "nodeType": "Block",
              "src": "3300:104:7",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 5189,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3319:6:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint80_$",
                                "typeString": "type(uint80)"
                              },
                              "typeName": {
                                "id": 5188,
                                "name": "uint80",
                                "nodeType": "ElementaryTypeName",
                                "src": "3319:6:7",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint80_$",
                                "typeString": "type(uint80)"
                              }
                            ],
                            "id": 5187,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3314:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 5190,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3314:12:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint80",
                            "typeString": "type(uint80)"
                          }
                        },
                        "id": 5191,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3327:3:7",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "3314:16:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 5192,
                          "name": "latestAnswer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5173,
                          "src": "3332:12:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_int256_$",
                            "typeString": "function () view returns (int256)"
                          }
                        },
                        "id": 5193,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3332:14:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      {
                        "expression": {
                          "id": 5194,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3348:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 5195,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3354:9:7",
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "3348:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 5196,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3365:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 5197,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3371:9:7",
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "3365:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 5200,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3387:6:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint80_$",
                                "typeString": "type(uint80)"
                              },
                              "typeName": {
                                "id": 5199,
                                "name": "uint80",
                                "nodeType": "ElementaryTypeName",
                                "src": "3387:6:7",
                                "typeDescriptions": {}
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_uint80_$",
                                "typeString": "type(uint80)"
                              }
                            ],
                            "id": 5198,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "3382:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 5201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3382:12:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_uint80",
                            "typeString": "type(uint80)"
                          }
                        },
                        "id": 5202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "3395:3:7",
                        "memberName": "max",
                        "nodeType": "MemberAccess",
                        "src": "3382:16:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      }
                    ],
                    "id": 5203,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "3313:86:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "functionReturnParameters": 5186,
                  "id": 5204,
                  "nodeType": "Return",
                  "src": "3306:93:7"
                }
              ]
            },
            "documentation": {
              "id": 5174,
              "nodeType": "StructuredDocumentation",
              "src": "1903:1251:7",
              "text": " @notice get data about the latest round. Consumers are encouraged to check\n that they're receiving fresh data by inspecting the updatedAt and\n answeredInRound return values.\n Note that different underlying implementations of AggregatorV3Interface\n have slightly different semantics for some of the return values. Consumers\n should determine what implementations they expect to receive\n data from and validate that they can properly handle return data from all\n of them.\n @return roundId is the round ID from the aggregator for which the data was\n retrieved combined with an phase to ensure that round IDs get larger as\n time moves forward.\n @return answer is the answer for the given round\n @return startedAt is the timestamp when the round was started.\n (Only some AggregatorV3Interface implementations return meaningful values)\n @return updatedAt is the timestamp when the round last was updated (i.e.\n answer was last computed)\n @return answeredInRound is the round ID of the round in which the answer\n was computed.\n (Only some AggregatorV3Interface implementations return meaningful values)\n @dev Note that answer and updatedAt may change between queries."
            },
            "functionSelector": "feaf968c",
            "id": 5206,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "latestRoundData",
            "nameLocation": "3166:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5175,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3181:2:7"
            },
            "returnParameters": {
              "id": 5186,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5177,
                  "mutability": "mutable",
                  "name": "roundId",
                  "nameLocation": "3214:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5206,
                  "src": "3207:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 5176,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "3207:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5179,
                  "mutability": "mutable",
                  "name": "answer",
                  "nameLocation": "3230:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5206,
                  "src": "3223:13:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 5178,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3223:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5181,
                  "mutability": "mutable",
                  "name": "startedAt",
                  "nameLocation": "3246:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5206,
                  "src": "3238:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5180,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3238:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5183,
                  "mutability": "mutable",
                  "name": "updatedAt",
                  "nameLocation": "3265:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5206,
                  "src": "3257:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5182,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3257:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5185,
                  "mutability": "mutable",
                  "name": "answeredInRound",
                  "nameLocation": "3283:15:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 5206,
                  "src": "3276:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint80",
                    "typeString": "uint80"
                  },
                  "typeName": {
                    "id": 5184,
                    "name": "uint80",
                    "nodeType": "ElementaryTypeName",
                    "src": "3276:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint80",
                      "typeString": "uint80"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3206:93:7"
            },
            "scope": 5207,
            "src": "3157:247:7",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5208,
        "src": "499:2907:7",
        "usedErrors": []
      }
    ],
    "src": "33:3374:7"
  },
  "bytecode": "60c060405234801561001057600080fd5b506040516108a93803806108a983398101604081905261002f916101dc565b6001600160a01b0382161580159061004f57506001600160a01b03811615155b6100925760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064015b60405180910390fd5b6001600160a01b03808316608052811660a08190526040805163313ce56760e01b815290516010929163313ce5679160048083019260209291908290030181865afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610109919061020f565b6080516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016d919061020f565b6101779190610239565b60ff1610156101b95760405162461bcd60e51b815260206004820152600e60248201526d2232b1b4b6b0b6399032b93937b960911b6044820152606401610089565b5050610266565b80516001600160a01b03811681146101d757600080fd5b919050565b600080604083850312156101ef57600080fd5b6101f8836101c0565b9150610206602084016101c0565b90509250929050565b60006020828403121561022157600080fd5b815160ff8116811461023257600080fd5b9392505050565b60ff818116838216019081111561026057634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a0516106046102a560003960008181608b01528181610160015261020c01526000818160ca01528181610133015261018a01526106046000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c57806350d25bcd146100705780635fcf91aa14610086578063e4571356146100c5578063feaf968c146100ec575b600080fd5b604051600881526020015b60405180910390f35b61007861012b565b604051908152602001610067565b6100ad7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610067565b6100ad7f000000000000000000000000000000000000000000000000000000000000000081565b6100f46102c6565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610067565b6000806101577f00000000000000000000000000000000000000000000000000000000000000006102fd565b905060006101847f00000000000000000000000000000000000000000000000000000000000000006102fd565b905060087f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906103bb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c91906103bb565b61029691906103fb565b6102a0919061041a565b6102ab90600a610517565b6102b58284610526565b6102bf919061053d565b9250505090565b600080600080600069ffffffffffffffffffff6102e161012b565b909690955042945084935069ffffffffffffffffffff92509050565b6000806000836001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610364919061057e565b50935050925050600081116103b45760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b604482015260640160405180910390fd5b5092915050565b6000602082840312156103cd57600080fd5b815160ff811681146103de57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160190811115610414576104146103e5565b92915050565b60ff8281168282160390811115610414576104146103e5565b600181815b8085111561046e578160001904821115610454576104546103e5565b8085161561046157918102915b93841c9390800290610438565b509250929050565b60008261048557506001610414565b8161049257506000610414565b81600181146104a857600281146104b2576104ce565b6001915050610414565b60ff8411156104c3576104c36103e5565b50506001821b610414565b5060208310610133831016604e8410600b84101617156104f1575081810a610414565b6104fb8383610433565b806000190482111561050f5761050f6103e5565b029392505050565b60006103de60ff841683610476565b8082028115828204841417610414576104146103e5565b60008261055a57634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff8116811461057957600080fd5b919050565b600080600080600060a0868803121561059657600080fd5b61059f8661055f565b94506020860151935060408601519250606086015191506105c26080870161055f565b9050929550929590935056fea26469706673582212202bd897fd648d4ddbcd3a4653cea3bad94f9f987ce8985dbae28da765baec1c4364736f6c63430008130033",
  "bytecodeSha1": "2690241d55c3edd34385145d31753d615bd4beb3",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.19+commit.7dd6d404"
  },
  "contractName": "OracleConvert",
  "coverageMap": {
    "branches": {
      "37": {},
      "7": {
        "OracleConvert.getAnswer": {
          "5": [
            1497,
            1510,
            true
          ]
        }
      }
    },
    "statements": {
      "37": {},
      "7": {
        "OracleConvert.decimals": {
          "0": [
            1154,
            1162
          ]
        },
        "OracleConvert.getAnswer": {
          "3": [
            1489,
            1533
          ],
          "4": [
            1539,
            1551
          ]
        },
        "OracleConvert.latestAnswer": {
          "1": [
            1804,
            1891
          ]
        },
        "OracleConvert.latestRoundData": {
          "2": [
            3306,
            3399
          ]
        }
      }
    }
  },
  "dependencies": [
    "AggregatorV3Interface"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c57806350d25bcd146100705780635fcf91aa14610086578063e4571356146100c5578063feaf968c146100ec575b600080fd5b604051600881526020015b60405180910390f35b61007861012b565b604051908152602001610067565b6100ad7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610067565b6100ad7f000000000000000000000000000000000000000000000000000000000000000081565b6100f46102c6565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610067565b6000806101577f00000000000000000000000000000000000000000000000000000000000000006102fd565b905060006101847f00000000000000000000000000000000000000000000000000000000000000006102fd565b905060087f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906103bb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c91906103bb565b61029691906103fb565b6102a0919061041a565b6102ab90600a610517565b6102b58284610526565b6102bf919061053d565b9250505090565b600080600080600069ffffffffffffffffffff6102e161012b565b909690955042945084935069ffffffffffffffffffff92509050565b6000806000836001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610364919061057e565b50935050925050600081116103b45760405162461bcd60e51b8152602060048201526012602482015271526f756e64206e6f7420636f6d706c65746560701b604482015260640160405180910390fd5b5092915050565b6000602082840312156103cd57600080fd5b815160ff811681146103de57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160190811115610414576104146103e5565b92915050565b60ff8281168282160390811115610414576104146103e5565b600181815b8085111561046e578160001904821115610454576104546103e5565b8085161561046157918102915b93841c9390800290610438565b509250929050565b60008261048557506001610414565b8161049257506000610414565b81600181146104a857600281146104b2576104ce565b6001915050610414565b60ff8411156104c3576104c36103e5565b50506001821b610414565b5060208310610133831016604e8410600b84101617156104f1575081810a610414565b6104fb8383610433565b806000190482111561050f5761050f6103e5565b029392505050565b60006103de60ff841683610476565b8082028115828204841417610414576104146103e5565b60008261055a57634e487b7160e01b600052601260045260246000fd5b500490565b805169ffffffffffffffffffff8116811461057957600080fd5b919050565b600080600080600060a0868803121561059657600080fd5b61059f8661055f565b94506020860151935060408601519250606086015191506105c26080870161055f565b9050929550929590935056fea26469706673582212202bd897fd648d4ddbcd3a4653cea3bad94f9f987ce8985dbae28da765baec1c4364736f6c63430008130033",
  "deployedSourceMap": "499:2907:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1098:69;;;1161:1;156:36:58;;144:2;129:18;1098:69:7;;;;;;;;1653:244;;;:::i;:::-;;;347:25:58;;;335:2;320:18;1653:244:7;203:175:58;582:48:7;;;;;;;;-1:-1:-1;;;;;578:32:58;;;560:51;;548:2;533:18;582:48:7;383:234:58;528:48:7;;;;;3157:247;;;:::i;:::-;;;;885:22:58;934:15;;;916:34;;981:2;966:18;;959:34;;;;1009:18;;1002:34;;;;1067:2;1052:18;;1045:34;1116:15;;;1110:3;1095:19;;1088:44;862:3;847:19;3157:247:7;622:516:58;1653:244:7;1698:6;1712:11;1731:20;1741:9;1731;:20::i;:::-;1712:40;;1758:11;1777:20;1787:9;1777;:20::i;:::-;1758:40;;1887:1;1864:9;-1:-1:-1;;;;;1864:18:7;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1841:9;-1:-1:-1;;;;;1841:18:7;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:43;;;;:::i;:::-;:47;;;;:::i;:::-;1834:55;;:2;:55;:::i;:::-;1815:15;1824:6;1815;:15;:::i;:::-;:75;;;;:::i;:::-;1804:87;;;;1653:244;:::o;3157:247::-;3207:14;3223:13;3238:17;3257;3276:22;3314:16;3332:14;:12;:14::i;:::-;3306:93;;;;-1:-1:-1;3348:15:7;;-1:-1:-1;3348:15:7;;-1:-1:-1;3382:16:7;;-1:-1:-1;3157:247:7;-1:-1:-1;3157:247:7:o;1301:255::-;1376:6;1407:9;1432:14;1456:9;-1:-1:-1;;;;;1456:25:7;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:93;;;;;;;1509:1;1497:9;:13;1489:44;;;;-1:-1:-1;;;1489:44:7;;4504:2:58;1489:44:7;;;4486:21:58;4543:2;4523:18;;;4516:30;-1:-1:-1;;;4562:18:58;;;4555:48;4620:18;;1489:44:7;;;;;;;;-1:-1:-1;1546:5:7;1301:255;-1:-1:-1;;1301:255:7:o;1143:273:58:-;1211:6;1264:2;1252:9;1243:7;1239:23;1235:32;1232:52;;;1280:1;1277;1270:12;1232:52;1312:9;1306:16;1362:4;1355:5;1351:16;1344:5;1341:27;1331:55;;1382:1;1379;1372:12;1331:55;1405:5;1143:273;-1:-1:-1;;;1143:273:58:o;1421:127::-;1482:10;1477:3;1473:20;1470:1;1463:31;1513:4;1510:1;1503:15;1537:4;1534:1;1527:15;1553:148;1641:4;1620:12;;;1634;;;1616:31;;1659:13;;1656:39;;;1675:18;;:::i;:::-;1553:148;;;;:::o;1706:151::-;1796:4;1789:12;;;1775;;;1771:31;;1814:14;;1811:40;;;1831:18;;:::i;1862:422::-;1951:1;1994:5;1951:1;2008:270;2029:7;2019:8;2016:21;2008:270;;;2088:4;2084:1;2080:6;2076:17;2070:4;2067:27;2064:53;;;2097:18;;:::i;:::-;2147:7;2137:8;2133:22;2130:55;;;2167:16;;;;2130:55;2246:22;;;;2206:15;;;;2008:270;;;2012:3;1862:422;;;;;:::o;2289:806::-;2338:5;2368:8;2358:80;;-1:-1:-1;2409:1:58;2423:5;;2358:80;2457:4;2447:76;;-1:-1:-1;2494:1:58;2508:5;;2447:76;2539:4;2557:1;2552:59;;;;2625:1;2620:130;;;;2532:218;;2552:59;2582:1;2573:10;;2596:5;;;2620:130;2657:3;2647:8;2644:17;2641:43;;;2664:18;;:::i;:::-;-1:-1:-1;;2720:1:58;2706:16;;2735:5;;2532:218;;2834:2;2824:8;2821:16;2815:3;2809:4;2806:13;2802:36;2796:2;2786:8;2783:16;2778:2;2772:4;2769:12;2765:35;2762:77;2759:159;;;-1:-1:-1;2871:19:58;;;2903:5;;2759:159;2950:34;2975:8;2969:4;2950:34;:::i;:::-;3020:6;3016:1;3012:6;3008:19;2999:7;2996:32;2993:58;;;3031:18;;:::i;:::-;3069:20;;2289:806;-1:-1:-1;;;2289:806:58:o;3100:140::-;3158:5;3187:47;3228:4;3218:8;3214:19;3208:4;3187:47;:::i;3245:168::-;3318:9;;;3349;;3366:15;;;3360:22;;3346:37;3336:71;;3387:18;;:::i;3418:217::-;3458:1;3484;3474:132;;3528:10;3523:3;3519:20;3516:1;3509:31;3563:4;3560:1;3553:15;3591:4;3588:1;3581:15;3474:132;-1:-1:-1;3620:9:58;;3418:217::o;3640:179::-;3718:13;;3771:22;3760:34;;3750:45;;3740:73;;3809:1;3806;3799:12;3740:73;3640:179;;;:::o;3824:473::-;3927:6;3935;3943;3951;3959;4012:3;4000:9;3991:7;3987:23;3983:33;3980:53;;;4029:1;4026;4019:12;3980:53;4052:39;4081:9;4052:39;:::i;:::-;4042:49;;4131:2;4120:9;4116:18;4110:25;4100:35;;4175:2;4164:9;4160:18;4154:25;4144:35;;4219:2;4208:9;4204:18;4198:25;4188:35;;4242:49;4286:3;4275:9;4271:19;4242:49;:::i;:::-;4232:59;;3824:473;;;;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "clToken0": "Underlying token0 ChainLink feed",
          "clToken1": "Underlying token1 ChainLink feed"
        }
      },
      "decimals()": {
        "notice": "Get oracle decimals"
      },
      "latestAnswer()": {
        "notice": "Get the oracle price for the latest available round",
        "returns": {
          "_0": "Latest price"
        }
      },
      "latestRoundData()": {
        "details": "Note that answer and updatedAt may change between queries.",
        "notice": "get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorV3Interface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them.",
        "returns": {
          "answer": "is the answer for the given round",
          "answeredInRound": "is the round ID of the round in which the answer was computed. (Only some AggregatorV3Interface implementations return meaningful values)",
          "roundId": "is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round IDs get larger as time moves forward.",
          "startedAt": "is the timestamp when the round was started. (Only some AggregatorV3Interface implementations return meaningful values)",
          "updatedAt": "is the timestamp when the round last was updated (i.e. answer was last computed)"
        }
      }
    },
    "version": 1
  },
  "offset": [
    499,
    3406
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x313CE567 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x70 JUMPI DUP1 PUSH4 0x5FCF91AA EQ PUSH2 0x86 JUMPI DUP1 PUSH4 0xE4571356 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0xFEAF968C EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x78 PUSH2 0x12B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x67 JUMP JUMPDEST PUSH2 0xAD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x67 JUMP JUMPDEST PUSH2 0xAD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x2C6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x67 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x157 PUSH32 0x0 PUSH2 0x2FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x184 PUSH32 0x0 PUSH2 0x2FD JUMP JUMPDEST SWAP1 POP PUSH1 0x8 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x3BB JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x268 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x3BB JUMP JUMPDEST PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x3FB JUMP JUMPDEST PUSH2 0x2A0 SWAP2 SWAP1 PUSH2 0x41A JUMP JUMPDEST PUSH2 0x2AB SWAP1 PUSH1 0xA PUSH2 0x517 JUMP JUMPDEST PUSH2 0x2B5 DUP3 DUP5 PUSH2 0x526 JUMP JUMPDEST PUSH2 0x2BF SWAP2 SWAP1 PUSH2 0x53D JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH2 0x2E1 PUSH2 0x12B JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP TIMESTAMP SWAP5 POP DUP5 SWAP4 POP PUSH10 0xFFFFFFFFFFFFFFFFFFFF SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x340 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x364 SWAP2 SWAP1 PUSH2 0x57E JUMP JUMPDEST POP SWAP4 POP POP SWAP3 POP POP PUSH1 0x0 DUP2 GT PUSH2 0x3B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x526F756E64206E6F7420636F6D706C657465 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x414 JUMPI PUSH2 0x414 PUSH2 0x3E5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0x414 JUMPI PUSH2 0x414 PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x46E JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x454 JUMPI PUSH2 0x454 PUSH2 0x3E5 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x461 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x438 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x485 JUMPI POP PUSH1 0x1 PUSH2 0x414 JUMP JUMPDEST DUP2 PUSH2 0x492 JUMPI POP PUSH1 0x0 PUSH2 0x414 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x4A8 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x4B2 JUMPI PUSH2 0x4CE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x414 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x3E5 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x414 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x4F1 JUMPI POP DUP2 DUP2 EXP PUSH2 0x414 JUMP JUMPDEST PUSH2 0x4FB DUP4 DUP4 PUSH2 0x433 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x50F JUMPI PUSH2 0x50F PUSH2 0x3E5 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DE PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x476 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x414 JUMPI PUSH2 0x414 PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x55A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59F DUP7 PUSH2 0x55F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x60 DUP7 ADD MLOAD SWAP2 POP PUSH2 0x5C2 PUSH1 0x80 DUP8 ADD PUSH2 0x55F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xD8 SWAP8 REVERT PUSH5 0x8D4DDBCD3A CHAINID MSTORE8 0xCE LOG3 0xBA 0xD9 0x4F SWAP16 SWAP9 PUSH29 0xE8985DBAE28DA765BAEC1C4364736F6C63430008130033000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        499,
        3406
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "5": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "CALLVALUE",
      "path": "7"
    },
    "6": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "DUP1",
      "path": "7"
    },
    "7": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "8": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "12": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "DUP1",
      "path": "7"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "REVERT",
      "path": "7"
    },
    "16": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "17": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "POP",
      "path": "7"
    },
    "18": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "CALLDATASIZE",
      "path": "7"
    },
    "21": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "LT",
      "path": "7"
    },
    "22": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "26": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "CALLDATALOAD",
      "path": "7"
    },
    "29": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "SHR",
      "path": "7"
    },
    "32": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "DUP1",
      "path": "7"
    },
    "33": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x313CE567"
    },
    "38": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "EQ",
      "path": "7"
    },
    "39": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "43": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "DUP1",
      "path": "7"
    },
    "44": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x50D25BCD"
    },
    "49": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "EQ",
      "path": "7"
    },
    "50": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x70"
    },
    "53": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "54": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "DUP1",
      "path": "7"
    },
    "55": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x5FCF91AA"
    },
    "60": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "EQ",
      "path": "7"
    },
    "61": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x86"
    },
    "64": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "65": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "DUP1",
      "path": "7"
    },
    "66": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0xE4571356"
    },
    "71": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "EQ",
      "path": "7"
    },
    "72": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xC5"
    },
    "75": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "76": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "DUP1",
      "path": "7"
    },
    "77": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0xFEAF968C"
    },
    "82": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "EQ",
      "path": "7"
    },
    "83": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xEC"
    },
    "86": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "87": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "88": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "DUP1",
      "path": "7"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        499,
        3406
      ],
      "op": "REVERT",
      "path": "7"
    },
    "92": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "93": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "95": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "96": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1161,
        1162
      ],
      "op": "PUSH1",
      "path": "7",
      "statement": 0,
      "value": "0x8"
    },
    "98": {
      "op": "DUP2"
    },
    "99": {
      "op": "MSTORE"
    },
    "100": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "102": {
      "op": "ADD"
    },
    "103": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "104": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "106": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "107": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "DUP1",
      "path": "7"
    },
    "108": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "109": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "SUB",
      "path": "7"
    },
    "110": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "111": {
      "fn": "OracleConvert.decimals",
      "offset": [
        1098,
        1167
      ],
      "op": "RETURN",
      "path": "7"
    },
    "112": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "113": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x78"
    },
    "116": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x12B"
    },
    "119": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1653,
        1897
      ],
      "op": "JUMP",
      "path": "7"
    },
    "120": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "121": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "123": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "124": {
      "op": "SWAP1"
    },
    "125": {
      "op": "DUP2"
    },
    "126": {
      "op": "MSTORE"
    },
    "127": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "129": {
      "op": "ADD"
    },
    "130": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x67"
    },
    "133": {
      "op": "JUMP"
    },
    "134": {
      "offset": [
        582,
        630
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "135": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        582,
        630
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xAD"
    },
    "138": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        582,
        630
      ],
      "op": "PUSH32",
      "path": "7",
      "value": "0x0"
    },
    "171": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        582,
        630
      ],
      "op": "DUP2",
      "path": "7"
    },
    "172": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        582,
        630
      ],
      "op": "JUMP",
      "path": "7"
    },
    "173": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        582,
        630
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "174": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        582,
        630
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "176": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        582,
        630
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "177": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "181": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "183": {
      "op": "SHL"
    },
    "184": {
      "op": "SUB"
    },
    "185": {
      "op": "SWAP1"
    },
    "186": {
      "op": "SWAP2"
    },
    "187": {
      "op": "AND"
    },
    "188": {
      "op": "DUP2"
    },
    "189": {
      "op": "MSTORE"
    },
    "190": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "192": {
      "op": "ADD"
    },
    "193": {
      "offset": [
        582,
        630
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x67"
    },
    "196": {
      "op": "JUMP"
    },
    "197": {
      "offset": [
        528,
        576
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "198": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        528,
        576
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xAD"
    },
    "201": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        528,
        576
      ],
      "op": "PUSH32",
      "path": "7",
      "value": "0x0"
    },
    "234": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        528,
        576
      ],
      "op": "DUP2",
      "path": "7"
    },
    "235": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        528,
        576
      ],
      "op": "JUMP",
      "path": "7"
    },
    "236": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "237": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xF4"
    },
    "240": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x2C6"
    },
    "243": {
      "fn": "OracleConvert.latestRoundData",
      "jump": "i",
      "offset": [
        3157,
        3404
      ],
      "op": "JUMP",
      "path": "7"
    },
    "244": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "245": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "247": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "DUP1",
      "path": "7"
    },
    "248": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "249": {
      "op": "PUSH10",
      "value": "0xFFFFFFFFFFFFFFFFFFFF"
    },
    "260": {
      "op": "SWAP7"
    },
    "261": {
      "op": "DUP8"
    },
    "262": {
      "op": "AND"
    },
    "263": {
      "op": "DUP2"
    },
    "264": {
      "op": "MSTORE"
    },
    "265": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "267": {
      "op": "DUP2"
    },
    "268": {
      "op": "ADD"
    },
    "269": {
      "op": "SWAP6"
    },
    "270": {
      "op": "SWAP1"
    },
    "271": {
      "op": "SWAP6"
    },
    "272": {
      "op": "MSTORE"
    },
    "273": {
      "op": "DUP5"
    },
    "274": {
      "op": "ADD"
    },
    "275": {
      "op": "SWAP3"
    },
    "276": {
      "op": "SWAP1"
    },
    "277": {
      "op": "SWAP3"
    },
    "278": {
      "op": "MSTORE"
    },
    "279": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "281": {
      "op": "DUP4"
    },
    "282": {
      "op": "ADD"
    },
    "283": {
      "op": "MSTORE"
    },
    "284": {
      "op": "SWAP1"
    },
    "285": {
      "op": "SWAP2"
    },
    "286": {
      "op": "AND"
    },
    "287": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "289": {
      "op": "DUP3"
    },
    "290": {
      "op": "ADD"
    },
    "291": {
      "op": "MSTORE"
    },
    "292": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "294": {
      "op": "ADD"
    },
    "295": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x67"
    },
    "298": {
      "op": "JUMP"
    },
    "299": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "300": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1698,
        1704
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "302": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1712,
        1723
      ],
      "op": "DUP1",
      "path": "7"
    },
    "303": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1731,
        1751
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x157"
    },
    "306": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1741,
        1750
      ],
      "op": "PUSH32",
      "path": "7",
      "value": "0x0"
    },
    "339": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1731,
        1740
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x2FD"
    },
    "342": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1731,
        1751
      ],
      "op": "JUMP",
      "path": "7"
    },
    "343": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1731,
        1751
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "344": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1712,
        1752
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "345": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1712,
        1752
      ],
      "op": "POP",
      "path": "7"
    },
    "346": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1758,
        1769
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "348": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1777,
        1797
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x184"
    },
    "351": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1787,
        1796
      ],
      "op": "PUSH32",
      "path": "7",
      "value": "0x0"
    },
    "384": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1777,
        1786
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x2FD"
    },
    "387": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1777,
        1797
      ],
      "op": "JUMP",
      "path": "7"
    },
    "388": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1777,
        1797
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "389": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1758,
        1798
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "390": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1758,
        1798
      ],
      "op": "POP",
      "path": "7"
    },
    "391": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1887,
        1888
      ],
      "op": "PUSH1",
      "path": "7",
      "statement": 1,
      "value": "0x8"
    },
    "393": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1873
      ],
      "op": "PUSH32",
      "path": "7",
      "value": "0x0"
    },
    "426": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "428": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "430": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "432": {
      "op": "SHL"
    },
    "433": {
      "op": "SUB"
    },
    "434": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1882
      ],
      "op": "AND",
      "path": "7"
    },
    "435": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1882
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x313CE567"
    },
    "440": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "442": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "443": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP2",
      "path": "7"
    },
    "444": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0xFFFFFFFF"
    },
    "449": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "AND",
      "path": "7"
    },
    "450": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xE0"
    },
    "452": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "SHL",
      "path": "7"
    },
    "453": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP2",
      "path": "7"
    },
    "454": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "455": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "457": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "ADD",
      "path": "7"
    },
    "458": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "460": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "462": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "463": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP1",
      "path": "7"
    },
    "464": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP4",
      "path": "7"
    },
    "465": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "SUB",
      "path": "7"
    },
    "466": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP2",
      "path": "7"
    },
    "467": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP7",
      "path": "7"
    },
    "468": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "GAS",
      "path": "7"
    },
    "469": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "STATICCALL",
      "path": "7"
    },
    "470": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "471": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP1",
      "path": "7"
    },
    "472": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "473": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x1E6"
    },
    "476": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "477": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "478": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "480": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP1",
      "path": "7"
    },
    "481": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "RETURNDATACOPY",
      "path": "7"
    },
    "482": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "483": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "485": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "REVERT",
      "path": "7"
    },
    "486": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "487": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "POP",
      "path": "7"
    },
    "488": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "POP",
      "path": "7"
    },
    "489": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "POP",
      "path": "7"
    },
    "490": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "POP",
      "path": "7"
    },
    "491": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "493": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "494": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "495": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1F"
    },
    "497": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "NOT",
      "path": "7"
    },
    "498": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1F"
    },
    "500": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP3",
      "path": "7"
    },
    "501": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "ADD",
      "path": "7"
    },
    "502": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "AND",
      "path": "7"
    },
    "503": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP3",
      "path": "7"
    },
    "504": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "ADD",
      "path": "7"
    },
    "505": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP1",
      "path": "7"
    },
    "506": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "508": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "509": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "POP",
      "path": "7"
    },
    "510": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "DUP2",
      "path": "7"
    },
    "511": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "ADD",
      "path": "7"
    },
    "512": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "513": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x20A"
    },
    "516": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "517": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "518": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x3BB"
    },
    "521": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1864,
        1884
      ],
      "op": "JUMP",
      "path": "7"
    },
    "522": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1864,
        1884
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "523": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1850
      ],
      "op": "PUSH32",
      "path": "7",
      "value": "0x0"
    },
    "556": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "558": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "560": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "562": {
      "op": "SHL"
    },
    "563": {
      "op": "SUB"
    },
    "564": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1859
      ],
      "op": "AND",
      "path": "7"
    },
    "565": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1859
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x313CE567"
    },
    "570": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "572": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "573": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP2",
      "path": "7"
    },
    "574": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0xFFFFFFFF"
    },
    "579": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "AND",
      "path": "7"
    },
    "580": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xE0"
    },
    "582": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "SHL",
      "path": "7"
    },
    "583": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP2",
      "path": "7"
    },
    "584": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "585": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "587": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "ADD",
      "path": "7"
    },
    "588": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "590": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "592": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "593": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP1",
      "path": "7"
    },
    "594": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP4",
      "path": "7"
    },
    "595": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "SUB",
      "path": "7"
    },
    "596": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP2",
      "path": "7"
    },
    "597": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP7",
      "path": "7"
    },
    "598": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "GAS",
      "path": "7"
    },
    "599": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "STATICCALL",
      "path": "7"
    },
    "600": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "601": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP1",
      "path": "7"
    },
    "602": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "603": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x268"
    },
    "606": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "607": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "608": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "610": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP1",
      "path": "7"
    },
    "611": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "RETURNDATACOPY",
      "path": "7"
    },
    "612": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "613": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "615": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "REVERT",
      "path": "7"
    },
    "616": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "617": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "POP",
      "path": "7"
    },
    "618": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "POP",
      "path": "7"
    },
    "619": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "POP",
      "path": "7"
    },
    "620": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "POP",
      "path": "7"
    },
    "621": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "623": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "624": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "625": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1F"
    },
    "627": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "NOT",
      "path": "7"
    },
    "628": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1F"
    },
    "630": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP3",
      "path": "7"
    },
    "631": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "ADD",
      "path": "7"
    },
    "632": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "AND",
      "path": "7"
    },
    "633": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP3",
      "path": "7"
    },
    "634": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "ADD",
      "path": "7"
    },
    "635": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP1",
      "path": "7"
    },
    "636": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "638": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "639": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "POP",
      "path": "7"
    },
    "640": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "DUP2",
      "path": "7"
    },
    "641": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "ADD",
      "path": "7"
    },
    "642": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "643": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x28C"
    },
    "646": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "647": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "648": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x3BB"
    },
    "651": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1841,
        1861
      ],
      "op": "JUMP",
      "path": "7"
    },
    "652": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1861
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "653": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1884
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x296"
    },
    "656": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1884
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "657": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1884
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "658": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1884
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x3FB"
    },
    "661": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1841,
        1884
      ],
      "op": "JUMP",
      "path": "7"
    },
    "662": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1884
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "663": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1888
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x2A0"
    },
    "666": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1888
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "667": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1888
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "668": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1888
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x41A"
    },
    "671": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1841,
        1888
      ],
      "op": "JUMP",
      "path": "7"
    },
    "672": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1841,
        1888
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "673": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1834,
        1889
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x2AB"
    },
    "676": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1834,
        1889
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "677": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1834,
        1836
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xA"
    },
    "679": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1834,
        1889
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x517"
    },
    "682": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1834,
        1889
      ],
      "op": "JUMP",
      "path": "7"
    },
    "683": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1834,
        1889
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "684": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1830
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x2B5"
    },
    "687": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1824,
        1830
      ],
      "op": "DUP3",
      "path": "7"
    },
    "688": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1821
      ],
      "op": "DUP5",
      "path": "7"
    },
    "689": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1830
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x526"
    },
    "692": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1815,
        1830
      ],
      "op": "JUMP",
      "path": "7"
    },
    "693": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1830
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "694": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1890
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x2BF"
    },
    "697": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1890
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "698": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1890
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "699": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1890
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x53D"
    },
    "702": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "i",
      "offset": [
        1815,
        1890
      ],
      "op": "JUMP",
      "path": "7"
    },
    "703": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1815,
        1890
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "704": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1804,
        1891
      ],
      "op": "SWAP3",
      "path": "7"
    },
    "705": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1804,
        1891
      ],
      "op": "POP",
      "path": "7"
    },
    "706": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1804,
        1891
      ],
      "op": "POP",
      "path": "7"
    },
    "707": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1804,
        1891
      ],
      "op": "POP",
      "path": "7"
    },
    "708": {
      "fn": "OracleConvert.latestAnswer",
      "offset": [
        1653,
        1897
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "709": {
      "fn": "OracleConvert.latestAnswer",
      "jump": "o",
      "offset": [
        1653,
        1897
      ],
      "op": "JUMP",
      "path": "7"
    },
    "710": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "711": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3207,
        3221
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "713": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3223,
        3236
      ],
      "op": "DUP1",
      "path": "7"
    },
    "714": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3238,
        3255
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "716": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3257,
        3274
      ],
      "op": "DUP1",
      "path": "7"
    },
    "717": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3276,
        3298
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "719": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3314,
        3330
      ],
      "op": "PUSH10",
      "path": "7",
      "statement": 2,
      "value": "0xFFFFFFFFFFFFFFFFFFFF"
    },
    "730": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3332,
        3346
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x2E1"
    },
    "733": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3332,
        3344
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x12B"
    },
    "736": {
      "fn": "OracleConvert.latestRoundData",
      "jump": "i",
      "offset": [
        3332,
        3346
      ],
      "op": "JUMP",
      "path": "7"
    },
    "737": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3332,
        3346
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "738": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3306,
        3399
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "739": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3306,
        3399
      ],
      "op": "SWAP7",
      "path": "7"
    },
    "740": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3306,
        3399
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "741": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3306,
        3399
      ],
      "op": "SWAP6",
      "path": "7"
    },
    "742": {
      "op": "POP"
    },
    "743": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3348,
        3363
      ],
      "op": "TIMESTAMP",
      "path": "7"
    },
    "744": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3348,
        3363
      ],
      "op": "SWAP5",
      "path": "7"
    },
    "745": {
      "op": "POP"
    },
    "746": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3348,
        3363
      ],
      "op": "DUP5",
      "path": "7"
    },
    "747": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3348,
        3363
      ],
      "op": "SWAP4",
      "path": "7"
    },
    "748": {
      "op": "POP"
    },
    "749": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3382,
        3398
      ],
      "op": "PUSH10",
      "path": "7",
      "value": "0xFFFFFFFFFFFFFFFFFFFF"
    },
    "760": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3382,
        3398
      ],
      "op": "SWAP3",
      "path": "7"
    },
    "761": {
      "op": "POP"
    },
    "762": {
      "fn": "OracleConvert.latestRoundData",
      "offset": [
        3157,
        3404
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "763": {
      "op": "POP"
    },
    "764": {
      "fn": "OracleConvert.latestRoundData",
      "jump": "o",
      "offset": [
        3157,
        3404
      ],
      "op": "JUMP",
      "path": "7"
    },
    "765": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1301,
        1556
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "766": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1376,
        1382
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "768": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1407,
        1416
      ],
      "op": "DUP1",
      "path": "7"
    },
    "769": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1432,
        1446
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "771": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1465
      ],
      "op": "DUP4",
      "path": "7"
    },
    "772": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "774": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "776": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "778": {
      "op": "SHL"
    },
    "779": {
      "op": "SUB"
    },
    "780": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1481
      ],
      "op": "AND",
      "path": "7"
    },
    "781": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1481
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0xFEAF968C"
    },
    "786": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "788": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "789": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP2",
      "path": "7"
    },
    "790": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0xFFFFFFFF"
    },
    "795": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "AND",
      "path": "7"
    },
    "796": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xE0"
    },
    "798": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "SHL",
      "path": "7"
    },
    "799": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP2",
      "path": "7"
    },
    "800": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "801": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "803": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "ADD",
      "path": "7"
    },
    "804": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xA0"
    },
    "806": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "808": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "809": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP1",
      "path": "7"
    },
    "810": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP4",
      "path": "7"
    },
    "811": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "SUB",
      "path": "7"
    },
    "812": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP2",
      "path": "7"
    },
    "813": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP7",
      "path": "7"
    },
    "814": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "GAS",
      "path": "7"
    },
    "815": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "STATICCALL",
      "path": "7"
    },
    "816": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "817": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP1",
      "path": "7"
    },
    "818": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "819": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x340"
    },
    "822": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "823": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "824": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "826": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP1",
      "path": "7"
    },
    "827": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "RETURNDATACOPY",
      "path": "7"
    },
    "828": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "829": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "831": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "REVERT",
      "path": "7"
    },
    "832": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "833": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "834": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "835": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "836": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "837": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "839": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "840": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "841": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1F"
    },
    "843": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "NOT",
      "path": "7"
    },
    "844": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1F"
    },
    "846": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP3",
      "path": "7"
    },
    "847": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "ADD",
      "path": "7"
    },
    "848": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "AND",
      "path": "7"
    },
    "849": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP3",
      "path": "7"
    },
    "850": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "ADD",
      "path": "7"
    },
    "851": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP1",
      "path": "7"
    },
    "852": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "854": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "855": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "856": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "DUP2",
      "path": "7"
    },
    "857": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "ADD",
      "path": "7"
    },
    "858": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "859": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x364"
    },
    "862": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "863": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "864": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x57E"
    },
    "867": {
      "fn": "OracleConvert.getAnswer",
      "jump": "i",
      "offset": [
        1456,
        1483
      ],
      "op": "JUMP",
      "path": "7"
    },
    "868": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1456,
        1483
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "869": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1390,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "870": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1390,
        1483
      ],
      "op": "SWAP4",
      "path": "7"
    },
    "871": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1390,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "872": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1390,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "873": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1390,
        1483
      ],
      "op": "SWAP3",
      "path": "7"
    },
    "874": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1390,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "875": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1390,
        1483
      ],
      "op": "POP",
      "path": "7"
    },
    "876": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1509,
        1510
      ],
      "op": "PUSH1",
      "path": "7",
      "statement": 3,
      "value": "0x0"
    },
    "878": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1497,
        1506
      ],
      "op": "DUP2",
      "path": "7"
    },
    "879": {
      "branch": 5,
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1497,
        1510
      ],
      "op": "GT",
      "path": "7"
    },
    "880": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x3B4"
    },
    "883": {
      "branch": 5,
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "884": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "886": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "887": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "891": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "893": {
      "op": "SHL"
    },
    "894": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "DUP2",
      "path": "7"
    },
    "895": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "896": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "898": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "900": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "DUP3",
      "path": "7"
    },
    "901": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "ADD",
      "path": "7"
    },
    "902": {
      "op": "MSTORE"
    },
    "903": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "905": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "907": {
      "op": "DUP3"
    },
    "908": {
      "op": "ADD"
    },
    "909": {
      "op": "MSTORE"
    },
    "910": {
      "op": "PUSH18",
      "value": "0x526F756E64206E6F7420636F6D706C657465"
    },
    "929": {
      "op": "PUSH1",
      "value": "0x70"
    },
    "931": {
      "op": "SHL"
    },
    "932": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "934": {
      "op": "DUP3"
    },
    "935": {
      "op": "ADD"
    },
    "936": {
      "op": "MSTORE"
    },
    "937": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "939": {
      "op": "ADD"
    },
    "940": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "942": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "943": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "DUP1",
      "path": "7"
    },
    "944": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "945": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "SUB",
      "path": "7"
    },
    "946": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "947": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "7"
    },
    "948": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1489,
        1533
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "949": {
      "op": "POP"
    },
    "950": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1546,
        1551
      ],
      "op": "SWAP3",
      "path": "7",
      "statement": 4
    },
    "951": {
      "fn": "OracleConvert.getAnswer",
      "offset": [
        1301,
        1556
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "952": {
      "op": "POP"
    },
    "953": {
      "op": "POP"
    },
    "954": {
      "fn": "OracleConvert.getAnswer",
      "jump": "o",
      "offset": [
        1301,
        1556
      ],
      "op": "JUMP",
      "path": "7"
    },
    "955": {
      "op": "JUMPDEST"
    },
    "956": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "958": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "960": {
      "op": "DUP3"
    },
    "961": {
      "op": "DUP5"
    },
    "962": {
      "op": "SUB"
    },
    "963": {
      "op": "SLT"
    },
    "964": {
      "op": "ISZERO"
    },
    "965": {
      "op": "PUSH2",
      "value": "0x3CD"
    },
    "968": {
      "op": "JUMPI"
    },
    "969": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "971": {
      "op": "DUP1"
    },
    "972": {
      "op": "REVERT"
    },
    "973": {
      "op": "JUMPDEST"
    },
    "974": {
      "op": "DUP2"
    },
    "975": {
      "op": "MLOAD"
    },
    "976": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "978": {
      "op": "DUP2"
    },
    "979": {
      "op": "AND"
    },
    "980": {
      "op": "DUP2"
    },
    "981": {
      "op": "EQ"
    },
    "982": {
      "op": "PUSH2",
      "value": "0x3DE"
    },
    "985": {
      "op": "JUMPI"
    },
    "986": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "988": {
      "op": "DUP1"
    },
    "989": {
      "op": "REVERT"
    },
    "990": {
      "op": "JUMPDEST"
    },
    "991": {
      "op": "SWAP4"
    },
    "992": {
      "op": "SWAP3"
    },
    "993": {
      "op": "POP"
    },
    "994": {
      "op": "POP"
    },
    "995": {
      "op": "POP"
    },
    "996": {
      "jump": "o",
      "op": "JUMP"
    },
    "997": {
      "op": "JUMPDEST"
    },
    "998": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1003": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1005": {
      "op": "SHL"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1008": {
      "op": "MSTORE"
    },
    "1009": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1011": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1013": {
      "op": "MSTORE"
    },
    "1014": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1016": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1018": {
      "op": "REVERT"
    },
    "1019": {
      "op": "JUMPDEST"
    },
    "1020": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1022": {
      "op": "DUP2"
    },
    "1023": {
      "op": "DUP2"
    },
    "1024": {
      "op": "AND"
    },
    "1025": {
      "op": "DUP4"
    },
    "1026": {
      "op": "DUP3"
    },
    "1027": {
      "op": "AND"
    },
    "1028": {
      "op": "ADD"
    },
    "1029": {
      "op": "SWAP1"
    },
    "1030": {
      "op": "DUP2"
    },
    "1031": {
      "op": "GT"
    },
    "1032": {
      "op": "ISZERO"
    },
    "1033": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1036": {
      "op": "JUMPI"
    },
    "1037": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1040": {
      "op": "PUSH2",
      "value": "0x3E5"
    },
    "1043": {
      "jump": "i",
      "op": "JUMP"
    },
    "1044": {
      "op": "JUMPDEST"
    },
    "1045": {
      "op": "SWAP3"
    },
    "1046": {
      "op": "SWAP2"
    },
    "1047": {
      "op": "POP"
    },
    "1048": {
      "op": "POP"
    },
    "1049": {
      "jump": "o",
      "op": "JUMP"
    },
    "1050": {
      "op": "JUMPDEST"
    },
    "1051": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1053": {
      "op": "DUP3"
    },
    "1054": {
      "op": "DUP2"
    },
    "1055": {
      "op": "AND"
    },
    "1056": {
      "op": "DUP3"
    },
    "1057": {
      "op": "DUP3"
    },
    "1058": {
      "op": "AND"
    },
    "1059": {
      "op": "SUB"
    },
    "1060": {
      "op": "SWAP1"
    },
    "1061": {
      "op": "DUP2"
    },
    "1062": {
      "op": "GT"
    },
    "1063": {
      "op": "ISZERO"
    },
    "1064": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1067": {
      "op": "JUMPI"
    },
    "1068": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1071": {
      "op": "PUSH2",
      "value": "0x3E5"
    },
    "1074": {
      "jump": "i",
      "op": "JUMP"
    },
    "1075": {
      "op": "JUMPDEST"
    },
    "1076": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1078": {
      "op": "DUP2"
    },
    "1079": {
      "op": "DUP2"
    },
    "1080": {
      "op": "JUMPDEST"
    },
    "1081": {
      "op": "DUP1"
    },
    "1082": {
      "op": "DUP6"
    },
    "1083": {
      "op": "GT"
    },
    "1084": {
      "op": "ISZERO"
    },
    "1085": {
      "op": "PUSH2",
      "value": "0x46E"
    },
    "1088": {
      "op": "JUMPI"
    },
    "1089": {
      "op": "DUP2"
    },
    "1090": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1092": {
      "op": "NOT"
    },
    "1093": {
      "op": "DIV"
    },
    "1094": {
      "op": "DUP3"
    },
    "1095": {
      "op": "GT"
    },
    "1096": {
      "op": "ISZERO"
    },
    "1097": {
      "op": "PUSH2",
      "value": "0x454"
    },
    "1100": {
      "op": "JUMPI"
    },
    "1101": {
      "op": "PUSH2",
      "value": "0x454"
    },
    "1104": {
      "op": "PUSH2",
      "value": "0x3E5"
    },
    "1107": {
      "jump": "i",
      "op": "JUMP"
    },
    "1108": {
      "op": "JUMPDEST"
    },
    "1109": {
      "op": "DUP1"
    },
    "1110": {
      "op": "DUP6"
    },
    "1111": {
      "op": "AND"
    },
    "1112": {
      "op": "ISZERO"
    },
    "1113": {
      "op": "PUSH2",
      "value": "0x461"
    },
    "1116": {
      "op": "JUMPI"
    },
    "1117": {
      "op": "SWAP2"
    },
    "1118": {
      "op": "DUP2"
    },
    "1119": {
      "op": "MUL"
    },
    "1120": {
      "op": "SWAP2"
    },
    "1121": {
      "op": "JUMPDEST"
    },
    "1122": {
      "op": "SWAP4"
    },
    "1123": {
      "op": "DUP5"
    },
    "1124": {
      "op": "SHR"
    },
    "1125": {
      "op": "SWAP4"
    },
    "1126": {
      "op": "SWAP1"
    },
    "1127": {
      "op": "DUP1"
    },
    "1128": {
      "op": "MUL"
    },
    "1129": {
      "op": "SWAP1"
    },
    "1130": {
      "op": "PUSH2",
      "value": "0x438"
    },
    "1133": {
      "op": "JUMP"
    },
    "1134": {
      "op": "JUMPDEST"
    },
    "1135": {
      "op": "POP"
    },
    "1136": {
      "op": "SWAP3"
    },
    "1137": {
      "op": "POP"
    },
    "1138": {
      "op": "SWAP3"
    },
    "1139": {
      "op": "SWAP1"
    },
    "1140": {
      "op": "POP"
    },
    "1141": {
      "jump": "o",
      "op": "JUMP"
    },
    "1142": {
      "op": "JUMPDEST"
    },
    "1143": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1145": {
      "op": "DUP3"
    },
    "1146": {
      "op": "PUSH2",
      "value": "0x485"
    },
    "1149": {
      "op": "JUMPI"
    },
    "1150": {
      "op": "POP"
    },
    "1151": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1153": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1156": {
      "op": "JUMP"
    },
    "1157": {
      "op": "JUMPDEST"
    },
    "1158": {
      "op": "DUP2"
    },
    "1159": {
      "op": "PUSH2",
      "value": "0x492"
    },
    "1162": {
      "op": "JUMPI"
    },
    "1163": {
      "op": "POP"
    },
    "1164": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1166": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1169": {
      "op": "JUMP"
    },
    "1170": {
      "op": "JUMPDEST"
    },
    "1171": {
      "op": "DUP2"
    },
    "1172": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1174": {
      "op": "DUP2"
    },
    "1175": {
      "op": "EQ"
    },
    "1176": {
      "op": "PUSH2",
      "value": "0x4A8"
    },
    "1179": {
      "op": "JUMPI"
    },
    "1180": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "1182": {
      "op": "DUP2"
    },
    "1183": {
      "op": "EQ"
    },
    "1184": {
      "op": "PUSH2",
      "value": "0x4B2"
    },
    "1187": {
      "op": "JUMPI"
    },
    "1188": {
      "op": "PUSH2",
      "value": "0x4CE"
    },
    "1191": {
      "op": "JUMP"
    },
    "1192": {
      "op": "JUMPDEST"
    },
    "1193": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1195": {
      "op": "SWAP2"
    },
    "1196": {
      "op": "POP"
    },
    "1197": {
      "op": "POP"
    },
    "1198": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1201": {
      "op": "JUMP"
    },
    "1202": {
      "op": "JUMPDEST"
    },
    "1203": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1205": {
      "op": "DUP5"
    },
    "1206": {
      "op": "GT"
    },
    "1207": {
      "op": "ISZERO"
    },
    "1208": {
      "op": "PUSH2",
      "value": "0x4C3"
    },
    "1211": {
      "op": "JUMPI"
    },
    "1212": {
      "op": "PUSH2",
      "value": "0x4C3"
    },
    "1215": {
      "op": "PUSH2",
      "value": "0x3E5"
    },
    "1218": {
      "jump": "i",
      "op": "JUMP"
    },
    "1219": {
      "op": "JUMPDEST"
    },
    "1220": {
      "op": "POP"
    },
    "1221": {
      "op": "POP"
    },
    "1222": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1224": {
      "op": "DUP3"
    },
    "1225": {
      "op": "SHL"
    },
    "1226": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1229": {
      "op": "JUMP"
    },
    "1230": {
      "op": "JUMPDEST"
    },
    "1231": {
      "op": "POP"
    },
    "1232": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1234": {
      "op": "DUP4"
    },
    "1235": {
      "op": "LT"
    },
    "1236": {
      "op": "PUSH2",
      "value": "0x133"
    },
    "1239": {
      "op": "DUP4"
    },
    "1240": {
      "op": "LT"
    },
    "1241": {
      "op": "AND"
    },
    "1242": {
      "op": "PUSH1",
      "value": "0x4E"
    },
    "1244": {
      "op": "DUP5"
    },
    "1245": {
      "op": "LT"
    },
    "1246": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "1248": {
      "op": "DUP5"
    },
    "1249": {
      "op": "LT"
    },
    "1250": {
      "op": "AND"
    },
    "1251": {
      "op": "OR"
    },
    "1252": {
      "op": "ISZERO"
    },
    "1253": {
      "op": "PUSH2",
      "value": "0x4F1"
    },
    "1256": {
      "op": "JUMPI"
    },
    "1257": {
      "op": "POP"
    },
    "1258": {
      "op": "DUP2"
    },
    "1259": {
      "op": "DUP2"
    },
    "1260": {
      "op": "EXP"
    },
    "1261": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1264": {
      "op": "JUMP"
    },
    "1265": {
      "op": "JUMPDEST"
    },
    "1266": {
      "op": "PUSH2",
      "value": "0x4FB"
    },
    "1269": {
      "op": "DUP4"
    },
    "1270": {
      "op": "DUP4"
    },
    "1271": {
      "op": "PUSH2",
      "value": "0x433"
    },
    "1274": {
      "jump": "i",
      "op": "JUMP"
    },
    "1275": {
      "op": "JUMPDEST"
    },
    "1276": {
      "op": "DUP1"
    },
    "1277": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1279": {
      "op": "NOT"
    },
    "1280": {
      "op": "DIV"
    },
    "1281": {
      "op": "DUP3"
    },
    "1282": {
      "op": "GT"
    },
    "1283": {
      "op": "ISZERO"
    },
    "1284": {
      "op": "PUSH2",
      "value": "0x50F"
    },
    "1287": {
      "op": "JUMPI"
    },
    "1288": {
      "op": "PUSH2",
      "value": "0x50F"
    },
    "1291": {
      "op": "PUSH2",
      "value": "0x3E5"
    },
    "1294": {
      "jump": "i",
      "op": "JUMP"
    },
    "1295": {
      "op": "JUMPDEST"
    },
    "1296": {
      "op": "MUL"
    },
    "1297": {
      "op": "SWAP4"
    },
    "1298": {
      "op": "SWAP3"
    },
    "1299": {
      "op": "POP"
    },
    "1300": {
      "op": "POP"
    },
    "1301": {
      "op": "POP"
    },
    "1302": {
      "jump": "o",
      "op": "JUMP"
    },
    "1303": {
      "op": "JUMPDEST"
    },
    "1304": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1306": {
      "op": "PUSH2",
      "value": "0x3DE"
    },
    "1309": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1311": {
      "op": "DUP5"
    },
    "1312": {
      "op": "AND"
    },
    "1313": {
      "op": "DUP4"
    },
    "1314": {
      "op": "PUSH2",
      "value": "0x476"
    },
    "1317": {
      "jump": "i",
      "op": "JUMP"
    },
    "1318": {
      "op": "JUMPDEST"
    },
    "1319": {
      "op": "DUP1"
    },
    "1320": {
      "op": "DUP3"
    },
    "1321": {
      "op": "MUL"
    },
    "1322": {
      "op": "DUP2"
    },
    "1323": {
      "op": "ISZERO"
    },
    "1324": {
      "op": "DUP3"
    },
    "1325": {
      "op": "DUP3"
    },
    "1326": {
      "op": "DIV"
    },
    "1327": {
      "op": "DUP5"
    },
    "1328": {
      "op": "EQ"
    },
    "1329": {
      "op": "OR"
    },
    "1330": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1333": {
      "op": "JUMPI"
    },
    "1334": {
      "op": "PUSH2",
      "value": "0x414"
    },
    "1337": {
      "op": "PUSH2",
      "value": "0x3E5"
    },
    "1340": {
      "jump": "i",
      "op": "JUMP"
    },
    "1341": {
      "op": "JUMPDEST"
    },
    "1342": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1344": {
      "op": "DUP3"
    },
    "1345": {
      "op": "PUSH2",
      "value": "0x55A"
    },
    "1348": {
      "op": "JUMPI"
    },
    "1349": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1354": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1356": {
      "op": "SHL"
    },
    "1357": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1359": {
      "op": "MSTORE"
    },
    "1360": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "1362": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1364": {
      "op": "MSTORE"
    },
    "1365": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1367": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1369": {
      "op": "REVERT"
    },
    "1370": {
      "op": "JUMPDEST"
    },
    "1371": {
      "op": "POP"
    },
    "1372": {
      "op": "DIV"
    },
    "1373": {
      "op": "SWAP1"
    },
    "1374": {
      "jump": "o",
      "op": "JUMP"
    },
    "1375": {
      "op": "JUMPDEST"
    },
    "1376": {
      "op": "DUP1"
    },
    "1377": {
      "op": "MLOAD"
    },
    "1378": {
      "op": "PUSH10",
      "value": "0xFFFFFFFFFFFFFFFFFFFF"
    },
    "1389": {
      "op": "DUP2"
    },
    "1390": {
      "op": "AND"
    },
    "1391": {
      "op": "DUP2"
    },
    "1392": {
      "op": "EQ"
    },
    "1393": {
      "op": "PUSH2",
      "value": "0x579"
    },
    "1396": {
      "op": "JUMPI"
    },
    "1397": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1399": {
      "op": "DUP1"
    },
    "1400": {
      "op": "REVERT"
    },
    "1401": {
      "op": "JUMPDEST"
    },
    "1402": {
      "op": "SWAP2"
    },
    "1403": {
      "op": "SWAP1"
    },
    "1404": {
      "op": "POP"
    },
    "1405": {
      "jump": "o",
      "op": "JUMP"
    },
    "1406": {
      "op": "JUMPDEST"
    },
    "1407": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1409": {
      "op": "DUP1"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1412": {
      "op": "DUP1"
    },
    "1413": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1415": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1417": {
      "op": "DUP7"
    },
    "1418": {
      "op": "DUP9"
    },
    "1419": {
      "op": "SUB"
    },
    "1420": {
      "op": "SLT"
    },
    "1421": {
      "op": "ISZERO"
    },
    "1422": {
      "op": "PUSH2",
      "value": "0x596"
    },
    "1425": {
      "op": "JUMPI"
    },
    "1426": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1428": {
      "op": "DUP1"
    },
    "1429": {
      "op": "REVERT"
    },
    "1430": {
      "op": "JUMPDEST"
    },
    "1431": {
      "op": "PUSH2",
      "value": "0x59F"
    },
    "1434": {
      "op": "DUP7"
    },
    "1435": {
      "op": "PUSH2",
      "value": "0x55F"
    },
    "1438": {
      "jump": "i",
      "op": "JUMP"
    },
    "1439": {
      "op": "JUMPDEST"
    },
    "1440": {
      "op": "SWAP5"
    },
    "1441": {
      "op": "POP"
    },
    "1442": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1444": {
      "op": "DUP7"
    },
    "1445": {
      "op": "ADD"
    },
    "1446": {
      "op": "MLOAD"
    },
    "1447": {
      "op": "SWAP4"
    },
    "1448": {
      "op": "POP"
    },
    "1449": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1451": {
      "op": "DUP7"
    },
    "1452": {
      "op": "ADD"
    },
    "1453": {
      "op": "MLOAD"
    },
    "1454": {
      "op": "SWAP3"
    },
    "1455": {
      "op": "POP"
    },
    "1456": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1458": {
      "op": "DUP7"
    },
    "1459": {
      "op": "ADD"
    },
    "1460": {
      "op": "MLOAD"
    },
    "1461": {
      "op": "SWAP2"
    },
    "1462": {
      "op": "POP"
    },
    "1463": {
      "op": "PUSH2",
      "value": "0x5C2"
    },
    "1466": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1468": {
      "op": "DUP8"
    },
    "1469": {
      "op": "ADD"
    },
    "1470": {
      "op": "PUSH2",
      "value": "0x55F"
    },
    "1473": {
      "jump": "i",
      "op": "JUMP"
    },
    "1474": {
      "op": "JUMPDEST"
    },
    "1475": {
      "op": "SWAP1"
    },
    "1476": {
      "op": "POP"
    },
    "1477": {
      "op": "SWAP3"
    },
    "1478": {
      "op": "SWAP6"
    },
    "1479": {
      "op": "POP"
    },
    "1480": {
      "op": "SWAP3"
    },
    "1481": {
      "op": "SWAP6"
    },
    "1482": {
      "op": "SWAP1"
    },
    "1483": {
      "op": "SWAP4"
    },
    "1484": {
      "op": "POP"
    },
    "1485": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "f3146ac8be8c11032eb4ba560031f3f7f9fee856",
  "source": "// SPDX-License-Identifier: none\npragma solidity 0.8.19;\n\nimport \"../../interfaces/AggregatorV3Interface.sol\";\n\n/*\n    Contract takes 2 Chainlink feeds, and synthesises a composite price,\n    by calculating priceA * priceB, and scaling to 8 decimals places, as\n    the primary use is to scale / ETH to / USD\n    E.g. Given TRIBE / ETH and ETH / USD, return TRIBE / USD\n    \n    Note that only latestAnswer() is calculated, and this is primarily meant \n    to be used with the Aave Market Oracles\n*/\ncontract OracleConvert {\n    AggregatorV3Interface public immutable CL_TOKENA;\n    AggregatorV3Interface public immutable CL_TOKENB;\n \n \n\t/// @param clToken0 Underlying token0 ChainLink feed\n\t/// @param clToken1 Underlying token1 ChainLink feed\n\tconstructor (address clToken0, address clToken1 ){\n    require(clToken0 != address(0x0) && clToken1 != address(0x0), \"Invalid address\");\n\t\tCL_TOKENA = AggregatorV3Interface(clToken0);\n\t\tCL_TOKENB = AggregatorV3Interface(clToken1);\n    require(CL_TOKENA.decimals() + CL_TOKENB.decimals() >= 16, \"Decimals error\");\n\t}\n\n  /// @notice Get oracle decimals\n  function decimals() external pure returns (uint8) {\n    return 8;\n  }\n\n  /// @notice Get the price for the latest available round of a feed\n  /// @param priceFeed Price feed\n  /// @return Latest price\n  function getAnswer(AggregatorV3Interface priceFeed) internal view returns (int256) {\n    (\n      , \n      int price,\n      ,\n      uint timeStamp,\n    ) = priceFeed.latestRoundData();\n    require(timeStamp > 0, \"Round not complete\");\n    return price;\n  }\n\n  /// @notice Get the oracle price for the latest available round\n  /// @return Latest price\n  function latestAnswer() public view returns (int256) {\n    uint priceA = uint(getAnswer(CL_TOKENA));\n    uint priceB = uint(getAnswer(CL_TOKENB));\n    return int(priceA * priceB / (10 ** (CL_TOKENB.decimals() + CL_TOKENA.decimals() - 8))); \n  }\n  \n  /**\n   * @notice get data about the latest round. Consumers are encouraged to check\n   * that they're receiving fresh data by inspecting the updatedAt and\n   * answeredInRound return values.\n   * Note that different underlying implementations of AggregatorV3Interface\n   * have slightly different semantics for some of the return values. Consumers\n   * should determine what implementations they expect to receive\n   * data from and validate that they can properly handle return data from all\n   * of them.\n   * @return roundId is the round ID from the aggregator for which the data was\n   * retrieved combined with an phase to ensure that round IDs get larger as\n   * time moves forward.\n   * @return answer is the answer for the given round\n   * @return startedAt is the timestamp when the round was started.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\n   * answer was last computed)\n   * @return answeredInRound is the round ID of the round in which the answer\n   * was computed.\n   * (Only some AggregatorV3Interface implementations return meaningful values)\n   * @dev Note that answer and updatedAt may change between queries.\n   */\n  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) {\n    return (type(uint80).max, latestAnswer(), block.timestamp, block.timestamp, type(uint80).max);\n  }\n}\n",
  "sourceMap": "499:2907:7:-:0;;;745:315;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;808:24:7;;;;;;:52;;-1:-1:-1;;;;;;836:24:7;;;;808:52;800:80;;;;-1:-1:-1;;;800:80:7;;696:2:58;800:80:7;;;678:21:58;735:2;715:18;;;708:30;-1:-1:-1;;;754:18:58;;;747:45;809:18;;800:80:7;;;;;;;;;-1:-1:-1;;;;;884:43:7;;;;;931;;;;;;1011:20;;;-1:-1:-1;;;1011:20:7;;;;1035:2;;931:43;1011:18;;:20;;;;;;;;;;;;;;931:43;1011:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;988:9;;-1:-1:-1;;;;;988:18:7;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:43;;;;:::i;:::-;:49;;;;980:76;;;;-1:-1:-1;;;980:76:7;;1568:2:58;980:76:7;;;1550:21:58;1607:2;1587:18;;;1580:30;-1:-1:-1;;;1626:18:58;;;1619:44;1680:18;;980:76:7;1366:338:58;980:76:7;745:315;;499:2907;;14:177:58;93:13;;-1:-1:-1;;;;;135:31:58;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;838:273::-;906:6;959:2;947:9;938:7;934:23;930:32;927:52;;;975:1;972;965:12;927:52;1007:9;1001:16;1057:4;1050:5;1046:16;1039:5;1036:27;1026:55;;1077:1;1074;1067:12;1026:55;1100:5;838:273;-1:-1:-1;;;838:273:58:o;1116:245::-;1204:4;1183:12;;;1197;;;1179:31;;1222:13;;1219:136;;;1277:10;1272:3;1268:20;1265:1;1258:31;1312:4;1309:1;1302:15;1340:4;1337:1;1330:15;1219:136;1116:245;;;;:::o;1366:338::-;499:2907:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/helper/OracleConvert.sol",
  "type": "contract"
}