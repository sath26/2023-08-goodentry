{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "element",
          "type": "uint256"
        }
      ],
      "name": "findUpperBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "199": "contracts/openzeppelin-solidity/contracts/utils/Arrays.sol",
    "223": "contracts/openzeppelin-solidity/contracts/utils/math/Math.sol",
    "49": "contracts/openzeppelin-solidity/contracts/mocks/ArraysImpl.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-solidity/contracts/mocks/ArraysImpl.sol",
    "exportedSymbols": {
      "Arrays": [
        29887
      ],
      "ArraysImpl": [
        11192
      ],
      "Math": [
        32511
      ]
    },
    "id": 11193,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11159,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:49"
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/utils/Arrays.sol",
        "file": "../utils/Arrays.sol",
        "id": 11160,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 11193,
        "sourceUnit": 29888,
        "src": "58:29:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ArraysImpl",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 11192,
        "linearizedBaseContracts": [
          11192
        ],
        "name": "ArraysImpl",
        "nameLocation": "98:10:49",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 11164,
            "libraryName": {
              "id": 11161,
              "name": "Arrays",
              "nameLocations": [
                "121:6:49"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29887,
              "src": "121:6:49"
            },
            "nodeType": "UsingForDirective",
            "src": "115:27:49",
            "typeName": {
              "baseType": {
                "id": 11162,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "132:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 11163,
              "nodeType": "ArrayTypeName",
              "src": "132:9:49",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            }
          },
          {
            "constant": false,
            "id": 11167,
            "mutability": "mutable",
            "name": "_array",
            "nameLocation": "166:6:49",
            "nodeType": "VariableDeclaration",
            "scope": 11192,
            "src": "148:24:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
              "typeString": "uint256[]"
            },
            "typeName": {
              "baseType": {
                "id": 11165,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "148:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 11166,
              "nodeType": "ArrayTypeName",
              "src": "148:9:49",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 11177,
              "nodeType": "Block",
              "src": "215:31:49",
              "statements": [
                {
                  "expression": {
                    "id": 11175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 11173,
                      "name": "_array",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11167,
                      "src": "225:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 11174,
                      "name": "array",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11170,
                      "src": "234:5:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "src": "225:14:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "id": 11176,
                  "nodeType": "ExpressionStatement",
                  "src": "225:14:49"
                }
              ]
            },
            "id": 11178,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11171,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11170,
                  "mutability": "mutable",
                  "name": "array",
                  "nameLocation": "208:5:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 11178,
                  "src": "191:22:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 11168,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "191:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 11169,
                    "nodeType": "ArrayTypeName",
                    "src": "191:9:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "190:24:49"
            },
            "returnParameters": {
              "id": 11172,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "215:0:49"
            },
            "scope": 11192,
            "src": "179:67:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 11190,
              "nodeType": "Block",
              "src": "325:54:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 11187,
                        "name": "element",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11180,
                        "src": "364:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 11185,
                        "name": "_array",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11167,
                        "src": "342:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 11186,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "349:14:49",
                      "memberName": "findUpperBound",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29886,
                      "src": "342:21:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                        "typeString": "function (uint256[] storage pointer,uint256) view returns (uint256)"
                      }
                    },
                    "id": 11188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "342:30:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 11184,
                  "id": 11189,
                  "nodeType": "Return",
                  "src": "335:37:49"
                }
              ]
            },
            "functionSelector": "33e3a58a",
            "id": 11191,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "findUpperBound",
            "nameLocation": "261:14:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11181,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11180,
                  "mutability": "mutable",
                  "name": "element",
                  "nameLocation": "284:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 11191,
                  "src": "276:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11179,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "276:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "275:17:49"
            },
            "returnParameters": {
              "id": 11184,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11183,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11191,
                  "src": "316:7:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11182,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "316:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "315:9:49"
            },
            "scope": 11192,
            "src": "252:127:49",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 11193,
        "src": "89:292:49",
        "usedErrors": [],
        "usedEvents": []
      }
    ],
    "src": "33:349:49"
  },
  "bytecode": "608060405234801561001057600080fd5b5060405161039c38038061039c83398101604081905261002f916100bf565b8051610042906000906020840190610049565b505061017c565b828054828255906000526020600020908101928215610084579160200282015b82811115610084578251825591602001919060010190610069565b50610090929150610094565b5090565b5b808211156100905760008155600101610095565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156100d257600080fd5b82516001600160401b03808211156100e957600080fd5b818501915085601f8301126100fd57600080fd5b81518181111561010f5761010f6100a9565b8060051b604051601f19603f83011681018181108582111715610134576101346100a9565b60405291825284820192508381018501918883111561015257600080fd5b938501935b8285101561017057845184529385019392850192610157565b98975050505050505050565b6102118061018b6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806333e3a58a14610030575b600080fd5b61004361003e36600461014e565b610055565b60405190815260200160405180910390f35b60006100618183610067565b92915050565b8154600090810361007a57506000610061565b82546000905b808210156100d6576000610094838361012c565b9050848682815481106100a9576100a9610167565b906000526020600020015411156100c2578091506100d0565b6100cd816001610193565b92505b50610080565b60008211801561010b575083856100ee6001856101a6565b815481106100fe576100fe610167565b9060005260206000200154145b156101245761011b6001836101a6565b92505050610061565b509392505050565b600061013b60028484186101b9565b61014790848416610193565b9392505050565b60006020828403121561016057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156100615761006161017d565b818103818111156100615761006161017d565b6000826101d657634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122036ad3579edaf6a8b2dad3742b5fe2d2fb41a9a81a8edb350021b4401a1b096f564736f6c63430008150033",
  "bytecodeSha1": "9f7d9f384852fed270e09f3663ebb8e218fc1dd3",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.21+commit.d9974bed"
  },
  "contractName": "ArraysImpl",
  "coverageMap": {
    "branches": {
      "199": {
        "Arrays.findUpperBound": {
          "7": [
            746,
            763,
            false
          ],
          "8": [
            1158,
            1178,
            false
          ],
          "9": [
            1402,
            1409,
            false
          ],
          "10": [
            1413,
            1438,
            false
          ]
        }
      },
      "223": {},
      "49": {}
    },
    "statements": {
      "199": {
        "Arrays.findUpperBound": {
          "1": [
            779,
            787
          ],
          "2": [
            1198,
            1208
          ],
          "3": [
            1247,
            1260
          ],
          "4": [
            1454,
            1468
          ],
          "5": [
            1499,
            1509
          ]
        }
      },
      "223": {
        "Math.average": {
          "6": [
            781,
            809
          ]
        }
      },
      "49": {
        "ArraysImpl.findUpperBound": {
          "0": [
            335,
            372
          ]
        }
      }
    }
  },
  "dependencies": [
    "Arrays",
    "Math"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c806333e3a58a14610030575b600080fd5b61004361003e36600461014e565b610055565b60405190815260200160405180910390f35b60006100618183610067565b92915050565b8154600090810361007a57506000610061565b82546000905b808210156100d6576000610094838361012c565b9050848682815481106100a9576100a9610167565b906000526020600020015411156100c2578091506100d0565b6100cd816001610193565b92505b50610080565b60008211801561010b575083856100ee6001856101a6565b815481106100fe576100fe610167565b9060005260206000200154145b156101245761011b6001836101a6565b92505050610061565b509392505050565b600061013b60028484186101b9565b61014790848416610193565b9392505050565b60006020828403121561016057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156100615761006161017d565b818103818111156100615761006161017d565b6000826101d657634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122036ad3579edaf6a8b2dad3742b5fe2d2fb41a9a81a8edb350021b4401a1b096f564736f6c63430008150033",
  "deployedSourceMap": "89:292:49:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;252:127;;;;;;:::i;:::-;;:::i;:::-;;;345:25:249;;;333:2;318:18;252:127:49;;;;;;;;316:7;342:30;316:7;364;342:21;:30::i;:::-;335:37;252:127;-1:-1:-1;;252:127:49:o;634:892:199:-;746:12;;723:7;;746:17;;742:56;;-1:-1:-1;786:1:199;779:8;;742:56;848:12;;808:11;;871:414;884:4;878:3;:10;871:414;;;904:11;918:23;931:3;936:4;918:12;:23::i;:::-;904:37;;1171:7;1158:5;1164:3;1158:10;;;;;;;;:::i;:::-;;;;;;;;;:20;1154:121;;;1205:3;1198:10;;1154:121;;;1253:7;:3;1259:1;1253:7;:::i;:::-;1247:13;;1154:121;890:395;871:414;;;1408:1;1402:3;:7;:36;;;;-1:-1:-1;1431:7:199;1413:5;1419:7;1425:1;1419:3;:7;:::i;:::-;1413:14;;;;;;;;:::i;:::-;;;;;;;;;:25;1402:36;1398:122;;;1461:7;1467:1;1461:3;:7;:::i;:::-;1454:14;;;;;;1398:122;-1:-1:-1;1506:3:199;634:892;-1:-1:-1;;;634:892:199:o;663:153:223:-;725:7;798:11;808:1;799:5;;;798:11;:::i;:::-;788:21;;789:5;;;788:21;:::i;:::-;781:28;663:153;-1:-1:-1;;;663:153:223:o;14:180:249:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:249;;14:180;-1:-1:-1;14:180:249:o;381:127::-;442:10;437:3;433:20;430:1;423:31;473:4;470:1;463:15;497:4;494:1;487:15;513:127;574:10;569:3;565:20;562:1;555:31;605:4;602:1;595:15;629:4;626:1;619:15;645:125;710:9;;;731:10;;;728:36;;;744:18;;:::i;775:128::-;842:9;;;863:11;;;860:37;;;877:18;;:::i;908:217::-;948:1;974;964:132;;1018:10;1013:3;1009:20;1006:1;999:31;1053:4;1050:1;1043:15;1081:4;1078:1;1071:15;964:132;-1:-1:-1;1110:9:249;;908:217::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    89,
    381
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x33E3A58A EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x14E JUMP JUMPDEST PUSH2 0x55 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x61 DUP2 DUP4 PUSH2 0x67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 SUB PUSH2 0x7A JUMPI POP PUSH1 0x0 PUSH2 0x61 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 PUSH2 0x94 DUP4 DUP4 PUSH2 0x12C JUMP JUMPDEST SWAP1 POP DUP5 DUP7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xA9 JUMPI PUSH2 0xA9 PUSH2 0x167 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD GT ISZERO PUSH2 0xC2 JUMPI DUP1 SWAP2 POP PUSH2 0xD0 JUMP JUMPDEST PUSH2 0xCD DUP2 PUSH1 0x1 PUSH2 0x193 JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH2 0x80 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x10B JUMPI POP DUP4 DUP6 PUSH2 0xEE PUSH1 0x1 DUP6 PUSH2 0x1A6 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xFE JUMPI PUSH2 0xFE PUSH2 0x167 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x124 JUMPI PUSH2 0x11B PUSH1 0x1 DUP4 PUSH2 0x1A6 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x61 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x1B9 JUMP JUMPDEST PUSH2 0x147 SWAP1 DUP5 DUP5 AND PUSH2 0x193 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x61 JUMPI PUSH2 0x61 PUSH2 0x17D JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x61 JUMPI PUSH2 0x61 PUSH2 0x17D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xAD CALLDATALOAD PUSH26 0xEDAF6A8B2DAD3742B5FE2D2FB41A9A81A8EDB350021B4401A1B0 SWAP7 CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "5": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "CALLVALUE",
      "path": "49"
    },
    "6": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "DUP1",
      "path": "49"
    },
    "7": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "8": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "12": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "DUP1",
      "path": "49"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "REVERT",
      "path": "49"
    },
    "16": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "17": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "POP",
      "path": "49"
    },
    "18": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "21": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "LT",
      "path": "49"
    },
    "22": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x2B"
    },
    "25": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "26": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "CALLDATALOAD",
      "path": "49"
    },
    "29": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "SHR",
      "path": "49"
    },
    "32": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "DUP1",
      "path": "49"
    },
    "33": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x33E3A58A"
    },
    "38": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "EQ",
      "path": "49"
    },
    "39": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x30"
    },
    "42": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "43": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "44": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "46": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "DUP1",
      "path": "49"
    },
    "47": {
      "first_revert": true,
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "REVERT",
      "path": "49"
    },
    "48": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "49": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x43"
    },
    "52": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x3E"
    },
    "55": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "56": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "58": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x14E"
    },
    "61": {
      "fn": "ArraysImpl.findUpperBound",
      "jump": "i",
      "offset": [
        252,
        379
      ],
      "op": "JUMP",
      "path": "49"
    },
    "62": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "63": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x55"
    },
    "66": {
      "fn": "ArraysImpl.findUpperBound",
      "jump": "i",
      "offset": [
        252,
        379
      ],
      "op": "JUMP",
      "path": "49"
    },
    "67": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "68": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "70": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "71": {
      "op": "SWAP1"
    },
    "72": {
      "op": "DUP2"
    },
    "73": {
      "op": "MSTORE"
    },
    "74": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "76": {
      "op": "ADD"
    },
    "77": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "79": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "80": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "DUP1",
      "path": "49"
    },
    "81": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "82": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "SUB",
      "path": "49"
    },
    "83": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "84": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "RETURN",
      "path": "49"
    },
    "85": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "86": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        316,
        323
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "88": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        342,
        372
      ],
      "op": "PUSH2",
      "path": "49",
      "statement": 0,
      "value": "0x61"
    },
    "91": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        316,
        323
      ],
      "op": "DUP2",
      "path": "49"
    },
    "92": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        364,
        371
      ],
      "op": "DUP4",
      "path": "49"
    },
    "93": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        342,
        363
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x67"
    },
    "96": {
      "fn": "ArraysImpl.findUpperBound",
      "jump": "i",
      "offset": [
        342,
        372
      ],
      "op": "JUMP",
      "path": "49"
    },
    "97": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        342,
        372
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "98": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        335,
        372
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "99": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "100": {
      "op": "POP"
    },
    "101": {
      "op": "POP"
    },
    "102": {
      "fn": "ArraysImpl.findUpperBound",
      "jump": "o",
      "offset": [
        252,
        379
      ],
      "op": "JUMP",
      "path": "49"
    },
    "103": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        634,
        1526
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "104": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        746,
        758
      ],
      "op": "DUP2",
      "path": "199"
    },
    "105": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        746,
        758
      ],
      "op": "SLOAD",
      "path": "199"
    },
    "106": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        723,
        730
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x0"
    },
    "108": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        723,
        730
      ],
      "op": "SWAP1",
      "path": "199"
    },
    "109": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        746,
        763
      ],
      "op": "DUP2",
      "path": "199"
    },
    "110": {
      "branch": 7,
      "fn": "Arrays.findUpperBound",
      "offset": [
        746,
        763
      ],
      "op": "SUB",
      "path": "199"
    },
    "111": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        742,
        798
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x7A"
    },
    "114": {
      "branch": 7,
      "fn": "Arrays.findUpperBound",
      "offset": [
        742,
        798
      ],
      "op": "JUMPI",
      "path": "199"
    },
    "115": {
      "op": "POP"
    },
    "116": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        786,
        787
      ],
      "op": "PUSH1",
      "path": "199",
      "statement": 1,
      "value": "0x0"
    },
    "118": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        779,
        787
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x61"
    },
    "121": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        779,
        787
      ],
      "op": "JUMP",
      "path": "199"
    },
    "122": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        742,
        798
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "123": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        848,
        860
      ],
      "op": "DUP3",
      "path": "199"
    },
    "124": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        848,
        860
      ],
      "op": "SLOAD",
      "path": "199"
    },
    "125": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        808,
        819
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x0"
    },
    "127": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        808,
        819
      ],
      "op": "SWAP1",
      "path": "199"
    },
    "128": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "129": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        884,
        888
      ],
      "op": "DUP1",
      "path": "199"
    },
    "130": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        878,
        881
      ],
      "op": "DUP3",
      "path": "199"
    },
    "131": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        878,
        888
      ],
      "op": "LT",
      "path": "199"
    },
    "132": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "ISZERO",
      "path": "199"
    },
    "133": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0xD6"
    },
    "136": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "JUMPI",
      "path": "199"
    },
    "137": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        904,
        915
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x0"
    },
    "139": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        918,
        941
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x94"
    },
    "142": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        931,
        934
      ],
      "op": "DUP4",
      "path": "199"
    },
    "143": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        936,
        940
      ],
      "op": "DUP4",
      "path": "199"
    },
    "144": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        918,
        930
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x12C"
    },
    "147": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        918,
        941
      ],
      "op": "JUMP",
      "path": "199"
    },
    "148": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        918,
        941
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "149": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        904,
        941
      ],
      "op": "SWAP1",
      "path": "199"
    },
    "150": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        904,
        941
      ],
      "op": "POP",
      "path": "199"
    },
    "151": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1171,
        1178
      ],
      "op": "DUP5",
      "path": "199"
    },
    "152": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1163
      ],
      "op": "DUP7",
      "path": "199"
    },
    "153": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1164,
        1167
      ],
      "op": "DUP3",
      "path": "199"
    },
    "154": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "DUP2",
      "path": "199"
    },
    "155": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "SLOAD",
      "path": "199"
    },
    "156": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "DUP2",
      "path": "199"
    },
    "157": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "LT",
      "path": "199"
    },
    "158": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0xA9"
    },
    "161": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "JUMPI",
      "path": "199"
    },
    "162": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0xA9"
    },
    "165": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x167"
    },
    "168": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1158,
        1168
      ],
      "op": "JUMP",
      "path": "199"
    },
    "169": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "170": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "SWAP1",
      "path": "199"
    },
    "171": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x0"
    },
    "173": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "MSTORE",
      "path": "199"
    },
    "174": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x20"
    },
    "176": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x0"
    },
    "178": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "KECCAK256",
      "path": "199"
    },
    "179": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "ADD",
      "path": "199"
    },
    "180": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "SLOAD",
      "path": "199"
    },
    "181": {
      "branch": 8,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1178
      ],
      "op": "GT",
      "path": "199"
    },
    "182": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "ISZERO",
      "path": "199"
    },
    "183": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0xC2"
    },
    "186": {
      "branch": 8,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "JUMPI",
      "path": "199"
    },
    "187": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1205,
        1208
      ],
      "op": "DUP1",
      "path": "199",
      "statement": 2
    },
    "188": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1198,
        1208
      ],
      "op": "SWAP2",
      "path": "199"
    },
    "189": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1198,
        1208
      ],
      "op": "POP",
      "path": "199"
    },
    "190": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0xD0"
    },
    "193": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "JUMP",
      "path": "199"
    },
    "194": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "195": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1253,
        1260
      ],
      "op": "PUSH2",
      "path": "199",
      "statement": 3,
      "value": "0xCD"
    },
    "198": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1253,
        1256
      ],
      "op": "DUP2",
      "path": "199"
    },
    "199": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1259,
        1260
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x1"
    },
    "201": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1253,
        1260
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x193"
    },
    "204": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1253,
        1260
      ],
      "op": "JUMP",
      "path": "199"
    },
    "205": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1253,
        1260
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "206": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1247,
        1260
      ],
      "op": "SWAP3",
      "path": "199"
    },
    "207": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1247,
        1260
      ],
      "op": "POP",
      "path": "199"
    },
    "208": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "209": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        890,
        1285
      ],
      "op": "POP",
      "path": "199"
    },
    "210": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x80"
    },
    "213": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "JUMP",
      "path": "199"
    },
    "214": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "215": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1408,
        1409
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x0"
    },
    "217": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1405
      ],
      "op": "DUP3",
      "path": "199"
    },
    "218": {
      "branch": 9,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1409
      ],
      "op": "GT",
      "path": "199"
    },
    "219": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "DUP1",
      "path": "199"
    },
    "220": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "ISZERO",
      "path": "199"
    },
    "221": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x10B"
    },
    "224": {
      "branch": 9,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "JUMPI",
      "path": "199"
    },
    "225": {
      "op": "POP"
    },
    "226": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1431,
        1438
      ],
      "op": "DUP4",
      "path": "199"
    },
    "227": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1418
      ],
      "op": "DUP6",
      "path": "199"
    },
    "228": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1419,
        1426
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0xEE"
    },
    "231": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1425,
        1426
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x1"
    },
    "233": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1419,
        1422
      ],
      "op": "DUP6",
      "path": "199"
    },
    "234": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1419,
        1426
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x1A6"
    },
    "237": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1419,
        1426
      ],
      "op": "JUMP",
      "path": "199"
    },
    "238": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1419,
        1426
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "239": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "DUP2",
      "path": "199"
    },
    "240": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "SLOAD",
      "path": "199"
    },
    "241": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "DUP2",
      "path": "199"
    },
    "242": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "LT",
      "path": "199"
    },
    "243": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0xFE"
    },
    "246": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "JUMPI",
      "path": "199"
    },
    "247": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0xFE"
    },
    "250": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x167"
    },
    "253": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1413,
        1427
      ],
      "op": "JUMP",
      "path": "199"
    },
    "254": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "255": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "SWAP1",
      "path": "199"
    },
    "256": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x0"
    },
    "258": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "MSTORE",
      "path": "199"
    },
    "259": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x20"
    },
    "261": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x0"
    },
    "263": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "KECCAK256",
      "path": "199"
    },
    "264": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "ADD",
      "path": "199"
    },
    "265": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "SLOAD",
      "path": "199"
    },
    "266": {
      "branch": 10,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1438
      ],
      "op": "EQ",
      "path": "199"
    },
    "267": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "268": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1398,
        1520
      ],
      "op": "ISZERO",
      "path": "199"
    },
    "269": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1398,
        1520
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x124"
    },
    "272": {
      "branch": 10,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1398,
        1520
      ],
      "op": "JUMPI",
      "path": "199"
    },
    "273": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1461,
        1468
      ],
      "op": "PUSH2",
      "path": "199",
      "statement": 4,
      "value": "0x11B"
    },
    "276": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1467,
        1468
      ],
      "op": "PUSH1",
      "path": "199",
      "value": "0x1"
    },
    "278": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1461,
        1464
      ],
      "op": "DUP4",
      "path": "199"
    },
    "279": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1461,
        1468
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x1A6"
    },
    "282": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1461,
        1468
      ],
      "op": "JUMP",
      "path": "199"
    },
    "283": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1461,
        1468
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "284": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "SWAP3",
      "path": "199"
    },
    "285": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "POP",
      "path": "199"
    },
    "286": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "POP",
      "path": "199"
    },
    "287": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "POP",
      "path": "199"
    },
    "288": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "PUSH2",
      "path": "199",
      "value": "0x61"
    },
    "291": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "JUMP",
      "path": "199"
    },
    "292": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1398,
        1520
      ],
      "op": "JUMPDEST",
      "path": "199"
    },
    "293": {
      "op": "POP"
    },
    "294": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1506,
        1509
      ],
      "op": "SWAP4",
      "path": "199",
      "statement": 5
    },
    "295": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        634,
        1526
      ],
      "op": "SWAP3",
      "path": "199"
    },
    "296": {
      "op": "POP"
    },
    "297": {
      "op": "POP"
    },
    "298": {
      "op": "POP"
    },
    "299": {
      "fn": "Arrays.findUpperBound",
      "jump": "o",
      "offset": [
        634,
        1526
      ],
      "op": "JUMP",
      "path": "199"
    },
    "300": {
      "fn": "Math.average",
      "offset": [
        663,
        816
      ],
      "op": "JUMPDEST",
      "path": "223"
    },
    "301": {
      "fn": "Math.average",
      "offset": [
        725,
        732
      ],
      "op": "PUSH1",
      "path": "223",
      "value": "0x0"
    },
    "303": {
      "fn": "Math.average",
      "offset": [
        798,
        809
      ],
      "op": "PUSH2",
      "path": "223",
      "statement": 6,
      "value": "0x13B"
    },
    "306": {
      "fn": "Math.average",
      "offset": [
        808,
        809
      ],
      "op": "PUSH1",
      "path": "223",
      "value": "0x2"
    },
    "308": {
      "fn": "Math.average",
      "offset": [
        799,
        804
      ],
      "op": "DUP5",
      "path": "223"
    },
    "309": {
      "fn": "Math.average",
      "offset": [
        799,
        804
      ],
      "op": "DUP5",
      "path": "223"
    },
    "310": {
      "fn": "Math.average",
      "offset": [
        799,
        804
      ],
      "op": "XOR",
      "path": "223"
    },
    "311": {
      "fn": "Math.average",
      "offset": [
        798,
        809
      ],
      "op": "PUSH2",
      "path": "223",
      "value": "0x1B9"
    },
    "314": {
      "fn": "Math.average",
      "jump": "i",
      "offset": [
        798,
        809
      ],
      "op": "JUMP",
      "path": "223"
    },
    "315": {
      "fn": "Math.average",
      "offset": [
        798,
        809
      ],
      "op": "JUMPDEST",
      "path": "223"
    },
    "316": {
      "fn": "Math.average",
      "offset": [
        788,
        809
      ],
      "op": "PUSH2",
      "path": "223",
      "value": "0x147"
    },
    "319": {
      "fn": "Math.average",
      "offset": [
        788,
        809
      ],
      "op": "SWAP1",
      "path": "223"
    },
    "320": {
      "fn": "Math.average",
      "offset": [
        789,
        794
      ],
      "op": "DUP5",
      "path": "223"
    },
    "321": {
      "fn": "Math.average",
      "offset": [
        789,
        794
      ],
      "op": "DUP5",
      "path": "223"
    },
    "322": {
      "fn": "Math.average",
      "offset": [
        789,
        794
      ],
      "op": "AND",
      "path": "223"
    },
    "323": {
      "fn": "Math.average",
      "offset": [
        788,
        809
      ],
      "op": "PUSH2",
      "path": "223",
      "value": "0x193"
    },
    "326": {
      "fn": "Math.average",
      "jump": "i",
      "offset": [
        788,
        809
      ],
      "op": "JUMP",
      "path": "223"
    },
    "327": {
      "fn": "Math.average",
      "offset": [
        788,
        809
      ],
      "op": "JUMPDEST",
      "path": "223"
    },
    "328": {
      "fn": "Math.average",
      "offset": [
        781,
        809
      ],
      "op": "SWAP4",
      "path": "223"
    },
    "329": {
      "fn": "Math.average",
      "offset": [
        663,
        816
      ],
      "op": "SWAP3",
      "path": "223"
    },
    "330": {
      "op": "POP"
    },
    "331": {
      "op": "POP"
    },
    "332": {
      "op": "POP"
    },
    "333": {
      "fn": "Math.average",
      "jump": "o",
      "offset": [
        663,
        816
      ],
      "op": "JUMP",
      "path": "223"
    },
    "334": {
      "op": "JUMPDEST"
    },
    "335": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "337": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "339": {
      "op": "DUP3"
    },
    "340": {
      "op": "DUP5"
    },
    "341": {
      "op": "SUB"
    },
    "342": {
      "op": "SLT"
    },
    "343": {
      "op": "ISZERO"
    },
    "344": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "347": {
      "op": "JUMPI"
    },
    "348": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "350": {
      "op": "DUP1"
    },
    "351": {
      "op": "REVERT"
    },
    "352": {
      "op": "JUMPDEST"
    },
    "353": {
      "op": "POP"
    },
    "354": {
      "op": "CALLDATALOAD"
    },
    "355": {
      "op": "SWAP2"
    },
    "356": {
      "op": "SWAP1"
    },
    "357": {
      "op": "POP"
    },
    "358": {
      "jump": "o",
      "op": "JUMP"
    },
    "359": {
      "op": "JUMPDEST"
    },
    "360": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "365": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "367": {
      "op": "SHL"
    },
    "368": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "370": {
      "op": "MSTORE"
    },
    "371": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "373": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "375": {
      "op": "MSTORE"
    },
    "376": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "378": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "380": {
      "op": "REVERT"
    },
    "381": {
      "op": "JUMPDEST"
    },
    "382": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "387": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "389": {
      "op": "SHL"
    },
    "390": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "392": {
      "op": "MSTORE"
    },
    "393": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "395": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "397": {
      "op": "MSTORE"
    },
    "398": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "400": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "402": {
      "op": "REVERT"
    },
    "403": {
      "op": "JUMPDEST"
    },
    "404": {
      "op": "DUP1"
    },
    "405": {
      "op": "DUP3"
    },
    "406": {
      "op": "ADD"
    },
    "407": {
      "op": "DUP1"
    },
    "408": {
      "op": "DUP3"
    },
    "409": {
      "op": "GT"
    },
    "410": {
      "op": "ISZERO"
    },
    "411": {
      "op": "PUSH2",
      "value": "0x61"
    },
    "414": {
      "op": "JUMPI"
    },
    "415": {
      "op": "PUSH2",
      "value": "0x61"
    },
    "418": {
      "op": "PUSH2",
      "value": "0x17D"
    },
    "421": {
      "jump": "i",
      "op": "JUMP"
    },
    "422": {
      "op": "JUMPDEST"
    },
    "423": {
      "op": "DUP2"
    },
    "424": {
      "op": "DUP2"
    },
    "425": {
      "op": "SUB"
    },
    "426": {
      "op": "DUP2"
    },
    "427": {
      "op": "DUP2"
    },
    "428": {
      "op": "GT"
    },
    "429": {
      "op": "ISZERO"
    },
    "430": {
      "op": "PUSH2",
      "value": "0x61"
    },
    "433": {
      "op": "JUMPI"
    },
    "434": {
      "op": "PUSH2",
      "value": "0x61"
    },
    "437": {
      "op": "PUSH2",
      "value": "0x17D"
    },
    "440": {
      "jump": "i",
      "op": "JUMP"
    },
    "441": {
      "op": "JUMPDEST"
    },
    "442": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "444": {
      "op": "DUP3"
    },
    "445": {
      "op": "PUSH2",
      "value": "0x1D6"
    },
    "448": {
      "op": "JUMPI"
    },
    "449": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "454": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "456": {
      "op": "SHL"
    },
    "457": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "459": {
      "op": "MSTORE"
    },
    "460": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "462": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "464": {
      "op": "MSTORE"
    },
    "465": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "467": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "469": {
      "op": "REVERT"
    },
    "470": {
      "op": "JUMPDEST"
    },
    "471": {
      "op": "POP"
    },
    "472": {
      "op": "DIV"
    },
    "473": {
      "op": "SWAP1"
    },
    "474": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "ef1acbc3e33350c426845f9e7da242d767c4242b",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Arrays.sol\";\n\ncontract ArraysImpl {\n    using Arrays for uint256[];\n\n    uint256[] private _array;\n\n    constructor(uint256[] memory array) {\n        _array = array;\n    }\n\n    function findUpperBound(uint256 element) external view returns (uint256) {\n        return _array.findUpperBound(element);\n    }\n}\n",
  "sourceMap": "89:292:49:-:0;;;179:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;225:14;;;;:6;;:14;;;;;:::i;:::-;;179:67;89:292;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;89:292:49;;;-1:-1:-1;89:292:49;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:249;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1105;241:6;272:2;315;303:9;294:7;290:23;286:32;283:52;;;331:1;328;321:12;283:52;358:16;;-1:-1:-1;;;;;423:14:249;;;420:34;;;450:1;447;440:12;420:34;488:6;477:9;473:22;463:32;;533:7;526:4;522:2;518:13;514:27;504:55;;555:1;552;545:12;504:55;584:2;578:9;606:2;602;599:10;596:36;;;612:18;;:::i;:::-;658:2;655:1;651:10;690:2;684:9;753:2;749:7;744:2;740;736:11;732:25;724:6;720:38;808:6;796:10;793:22;788:2;776:10;773:18;770:46;767:72;;;819:18;;:::i;:::-;855:2;848:22;905:18;;;939:15;;;;-1:-1:-1;981:11:249;;;977:20;;;1009:19;;;1006:39;;;1041:1;1038;1031:12;1006:39;1065:11;;;;1085:135;1101:6;1096:3;1093:15;1085:135;;;1167:10;;1155:23;;1118:12;;;;1198;;;;1085:135;;;1239:6;146:1105;-1:-1:-1;;;;;;;;146:1105:249:o;:::-;89:292:49;;;;;;",
  "sourcePath": "contracts/openzeppelin-solidity/contracts/mocks/ArraysImpl.sol",
  "type": "contract"
}