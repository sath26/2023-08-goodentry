{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "NewInstance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        }
      ],
      "name": "clone",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initdata",
          "type": "bytes"
        }
      ],
      "name": "cloneDeterministic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "predictDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "predicted",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "138": "contracts/openzeppelin-solidity/contracts/proxy/Clones.sol",
    "198": "contracts/openzeppelin-solidity/contracts/utils/Address.sol",
    "56": "contracts/openzeppelin-solidity/contracts/mocks/ClonesMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-solidity/contracts/mocks/ClonesMock.sol",
    "exportedSymbols": {
      "Address": [
        29802
      ],
      "Clones": [
        20135
      ],
      "ClonesMock": [
        11539
      ]
    },
    "id": 11540,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11452,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:56"
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/proxy/Clones.sol",
        "file": "../proxy/Clones.sol",
        "id": 11453,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 11540,
        "sourceUnit": 20136,
        "src": "58:29:56",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/utils/Address.sol",
        "file": "../utils/Address.sol",
        "id": 11454,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 11540,
        "sourceUnit": 29803,
        "src": "88:30:56",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ClonesMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 11539,
        "linearizedBaseContracts": [
          11539
        ],
        "name": "ClonesMock",
        "nameLocation": "129:10:56",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 11457,
            "libraryName": {
              "id": 11455,
              "name": "Address",
              "nameLocations": [
                "152:7:56"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29802,
              "src": "152:7:56"
            },
            "nodeType": "UsingForDirective",
            "src": "146:26:56",
            "typeName": {
              "id": 11456,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "164:7:56",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          },
          {
            "global": false,
            "id": 11460,
            "libraryName": {
              "id": 11458,
              "name": "Clones",
              "nameLocations": [
                "183:6:56"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20135,
              "src": "183:6:56"
            },
            "nodeType": "UsingForDirective",
            "src": "177:25:56",
            "typeName": {
              "id": 11459,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "194:7:56",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          },
          {
            "anonymous": false,
            "eventSelector": "39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea5",
            "id": 11464,
            "name": "NewInstance",
            "nameLocation": "214:11:56",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 11463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11462,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "instance",
                  "nameLocation": "234:8:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11464,
                  "src": "226:16:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11461,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "226:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "225:18:56"
            },
            "src": "208:36:56"
          },
          {
            "body": {
              "id": 11478,
              "nodeType": "Block",
              "src": "329:63:56",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 11472,
                            "name": "implementation",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11466,
                            "src": "352:14:56",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 11473,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "367:5:56",
                          "memberName": "clone",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 20078,
                          "src": "352:20:56",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_address_$attached_to$_t_address_$",
                            "typeString": "function (address) returns (address)"
                          }
                        },
                        "id": 11474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "352:22:56",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 11475,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11468,
                        "src": "376:8:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 11471,
                      "name": "_initAndEmit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11538,
                      "src": "339:12:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory)"
                      }
                    },
                    "id": 11476,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "339:46:56",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11477,
                  "nodeType": "ExpressionStatement",
                  "src": "339:46:56"
                }
              ]
            },
            "functionSelector": "0fbe133c",
            "id": 11479,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "clone",
            "nameLocation": "259:5:56",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11466,
                  "mutability": "mutable",
                  "name": "implementation",
                  "nameLocation": "273:14:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11479,
                  "src": "265:22:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11465,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "265:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11468,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nameLocation": "304:8:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11479,
                  "src": "289:23:56",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11467,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "289:5:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "264:49:56"
            },
            "returnParameters": {
              "id": 11470,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "329:0:56"
            },
            "scope": 11539,
            "src": "250:142:56",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 11496,
              "nodeType": "Block",
              "src": "534:80:56",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 11491,
                            "name": "salt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11483,
                            "src": "591:4:56",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 11489,
                            "name": "implementation",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11481,
                            "src": "557:14:56",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 11490,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "572:18:56",
                          "memberName": "cloneDeterministic",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 20100,
                          "src": "557:33:56",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes32_$returns$_t_address_$attached_to$_t_address_$",
                            "typeString": "function (address,bytes32) returns (address)"
                          }
                        },
                        "id": 11492,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "557:39:56",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 11493,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11485,
                        "src": "598:8:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 11488,
                      "name": "_initAndEmit",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11538,
                      "src": "544:12:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory)"
                      }
                    },
                    "id": 11494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "544:63:56",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11495,
                  "nodeType": "ExpressionStatement",
                  "src": "544:63:56"
                }
              ]
            },
            "functionSelector": "6e9ebc81",
            "id": 11497,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cloneDeterministic",
            "nameLocation": "407:18:56",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11486,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11481,
                  "mutability": "mutable",
                  "name": "implementation",
                  "nameLocation": "443:14:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11497,
                  "src": "435:22:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11480,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "435:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11483,
                  "mutability": "mutable",
                  "name": "salt",
                  "nameLocation": "475:4:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11497,
                  "src": "467:12:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 11482,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "467:7:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11485,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nameLocation": "504:8:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11497,
                  "src": "489:23:56",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11484,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "489:5:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "425:93:56"
            },
            "returnParameters": {
              "id": 11487,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "534:0:56"
            },
            "scope": 11539,
            "src": "398:216:56",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 11511,
              "nodeType": "Block",
              "src": "735:72:56",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 11508,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11501,
                        "src": "795:4:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 11506,
                        "name": "implementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11499,
                        "src": "752:14:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 11507,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "767:27:56",
                      "memberName": "predictDeterministicAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 20134,
                      "src": "752:42:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes32_$returns$_t_address_$attached_to$_t_address_$",
                        "typeString": "function (address,bytes32) view returns (address)"
                      }
                    },
                    "id": 11509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "752:48:56",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 11505,
                  "id": 11510,
                  "nodeType": "Return",
                  "src": "745:55:56"
                }
              ]
            },
            "functionSelector": "360d0fad",
            "id": 11512,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "predictDeterministicAddress",
            "nameLocation": "629:27:56",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11499,
                  "mutability": "mutable",
                  "name": "implementation",
                  "nameLocation": "665:14:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11512,
                  "src": "657:22:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11498,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "657:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11501,
                  "mutability": "mutable",
                  "name": "salt",
                  "nameLocation": "689:4:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11512,
                  "src": "681:12:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 11500,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "681:7:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "656:38:56"
            },
            "returnParameters": {
              "id": 11505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11504,
                  "mutability": "mutable",
                  "name": "predicted",
                  "nameLocation": "724:9:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11512,
                  "src": "716:17:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11503,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "716:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "715:19:56"
            },
            "scope": 11539,
            "src": "620:187:56",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 11537,
              "nodeType": "Block",
              "src": "884:153:56",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 11522,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 11519,
                        "name": "initdata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11516,
                        "src": "898:8:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 11520,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "907:6:56",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "898:15:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 11521,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "916:1:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "898:19:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 11532,
                  "nodeType": "IfStatement",
                  "src": "894:101:56",
                  "trueBody": {
                    "id": 11531,
                    "nodeType": "Block",
                    "src": "919:76:56",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 11526,
                              "name": "initdata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11516,
                              "src": "964:8:56",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "expression": {
                                "id": 11527,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "974:3:56",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 11528,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "978:5:56",
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "src": "974:9:56",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 11523,
                              "name": "instance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11514,
                              "src": "933:8:56",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 11525,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "942:21:56",
                            "memberName": "functionCallWithValue",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 29616,
                            "src": "933:30:56",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
                              "typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
                            }
                          },
                          "id": 11529,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "933:51:56",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 11530,
                        "nodeType": "ExpressionStatement",
                        "src": "933:51:56"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 11534,
                        "name": "instance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11514,
                        "src": "1021:8:56",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 11533,
                      "name": "NewInstance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11464,
                      "src": "1009:11:56",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 11535,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1009:21:56",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 11536,
                  "nodeType": "EmitStatement",
                  "src": "1004:26:56"
                }
              ]
            },
            "id": 11538,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_initAndEmit",
            "nameLocation": "822:12:56",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11517,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11514,
                  "mutability": "mutable",
                  "name": "instance",
                  "nameLocation": "843:8:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11538,
                  "src": "835:16:56",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11513,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "835:7:56",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11516,
                  "mutability": "mutable",
                  "name": "initdata",
                  "nameLocation": "866:8:56",
                  "nodeType": "VariableDeclaration",
                  "scope": 11538,
                  "src": "853:21:56",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11515,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "853:5:56",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "834:41:56"
            },
            "returnParameters": {
              "id": 11518,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "884:0:56"
            },
            "scope": 11539,
            "src": "813:224:56",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 11540,
        "src": "120:919:56",
        "usedErrors": [],
        "usedEvents": [
          11464
        ]
      }
    ],
    "src": "33:1007:56"
  },
  "bytecode": "608060405234801561001057600080fd5b506106d5806100206000396000f3fe6080604052600436106100345760003560e01c80630fbe133c14610039578063360d0fad1461004e5780636e9ebc811461008a575b600080fd5b61004c61004736600461052c565b61009d565b005b34801561005a57600080fd5b5061006e61006936600461057f565b6100f3565b6040516001600160a01b03909116815260200160405180910390f35b61004c6100983660046105a9565b610111565b6100ee6100b2846001600160a01b031661012d565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101cf92505050565b505050565b60006101086001600160a01b0384168361022c565b90505b92915050565b6101276100b26001600160a01b03861685610292565b50505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166101ca5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064015b60405180910390fd5b919050565b8051156101ec576101ea6001600160a01b0383168234610332565b505b6040516001600160a01b03831681527f39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea59060200160405180910390a15050565b6000610108838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661010b5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016101c1565b606061035884848460405180606001604052806029815260200161067760299139610362565b90505b9392505050565b6060824710156103c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101c1565b6001600160a01b0385163b61041a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101c1565b600080866001600160a01b031685876040516104369190610627565b60006040518083038185875af1925050503d8060008114610473576040519150601f19603f3d011682016040523d82523d6000602084013e610478565b606091505b5091509150610488828286610493565b979650505050505050565b606083156104a257508161035b565b8251156104b25782518084602001fd5b8160405162461bcd60e51b81526004016101c19190610643565b80356001600160a01b03811681146101ca57600080fd5b60008083601f8401126104f557600080fd5b50813567ffffffffffffffff81111561050d57600080fd5b60208301915083602082850101111561052557600080fd5b9250929050565b60008060006040848603121561054157600080fd5b61054a846104cc565b9250602084013567ffffffffffffffff81111561056657600080fd5b610572868287016104e3565b9497909650939450505050565b6000806040838503121561059257600080fd5b61059b836104cc565b946020939093013593505050565b600080600080606085870312156105bf57600080fd5b6105c8856104cc565b935060208501359250604085013567ffffffffffffffff8111156105eb57600080fd5b6105f7878288016104e3565b95989497509550505050565b60005b8381101561061e578181015183820152602001610606565b50506000910152565b60008251610639818460208701610603565b9190910192915050565b6020815260008251806020840152610662816040850160208701610603565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220f7ff9006efaeda5a3e3e304e6d8c520f0e1497d655894117d931a52705a9504c64736f6c63430008150033",
  "bytecodeSha1": "c370df519fc9bf705e01f0cc9918c9e0d938a067",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.21+commit.d9974bed"
  },
  "contractName": "ClonesMock",
  "coverageMap": {
    "branches": {
      "138": {
        "Clones.clone": {
          "19": [
            1417,
            1439,
            true
          ]
        },
        "Clones.cloneDeterministic": {
          "20": [
            2341,
            2363,
            true
          ]
        }
      },
      "198": {
        "Address.functionCallWithValue": {
          "16": [
            5130,
            5160,
            true
          ]
        },
        "Address.verifyCallResult": {
          "17": [
            7720,
            7727,
            false
          ],
          "18": [
            7861,
            7882,
            false
          ]
        }
      },
      "56": {
        "ClonesMock._initAndEmit": {
          "15": [
            898,
            917,
            false
          ]
        }
      }
    },
    "statements": {
      "138": {
        "Clones.clone": {
          "3": [
            1409,
            1466
          ]
        },
        "Clones.cloneDeterministic": {
          "7": [
            2333,
            2391
          ]
        },
        "Clones.predictDeterministicAddress": {
          "6": [
            3477,
            3548
          ]
        }
      },
      "198": {
        "Address.functionCallWithValue": {
          "8": [
            4584,
            4678
          ],
          "9": [
            5122,
            5203
          ],
          "11": [
            5213,
            5273
          ],
          "12": [
            5367,
            5425
          ]
        },
        "Address.isContract": {
          "10": [
            1443,
            1473
          ]
        },
        "Address.verifyCallResult": {
          "13": [
            7743,
            7760
          ],
          "14": [
            8187,
            8207
          ]
        }
      },
      "56": {
        "ClonesMock._initAndEmit": {
          "4": [
            933,
            984
          ],
          "5": [
            1004,
            1030
          ]
        },
        "ClonesMock.clone": {
          "0": [
            339,
            385
          ]
        },
        "ClonesMock.cloneDeterministic": {
          "2": [
            544,
            607
          ]
        },
        "ClonesMock.predictDeterministicAddress": {
          "1": [
            745,
            800
          ]
        }
      }
    }
  },
  "dependencies": [
    "Address",
    "Clones"
  ],
  "deployedBytecode": "6080604052600436106100345760003560e01c80630fbe133c14610039578063360d0fad1461004e5780636e9ebc811461008a575b600080fd5b61004c61004736600461052c565b61009d565b005b34801561005a57600080fd5b5061006e61006936600461057f565b6100f3565b6040516001600160a01b03909116815260200160405180910390f35b61004c6100983660046105a9565b610111565b6100ee6100b2846001600160a01b031661012d565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101cf92505050565b505050565b60006101086001600160a01b0384168361022c565b90505b92915050565b6101276100b26001600160a01b03861685610292565b50505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166101ca5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064015b60405180910390fd5b919050565b8051156101ec576101ea6001600160a01b0383168234610332565b505b6040516001600160a01b03831681527f39a773f10839d86923d91d5ce7d6642f2f63a95d850495abb1f162e38aa04ea59060200160405180910390a15050565b6000610108838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661010b5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016101c1565b606061035884848460405180606001604052806029815260200161067760299139610362565b90505b9392505050565b6060824710156103c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101c1565b6001600160a01b0385163b61041a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101c1565b600080866001600160a01b031685876040516104369190610627565b60006040518083038185875af1925050503d8060008114610473576040519150601f19603f3d011682016040523d82523d6000602084013e610478565b606091505b5091509150610488828286610493565b979650505050505050565b606083156104a257508161035b565b8251156104b25782518084602001fd5b8160405162461bcd60e51b81526004016101c19190610643565b80356001600160a01b03811681146101ca57600080fd5b60008083601f8401126104f557600080fd5b50813567ffffffffffffffff81111561050d57600080fd5b60208301915083602082850101111561052557600080fd5b9250929050565b60008060006040848603121561054157600080fd5b61054a846104cc565b9250602084013567ffffffffffffffff81111561056657600080fd5b610572868287016104e3565b9497909650939450505050565b6000806040838503121561059257600080fd5b61059b836104cc565b946020939093013593505050565b600080600080606085870312156105bf57600080fd5b6105c8856104cc565b935060208501359250604085013567ffffffffffffffff8111156105eb57600080fd5b6105f7878288016104e3565b95989497509550505050565b60005b8381101561061e578181015183820152602001610606565b50506000910152565b60008251610639818460208701610603565b9190910192915050565b6020815260008251806020840152610662816040850160208701610603565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220f7ff9006efaeda5a3e3e304e6d8c520f0e1497d655894117d931a52705a9504c64736f6c63430008150033",
  "deployedSourceMap": "120:919:56:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;250:142;;;;;;:::i;:::-;;:::i;:::-;;620:187;;;;;;;;;;-1:-1:-1;620:187:56;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1455:32:249;;;1437:51;;1425:2;1410:18;620:187:56;;;;;;;398:216;;;;;;:::i;:::-;;:::i;250:142::-;339:46;352:22;:14;-1:-1:-1;;;;;352:20:56;;:22::i;:::-;376:8;;339:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;339:12:56;;-1:-1:-1;;;339:46:56:i;:::-;250:142;;;:::o;620:187::-;716:17;752:48;-1:-1:-1;;;;;752:42:56;;795:4;752:42;:48::i;:::-;745:55;;620:187;;;;;:::o;398:216::-;544:63;557:39;-1:-1:-1;;;;;557:33:56;;591:4;557:33;:39::i;544:63::-;398:216;;;;:::o;958:515:138:-;1015:16;1083:4;1077:11;-1:-1:-1;;;1108:3:138;1101:79;1226:14;1220:4;1216:25;1209:4;1204:3;1200:14;1193:49;-1:-1:-1;;;1271:4:138;1266:3;1262:14;1255:90;1385:4;1380:3;1377:1;1370:20;1358:32;-1:-1:-1;;;;;;;1417:22:138;;1409:57;;;;-1:-1:-1;;;1409:57:138;;2257:2:249;1409:57:138;;;2239:21:249;2296:2;2276:18;;;2269:30;-1:-1:-1;;;2315:18:249;;;2308:52;2377:18;;1409:57:138;;;;;;;;;958:515;;;:::o;813:224:56:-;898:15;;:19;894:101;;933:51;-1:-1:-1;;;;;933:30:56;;964:8;974:9;933:30;:51::i;:::-;;894:101;1009:21;;-1:-1:-1;;;;;1455:32:249;;1437:51;;1009:21:56;;1425:2:249;1410:18;1009:21:56;;;;;;;813:224;;:::o;3322:233:138:-;3444:17;3484:64;3512:14;3528:4;3542;2723;2717:11;-1:-1:-1;;;2741:79:138;;2860:4;2856:25;;;2849:4;2840:14;;2833:49;-1:-1:-1;;;2911:4:138;2902:14;;2895:90;3021:19;;3014:4;3005:14;;2998:43;3070:4;3061:14;;3054:28;3133:4;3118:20;;;3111:4;3102:14;;3095:44;3191:4;3175:14;;3165:31;;2508:704;1848:550;1932:16;2000:4;1994:11;-1:-1:-1;;;2025:3:138;2018:79;2143:14;2137:4;2133:25;2126:4;2121:3;2117:14;2110:49;-1:-1:-1;;;2188:4:138;2183:3;2179:14;2172:90;2309:4;2303;2298:3;2295:1;2287:27;2275:39;-1:-1:-1;;;;;;;2341:22:138;;2333:58;;;;-1:-1:-1;;;2333:58:138;;2608:2:249;2333:58:138;;;2590:21:249;2647:2;2627:18;;;2620:30;2686:25;2666:18;;;2659:53;2729:18;;2333:58:138;2406:347:249;4431:254:198;4560:12;4591:87;4613:6;4621:4;4627:5;4591:87;;;;;;;;;;;;;;;;;:21;:87::i;:::-;4584:94;;4431:254;;;;;;:::o;4933:499::-;5098:12;5155:5;5130:21;:30;;5122:81;;;;-1:-1:-1;;;5122:81:198;;2960:2:249;5122:81:198;;;2942:21:249;2999:2;2979:18;;;2972:30;3038:34;3018:18;;;3011:62;-1:-1:-1;;;3089:18:249;;;3082:36;3135:19;;5122:81:198;2758:402:249;5122:81:198;-1:-1:-1;;;;;1450:19:198;;;5213:60;;;;-1:-1:-1;;;5213:60:198;;3367:2:249;5213:60:198;;;3349:21:249;3406:2;3386:18;;;3379:30;3445:31;3425:18;;;3418:59;3494:18;;5213:60:198;3165:353:249;5213:60:198;5285:12;5299:23;5326:6;-1:-1:-1;;;;;5326:11:198;5345:5;5352:4;5326:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5284:73;;;;5374:51;5391:7;5400:10;5412:12;5374:16;:51::i;:::-;5367:58;4933:499;-1:-1:-1;;;;;;;4933:499:198:o;7546:692::-;7692:12;7720:7;7716:516;;;-1:-1:-1;7750:10:198;7743:17;;7716:516;7861:17;;:21;7857:365;;8055:10;8049:17;8115:15;8102:10;8098:2;8094:19;8087:44;7857:365;8194:12;8187:20;;-1:-1:-1;;;8187:20:198;;;;;;;;:::i;14:173:249:-;82:20;;-1:-1:-1;;;;;131:31:249;;121:42;;111:70;;177:1;174;167:12;192:347;243:8;253:6;307:3;300:4;292:6;288:17;284:27;274:55;;325:1;322;315:12;274:55;-1:-1:-1;348:20:249;;391:18;380:30;;377:50;;;423:1;420;413:12;377:50;460:4;452:6;448:17;436:29;;512:3;505:4;496:6;488;484:19;480:30;477:39;474:59;;;529:1;526;519:12;474:59;192:347;;;;;:::o;544:483::-;623:6;631;639;692:2;680:9;671:7;667:23;663:32;660:52;;;708:1;705;698:12;660:52;731:29;750:9;731:29;:::i;:::-;721:39;;811:2;800:9;796:18;783:32;838:18;830:6;827:30;824:50;;;870:1;867;860:12;824:50;909:58;959:7;950:6;939:9;935:22;909:58;:::i;:::-;544:483;;986:8;;-1:-1:-1;883:84:249;;-1:-1:-1;;;;544:483:249:o;1032:254::-;1100:6;1108;1161:2;1149:9;1140:7;1136:23;1132:32;1129:52;;;1177:1;1174;1167:12;1129:52;1200:29;1219:9;1200:29;:::i;:::-;1190:39;1276:2;1261:18;;;;1248:32;;-1:-1:-1;;;1032:254:249:o;1499:551::-;1587:6;1595;1603;1611;1664:2;1652:9;1643:7;1639:23;1635:32;1632:52;;;1680:1;1677;1670:12;1632:52;1703:29;1722:9;1703:29;:::i;:::-;1693:39;;1779:2;1768:9;1764:18;1751:32;1741:42;;1834:2;1823:9;1819:18;1806:32;1861:18;1853:6;1850:30;1847:50;;;1893:1;1890;1883:12;1847:50;1932:58;1982:7;1973:6;1962:9;1958:22;1932:58;:::i;:::-;1499:551;;;;-1:-1:-1;2009:8:249;-1:-1:-1;;;;1499:551:249:o;3523:250::-;3608:1;3618:113;3632:6;3629:1;3626:13;3618:113;;;3708:11;;;3702:18;3689:11;;;3682:39;3654:2;3647:10;3618:113;;;-1:-1:-1;;3765:1:249;3747:16;;3740:27;3523:250::o;3778:287::-;3907:3;3945:6;3939:13;3961:66;4020:6;4015:3;4008:4;4000:6;3996:17;3961:66;:::i;:::-;4043:16;;;;;3778:287;-1:-1:-1;;3778:287:249:o;4070:396::-;4219:2;4208:9;4201:21;4182:4;4251:6;4245:13;4294:6;4289:2;4278:9;4274:18;4267:34;4310:79;4382:6;4377:2;4366:9;4362:18;4357:2;4349:6;4345:15;4310:79;:::i;:::-;4450:2;4429:15;-1:-1:-1;;4425:29:249;4410:45;;;;4457:2;4406:54;;4070:396;-1:-1:-1;;4070:396:249:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    120,
    1039
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xFBE133C EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0x360D0FAD EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0x6E9EBC81 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C PUSH2 0x47 CALLDATASIZE PUSH1 0x4 PUSH2 0x52C JUMP JUMPDEST PUSH2 0x9D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x57F JUMP JUMPDEST PUSH2 0xF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4C PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x5A9 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH2 0xEE PUSH2 0xB2 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12D JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1CF SWAP3 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 PUSH2 0x22C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x127 PUSH2 0xB2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP6 PUSH2 0x292 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE DUP3 PUSH1 0x60 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x37 DUP2 PUSH1 0x0 CREATE SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x115490CC4C4D8DCE8818DC99585D194819985A5B1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1EC JUMPI PUSH2 0x1EA PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP3 CALLVALUE PUSH2 0x332 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH32 0x39A773F10839D86923D91D5CE7D6642F2F63A95D850495ABB1F162E38AA04EA5 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x108 DUP4 DUP4 ADDRESS PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x60 SWAP4 DUP5 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH16 0x5AF43D82803E903D91602B57FD5BF3FF PUSH1 0x80 SHL PUSH1 0x28 DUP3 ADD MSTORE SWAP3 SHL PUSH1 0x38 DUP4 ADD MSTORE PUSH1 0x4C DUP3 ADD MSTORE PUSH1 0x37 DUP1 DUP3 KECCAK256 PUSH1 0x6C DUP4 ADD MSTORE PUSH1 0x55 SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH20 0x3D602D80600A3D3981F3363D3D373D3D3D363D73 PUSH1 0x60 SHL DUP2 MSTORE DUP4 PUSH1 0x60 SHL PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE DUP3 PUSH1 0x37 DUP3 PUSH1 0x0 CREATE2 SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313136373A2063726561746532206661696C6564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x358 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x677 PUSH1 0x29 SWAP2 CODECOPY PUSH2 0x362 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x41A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x627 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x473 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x478 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x488 DUP3 DUP3 DUP7 PUSH2 0x493 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4A2 JUMPI POP DUP2 PUSH2 0x35B JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x4B2 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C1 SWAP2 SWAP1 PUSH2 0x643 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x50D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x541 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54A DUP5 PUSH2 0x4CC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x572 DUP7 DUP3 DUP8 ADD PUSH2 0x4E3 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59B DUP4 PUSH2 0x4CC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5C8 DUP6 PUSH2 0x4CC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F7 DUP8 DUP3 DUP9 ADD PUSH2 0x4E3 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x61E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x606 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x639 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x603 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x662 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x603 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2063616C6C KECCAK256 PUSH24 0x6974682076616C7565206661696C6564A264697066735822 SLT KECCAK256 0xF7 SELFDESTRUCT SWAP1 MOD 0xEF 0xAE 0xDA GAS RETURNDATACOPY RETURNDATACOPY ADDRESS 0x4E PUSH14 0x8C520F0E1497D655894117D931A5 0x27 SDIV 0xA9 POP 0x4C PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        120,
        1039
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "MSTORE",
      "path": "56"
    },
    "5": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "CALLDATASIZE",
      "path": "56"
    },
    "8": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "LT",
      "path": "56"
    },
    "9": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x34"
    },
    "12": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "JUMPI",
      "path": "56"
    },
    "13": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "CALLDATALOAD",
      "path": "56"
    },
    "16": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "SHR",
      "path": "56"
    },
    "19": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "DUP1",
      "path": "56"
    },
    "20": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH4",
      "path": "56",
      "value": "0xFBE133C"
    },
    "25": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "EQ",
      "path": "56"
    },
    "26": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x39"
    },
    "29": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "JUMPI",
      "path": "56"
    },
    "30": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "DUP1",
      "path": "56"
    },
    "31": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH4",
      "path": "56",
      "value": "0x360D0FAD"
    },
    "36": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "EQ",
      "path": "56"
    },
    "37": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x4E"
    },
    "40": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "JUMPI",
      "path": "56"
    },
    "41": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "DUP1",
      "path": "56"
    },
    "42": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH4",
      "path": "56",
      "value": "0x6E9EBC81"
    },
    "47": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "EQ",
      "path": "56"
    },
    "48": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x8A"
    },
    "51": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "JUMPI",
      "path": "56"
    },
    "52": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "53": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x0"
    },
    "55": {
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "DUP1",
      "path": "56"
    },
    "56": {
      "first_revert": true,
      "fn": null,
      "offset": [
        120,
        1039
      ],
      "op": "REVERT",
      "path": "56"
    },
    "57": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "58": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x4C"
    },
    "61": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x47"
    },
    "64": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "CALLDATASIZE",
      "path": "56"
    },
    "65": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x4"
    },
    "67": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x52C"
    },
    "70": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        250,
        392
      ],
      "op": "JUMP",
      "path": "56"
    },
    "71": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "72": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x9D"
    },
    "75": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        250,
        392
      ],
      "op": "JUMP",
      "path": "56"
    },
    "76": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "77": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "STOP",
      "path": "56"
    },
    "78": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "79": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "CALLVALUE",
      "path": "56"
    },
    "80": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "DUP1",
      "path": "56"
    },
    "81": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "ISZERO",
      "path": "56"
    },
    "82": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x5A"
    },
    "85": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "JUMPI",
      "path": "56"
    },
    "86": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x0"
    },
    "88": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "DUP1",
      "path": "56"
    },
    "89": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "REVERT",
      "path": "56"
    },
    "90": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "91": {
      "op": "POP"
    },
    "92": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x6E"
    },
    "95": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x69"
    },
    "98": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "CALLDATASIZE",
      "path": "56"
    },
    "99": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x4"
    },
    "101": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x57F"
    },
    "104": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        620,
        807
      ],
      "op": "JUMP",
      "path": "56"
    },
    "105": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "106": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0xF3"
    },
    "109": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        620,
        807
      ],
      "op": "JUMP",
      "path": "56"
    },
    "110": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "111": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x40"
    },
    "113": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "MLOAD",
      "path": "56"
    },
    "114": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "118": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "120": {
      "op": "SHL"
    },
    "121": {
      "op": "SUB"
    },
    "122": {
      "op": "SWAP1"
    },
    "123": {
      "op": "SWAP2"
    },
    "124": {
      "op": "AND"
    },
    "125": {
      "op": "DUP2"
    },
    "126": {
      "op": "MSTORE"
    },
    "127": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "129": {
      "op": "ADD"
    },
    "130": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x40"
    },
    "132": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "MLOAD",
      "path": "56"
    },
    "133": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "DUP1",
      "path": "56"
    },
    "134": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "SWAP2",
      "path": "56"
    },
    "135": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "SUB",
      "path": "56"
    },
    "136": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "SWAP1",
      "path": "56"
    },
    "137": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "RETURN",
      "path": "56"
    },
    "138": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "139": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x4C"
    },
    "142": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x98"
    },
    "145": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "CALLDATASIZE",
      "path": "56"
    },
    "146": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x4"
    },
    "148": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x5A9"
    },
    "151": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "i",
      "offset": [
        398,
        614
      ],
      "op": "JUMP",
      "path": "56"
    },
    "152": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "153": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x111"
    },
    "156": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "i",
      "offset": [
        398,
        614
      ],
      "op": "JUMP",
      "path": "56"
    },
    "157": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "158": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH2",
      "path": "56",
      "statement": 0,
      "value": "0xEE"
    },
    "161": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        374
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0xB2"
    },
    "164": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        366
      ],
      "op": "DUP5",
      "path": "56"
    },
    "165": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "167": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "169": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "171": {
      "op": "SHL"
    },
    "172": {
      "op": "SUB"
    },
    "173": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        372
      ],
      "op": "AND",
      "path": "56"
    },
    "174": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        372
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x12D"
    },
    "177": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        352,
        374
      ],
      "op": "JUMP",
      "path": "56"
    },
    "178": {
      "fn": "ClonesMock.clone",
      "offset": [
        352,
        374
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "179": {
      "fn": "ClonesMock.clone",
      "offset": [
        376,
        384
      ],
      "op": "DUP4",
      "path": "56"
    },
    "180": {
      "fn": "ClonesMock.clone",
      "offset": [
        376,
        384
      ],
      "op": "DUP4",
      "path": "56"
    },
    "181": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "56"
    },
    "182": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "56"
    },
    "183": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x1F"
    },
    "185": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "56"
    },
    "186": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x20"
    },
    "188": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "56"
    },
    "189": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP2",
      "path": "56"
    },
    "190": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DIV",
      "path": "56"
    },
    "191": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MUL",
      "path": "56"
    },
    "192": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x20"
    },
    "194": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "56"
    },
    "195": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x40"
    },
    "197": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MLOAD",
      "path": "56"
    },
    "198": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP1",
      "path": "56"
    },
    "199": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP2",
      "path": "56"
    },
    "200": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "56"
    },
    "201": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x40"
    },
    "203": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MSTORE",
      "path": "56"
    },
    "204": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "56"
    },
    "205": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP4",
      "path": "56"
    },
    "206": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP3",
      "path": "56"
    },
    "207": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP2",
      "path": "56"
    },
    "208": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP1",
      "path": "56"
    },
    "209": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP2",
      "path": "56"
    },
    "210": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP2",
      "path": "56"
    },
    "211": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MSTORE",
      "path": "56"
    },
    "212": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x20"
    },
    "214": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "56"
    },
    "215": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP4",
      "path": "56"
    },
    "216": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP4",
      "path": "56"
    },
    "217": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP1",
      "path": "56"
    },
    "218": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP3",
      "path": "56"
    },
    "219": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "DUP5",
      "path": "56"
    },
    "220": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "CALLDATACOPY",
      "path": "56"
    },
    "221": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x0"
    },
    "223": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP3",
      "path": "56"
    },
    "224": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "ADD",
      "path": "56"
    },
    "225": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP2",
      "path": "56"
    },
    "226": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP1",
      "path": "56"
    },
    "227": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "SWAP2",
      "path": "56"
    },
    "228": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "MSTORE",
      "path": "56"
    },
    "229": {
      "op": "POP"
    },
    "230": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        351
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x1CF"
    },
    "233": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        351
      ],
      "op": "SWAP3",
      "path": "56"
    },
    "234": {
      "op": "POP"
    },
    "235": {
      "op": "POP"
    },
    "236": {
      "op": "POP"
    },
    "237": {
      "fn": "ClonesMock.clone",
      "jump": "i",
      "offset": [
        339,
        385
      ],
      "op": "JUMP",
      "path": "56"
    },
    "238": {
      "fn": "ClonesMock.clone",
      "offset": [
        339,
        385
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "239": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "POP",
      "path": "56"
    },
    "240": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "POP",
      "path": "56"
    },
    "241": {
      "fn": "ClonesMock.clone",
      "offset": [
        250,
        392
      ],
      "op": "POP",
      "path": "56"
    },
    "242": {
      "fn": "ClonesMock.clone",
      "jump": "o",
      "offset": [
        250,
        392
      ],
      "op": "JUMP",
      "path": "56"
    },
    "243": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "244": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        716,
        733
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x0"
    },
    "246": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        752,
        800
      ],
      "op": "PUSH2",
      "path": "56",
      "statement": 1,
      "value": "0x108"
    },
    "249": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "251": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "253": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "255": {
      "op": "SHL"
    },
    "256": {
      "op": "SUB"
    },
    "257": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        752,
        794
      ],
      "op": "DUP5",
      "path": "56"
    },
    "258": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        752,
        794
      ],
      "op": "AND",
      "path": "56"
    },
    "259": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        795,
        799
      ],
      "op": "DUP4",
      "path": "56"
    },
    "260": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        752,
        794
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x22C"
    },
    "263": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "i",
      "offset": [
        752,
        800
      ],
      "op": "JUMP",
      "path": "56"
    },
    "264": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        752,
        800
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "265": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        745,
        800
      ],
      "op": "SWAP1",
      "path": "56"
    },
    "266": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        745,
        800
      ],
      "op": "POP",
      "path": "56"
    },
    "267": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "268": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "SWAP3",
      "path": "56"
    },
    "269": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "SWAP2",
      "path": "56"
    },
    "270": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "POP",
      "path": "56"
    },
    "271": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "offset": [
        620,
        807
      ],
      "op": "POP",
      "path": "56"
    },
    "272": {
      "fn": "ClonesMock.predictDeterministicAddress",
      "jump": "o",
      "offset": [
        620,
        807
      ],
      "op": "JUMP",
      "path": "56"
    },
    "273": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "274": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        544,
        607
      ],
      "op": "PUSH2",
      "path": "56",
      "statement": 2,
      "value": "0x127"
    },
    "277": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        557,
        596
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0xB2"
    },
    "280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "286": {
      "op": "SHL"
    },
    "287": {
      "op": "SUB"
    },
    "288": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        557,
        590
      ],
      "op": "DUP7",
      "path": "56"
    },
    "289": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        557,
        590
      ],
      "op": "AND",
      "path": "56"
    },
    "290": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        591,
        595
      ],
      "op": "DUP6",
      "path": "56"
    },
    "291": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        557,
        590
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x292"
    },
    "294": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "i",
      "offset": [
        557,
        596
      ],
      "op": "JUMP",
      "path": "56"
    },
    "295": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        544,
        607
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "296": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "POP",
      "path": "56"
    },
    "297": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "POP",
      "path": "56"
    },
    "298": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "POP",
      "path": "56"
    },
    "299": {
      "fn": "ClonesMock.cloneDeterministic",
      "offset": [
        398,
        614
      ],
      "op": "POP",
      "path": "56"
    },
    "300": {
      "fn": "ClonesMock.cloneDeterministic",
      "jump": "o",
      "offset": [
        398,
        614
      ],
      "op": "JUMP",
      "path": "56"
    },
    "301": {
      "fn": "Clones.clone",
      "offset": [
        958,
        1473
      ],
      "op": "JUMPDEST",
      "path": "138"
    },
    "302": {
      "fn": "Clones.clone",
      "offset": [
        1015,
        1031
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x0"
    },
    "304": {
      "fn": "Clones.clone",
      "offset": [
        1083,
        1087
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x40"
    },
    "306": {
      "fn": "Clones.clone",
      "offset": [
        1077,
        1088
      ],
      "op": "MLOAD",
      "path": "138"
    },
    "307": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "328": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "330": {
      "op": "SHL"
    },
    "331": {
      "fn": "Clones.clone",
      "offset": [
        1108,
        1111
      ],
      "op": "DUP2",
      "path": "138"
    },
    "332": {
      "fn": "Clones.clone",
      "offset": [
        1101,
        1180
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "333": {
      "fn": "Clones.clone",
      "offset": [
        1226,
        1240
      ],
      "op": "DUP3",
      "path": "138"
    },
    "334": {
      "fn": "Clones.clone",
      "offset": [
        1220,
        1224
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x60"
    },
    "336": {
      "fn": "Clones.clone",
      "offset": [
        1216,
        1241
      ],
      "op": "SHL",
      "path": "138"
    },
    "337": {
      "fn": "Clones.clone",
      "offset": [
        1209,
        1213
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x14"
    },
    "339": {
      "fn": "Clones.clone",
      "offset": [
        1204,
        1207
      ],
      "op": "DUP3",
      "path": "138"
    },
    "340": {
      "fn": "Clones.clone",
      "offset": [
        1200,
        1214
      ],
      "op": "ADD",
      "path": "138"
    },
    "341": {
      "fn": "Clones.clone",
      "offset": [
        1193,
        1242
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "342": {
      "op": "PUSH15",
      "value": "0x5AF43D82803E903D91602B57FD5BF3"
    },
    "358": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "360": {
      "op": "SHL"
    },
    "361": {
      "fn": "Clones.clone",
      "offset": [
        1271,
        1275
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x28"
    },
    "363": {
      "fn": "Clones.clone",
      "offset": [
        1266,
        1269
      ],
      "op": "DUP3",
      "path": "138"
    },
    "364": {
      "fn": "Clones.clone",
      "offset": [
        1262,
        1276
      ],
      "op": "ADD",
      "path": "138"
    },
    "365": {
      "fn": "Clones.clone",
      "offset": [
        1255,
        1345
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "366": {
      "fn": "Clones.clone",
      "offset": [
        1385,
        1389
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x37"
    },
    "368": {
      "fn": "Clones.clone",
      "offset": [
        1380,
        1383
      ],
      "op": "DUP2",
      "path": "138"
    },
    "369": {
      "fn": "Clones.clone",
      "offset": [
        1377,
        1378
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x0"
    },
    "371": {
      "fn": "Clones.clone",
      "offset": [
        1370,
        1390
      ],
      "op": "CREATE",
      "path": "138"
    },
    "372": {
      "fn": "Clones.clone",
      "offset": [
        1358,
        1390
      ],
      "op": "SWAP2",
      "path": "138"
    },
    "373": {
      "op": "POP"
    },
    "374": {
      "op": "POP"
    },
    "375": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "377": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "379": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "381": {
      "op": "SHL"
    },
    "382": {
      "op": "SUB"
    },
    "383": {
      "fn": "Clones.clone",
      "offset": [
        1417,
        1439
      ],
      "op": "DUP2",
      "path": "138",
      "statement": 3
    },
    "384": {
      "branch": 19,
      "fn": "Clones.clone",
      "offset": [
        1417,
        1439
      ],
      "op": "AND",
      "path": "138"
    },
    "385": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "PUSH2",
      "path": "138",
      "value": "0x1CA"
    },
    "388": {
      "branch": 19,
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "JUMPI",
      "path": "138"
    },
    "389": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x40"
    },
    "391": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "MLOAD",
      "path": "138"
    },
    "392": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "396": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "398": {
      "op": "SHL"
    },
    "399": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "DUP2",
      "path": "138"
    },
    "400": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "401": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "403": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x4"
    },
    "405": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "DUP3",
      "path": "138"
    },
    "406": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "ADD",
      "path": "138"
    },
    "407": {
      "op": "MSTORE"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "410": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "412": {
      "op": "DUP3"
    },
    "413": {
      "op": "ADD"
    },
    "414": {
      "op": "MSTORE"
    },
    "415": {
      "op": "PUSH22",
      "value": "0x115490CC4C4D8DCE8818DC99585D194819985A5B1959"
    },
    "438": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "440": {
      "op": "SHL"
    },
    "441": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "443": {
      "op": "DUP3"
    },
    "444": {
      "op": "ADD"
    },
    "445": {
      "op": "MSTORE"
    },
    "446": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "448": {
      "op": "ADD"
    },
    "449": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "JUMPDEST",
      "path": "138"
    },
    "450": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x40"
    },
    "452": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "MLOAD",
      "path": "138"
    },
    "453": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "DUP1",
      "path": "138"
    },
    "454": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "SWAP2",
      "path": "138"
    },
    "455": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "SUB",
      "path": "138"
    },
    "456": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "SWAP1",
      "path": "138"
    },
    "457": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "138"
    },
    "458": {
      "fn": "Clones.clone",
      "offset": [
        1409,
        1466
      ],
      "op": "JUMPDEST",
      "path": "138"
    },
    "459": {
      "fn": "Clones.clone",
      "offset": [
        958,
        1473
      ],
      "op": "SWAP2",
      "path": "138"
    },
    "460": {
      "fn": "Clones.clone",
      "offset": [
        958,
        1473
      ],
      "op": "SWAP1",
      "path": "138"
    },
    "461": {
      "fn": "Clones.clone",
      "offset": [
        958,
        1473
      ],
      "op": "POP",
      "path": "138"
    },
    "462": {
      "fn": "Clones.clone",
      "jump": "o",
      "offset": [
        958,
        1473
      ],
      "op": "JUMP",
      "path": "138"
    },
    "463": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        813,
        1037
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "464": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        898,
        913
      ],
      "op": "DUP1",
      "path": "56"
    },
    "465": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        898,
        913
      ],
      "op": "MLOAD",
      "path": "56"
    },
    "466": {
      "branch": 15,
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        898,
        917
      ],
      "op": "ISZERO",
      "path": "56"
    },
    "467": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        894,
        995
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x1EC"
    },
    "470": {
      "branch": 15,
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        894,
        995
      ],
      "op": "JUMPI",
      "path": "56"
    },
    "471": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        933,
        984
      ],
      "op": "PUSH2",
      "path": "56",
      "statement": 4,
      "value": "0x1EA"
    },
    "474": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "476": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "478": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "480": {
      "op": "SHL"
    },
    "481": {
      "op": "SUB"
    },
    "482": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        933,
        963
      ],
      "op": "DUP4",
      "path": "56"
    },
    "483": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        933,
        963
      ],
      "op": "AND",
      "path": "56"
    },
    "484": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        964,
        972
      ],
      "op": "DUP3",
      "path": "56"
    },
    "485": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        974,
        983
      ],
      "op": "CALLVALUE",
      "path": "56"
    },
    "486": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        933,
        963
      ],
      "op": "PUSH2",
      "path": "56",
      "value": "0x332"
    },
    "489": {
      "fn": "ClonesMock._initAndEmit",
      "jump": "i",
      "offset": [
        933,
        984
      ],
      "op": "JUMP",
      "path": "56"
    },
    "490": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        933,
        984
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "491": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        933,
        984
      ],
      "op": "POP",
      "path": "56"
    },
    "492": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        894,
        995
      ],
      "op": "JUMPDEST",
      "path": "56"
    },
    "493": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH1",
      "path": "56",
      "statement": 5,
      "value": "0x40"
    },
    "495": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "MLOAD",
      "path": "56"
    },
    "496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "500": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "502": {
      "op": "SHL"
    },
    "503": {
      "op": "SUB"
    },
    "504": {
      "op": "DUP4"
    },
    "505": {
      "op": "AND"
    },
    "506": {
      "op": "DUP2"
    },
    "507": {
      "op": "MSTORE"
    },
    "508": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH32",
      "path": "56",
      "value": "0x39A773F10839D86923D91D5CE7D6642F2F63A95D850495ABB1F162E38AA04EA5"
    },
    "541": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP1",
      "path": "56"
    },
    "542": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "544": {
      "op": "ADD"
    },
    "545": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH1",
      "path": "56",
      "value": "0x40"
    },
    "547": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "MLOAD",
      "path": "56"
    },
    "548": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "DUP1",
      "path": "56"
    },
    "549": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP2",
      "path": "56"
    },
    "550": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "SUB",
      "path": "56"
    },
    "551": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP1",
      "path": "56"
    },
    "552": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        1009,
        1030
      ],
      "op": "LOG1",
      "path": "56"
    },
    "553": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        813,
        1037
      ],
      "op": "POP",
      "path": "56"
    },
    "554": {
      "fn": "ClonesMock._initAndEmit",
      "offset": [
        813,
        1037
      ],
      "op": "POP",
      "path": "56"
    },
    "555": {
      "fn": "ClonesMock._initAndEmit",
      "jump": "o",
      "offset": [
        813,
        1037
      ],
      "op": "JUMP",
      "path": "56"
    },
    "556": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3322,
        3555
      ],
      "op": "JUMPDEST",
      "path": "138"
    },
    "557": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3444,
        3461
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x0"
    },
    "559": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3484,
        3548
      ],
      "op": "PUSH2",
      "path": "138",
      "statement": 6,
      "value": "0x108"
    },
    "562": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3512,
        3526
      ],
      "op": "DUP4",
      "path": "138"
    },
    "563": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3528,
        3532
      ],
      "op": "DUP4",
      "path": "138"
    },
    "564": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3542,
        3546
      ],
      "op": "ADDRESS",
      "path": "138"
    },
    "565": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2723,
        2727
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x40"
    },
    "567": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2717,
        2728
      ],
      "op": "MLOAD",
      "path": "138"
    },
    "568": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "589": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "591": {
      "op": "SHL"
    },
    "592": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2741,
        2820
      ],
      "op": "DUP2",
      "path": "138"
    },
    "593": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2741,
        2820
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "594": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2860,
        2864
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x60"
    },
    "596": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2856,
        2881
      ],
      "op": "SWAP4",
      "path": "138"
    },
    "597": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2856,
        2881
      ],
      "op": "DUP5",
      "path": "138"
    },
    "598": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2856,
        2881
      ],
      "op": "SHL",
      "path": "138"
    },
    "599": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2849,
        2853
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x14"
    },
    "601": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2840,
        2854
      ],
      "op": "DUP3",
      "path": "138"
    },
    "602": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2840,
        2854
      ],
      "op": "ADD",
      "path": "138"
    },
    "603": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2833,
        2882
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "604": {
      "op": "PUSH16",
      "value": "0x5AF43D82803E903D91602B57FD5BF3FF"
    },
    "621": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "623": {
      "op": "SHL"
    },
    "624": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2911,
        2915
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x28"
    },
    "626": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2902,
        2916
      ],
      "op": "DUP3",
      "path": "138"
    },
    "627": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2902,
        2916
      ],
      "op": "ADD",
      "path": "138"
    },
    "628": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2895,
        2985
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "629": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3021,
        3040
      ],
      "op": "SWAP3",
      "path": "138"
    },
    "630": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3021,
        3040
      ],
      "op": "SHL",
      "path": "138"
    },
    "631": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3014,
        3018
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x38"
    },
    "633": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3005,
        3019
      ],
      "op": "DUP4",
      "path": "138"
    },
    "634": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3005,
        3019
      ],
      "op": "ADD",
      "path": "138"
    },
    "635": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2998,
        3041
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "636": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3070,
        3074
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x4C"
    },
    "638": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3061,
        3075
      ],
      "op": "DUP3",
      "path": "138"
    },
    "639": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3061,
        3075
      ],
      "op": "ADD",
      "path": "138"
    },
    "640": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3054,
        3082
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "641": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3133,
        3137
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x37"
    },
    "643": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3118,
        3138
      ],
      "op": "DUP1",
      "path": "138"
    },
    "644": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3118,
        3138
      ],
      "op": "DUP3",
      "path": "138"
    },
    "645": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3118,
        3138
      ],
      "op": "KECCAK256",
      "path": "138"
    },
    "646": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3111,
        3115
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x6C"
    },
    "648": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3102,
        3116
      ],
      "op": "DUP4",
      "path": "138"
    },
    "649": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3102,
        3116
      ],
      "op": "ADD",
      "path": "138"
    },
    "650": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3095,
        3139
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "651": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3191,
        3195
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x55"
    },
    "653": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3175,
        3189
      ],
      "op": "SWAP2",
      "path": "138"
    },
    "654": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3175,
        3189
      ],
      "op": "ADD",
      "path": "138"
    },
    "655": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3165,
        3196
      ],
      "op": "KECCAK256",
      "path": "138"
    },
    "656": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        3165,
        3196
      ],
      "op": "SWAP1",
      "path": "138"
    },
    "657": {
      "fn": "Clones.predictDeterministicAddress",
      "offset": [
        2508,
        3212
      ],
      "op": "JUMP",
      "path": "138"
    },
    "658": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        1848,
        2398
      ],
      "op": "JUMPDEST",
      "path": "138"
    },
    "659": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        1932,
        1948
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x0"
    },
    "661": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2000,
        2004
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x40"
    },
    "663": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        1994,
        2005
      ],
      "op": "MLOAD",
      "path": "138"
    },
    "664": {
      "op": "PUSH20",
      "value": "0x3D602D80600A3D3981F3363D3D373D3D3D363D73"
    },
    "685": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "687": {
      "op": "SHL"
    },
    "688": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2025,
        2028
      ],
      "op": "DUP2",
      "path": "138"
    },
    "689": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2018,
        2097
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "690": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2143,
        2157
      ],
      "op": "DUP4",
      "path": "138"
    },
    "691": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2137,
        2141
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x60"
    },
    "693": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2133,
        2158
      ],
      "op": "SHL",
      "path": "138"
    },
    "694": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2126,
        2130
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x14"
    },
    "696": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2121,
        2124
      ],
      "op": "DUP3",
      "path": "138"
    },
    "697": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2117,
        2131
      ],
      "op": "ADD",
      "path": "138"
    },
    "698": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2110,
        2159
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "699": {
      "op": "PUSH15",
      "value": "0x5AF43D82803E903D91602B57FD5BF3"
    },
    "715": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "717": {
      "op": "SHL"
    },
    "718": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2188,
        2192
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x28"
    },
    "720": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2183,
        2186
      ],
      "op": "DUP3",
      "path": "138"
    },
    "721": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2179,
        2193
      ],
      "op": "ADD",
      "path": "138"
    },
    "722": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2172,
        2262
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "723": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2309,
        2313
      ],
      "op": "DUP3",
      "path": "138"
    },
    "724": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2303,
        2307
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x37"
    },
    "726": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2298,
        2301
      ],
      "op": "DUP3",
      "path": "138"
    },
    "727": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2295,
        2296
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x0"
    },
    "729": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2287,
        2314
      ],
      "op": "CREATE2",
      "path": "138"
    },
    "730": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2275,
        2314
      ],
      "op": "SWAP2",
      "path": "138"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "op": "POP"
    },
    "733": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "737": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "739": {
      "op": "SHL"
    },
    "740": {
      "op": "SUB"
    },
    "741": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2341,
        2363
      ],
      "op": "DUP2",
      "path": "138",
      "statement": 7
    },
    "742": {
      "branch": 20,
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2341,
        2363
      ],
      "op": "AND",
      "path": "138"
    },
    "743": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "PUSH2",
      "path": "138",
      "value": "0x10B"
    },
    "746": {
      "branch": 20,
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "JUMPI",
      "path": "138"
    },
    "747": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x40"
    },
    "749": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "MLOAD",
      "path": "138"
    },
    "750": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "754": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "756": {
      "op": "SHL"
    },
    "757": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "DUP2",
      "path": "138"
    },
    "758": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "MSTORE",
      "path": "138"
    },
    "759": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "761": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "PUSH1",
      "path": "138",
      "value": "0x4"
    },
    "763": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "DUP3",
      "path": "138"
    },
    "764": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "ADD",
      "path": "138"
    },
    "765": {
      "op": "MSTORE"
    },
    "766": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "768": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "770": {
      "op": "DUP3"
    },
    "771": {
      "op": "ADD"
    },
    "772": {
      "op": "MSTORE"
    },
    "773": {
      "op": "PUSH32",
      "value": "0x455243313136373A2063726561746532206661696C6564000000000000000000"
    },
    "806": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "808": {
      "op": "DUP3"
    },
    "809": {
      "op": "ADD"
    },
    "810": {
      "op": "MSTORE"
    },
    "811": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "813": {
      "op": "ADD"
    },
    "814": {
      "fn": "Clones.cloneDeterministic",
      "offset": [
        2333,
        2391
      ],
      "op": "PUSH2",
      "path": "138",
      "value": "0x1C1"
    },
    "817": {
      "op": "JUMP"
    },
    "818": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4431,
        4685
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "819": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4560,
        4572
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x60"
    },
    "821": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "PUSH2",
      "path": "198",
      "statement": 8,
      "value": "0x358"
    },
    "824": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4613,
        4619
      ],
      "op": "DUP5",
      "path": "198"
    },
    "825": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4621,
        4625
      ],
      "op": "DUP5",
      "path": "198"
    },
    "826": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4627,
        4632
      ],
      "op": "DUP5",
      "path": "198"
    },
    "827": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "829": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "830": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "DUP1",
      "path": "198"
    },
    "831": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x60"
    },
    "833": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "ADD",
      "path": "198"
    },
    "834": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "836": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "MSTORE",
      "path": "198"
    },
    "837": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "DUP1",
      "path": "198"
    },
    "838": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x29"
    },
    "840": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "DUP2",
      "path": "198"
    },
    "841": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "MSTORE",
      "path": "198"
    },
    "842": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x20"
    },
    "844": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "ADD",
      "path": "198"
    },
    "845": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x677"
    },
    "848": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x29"
    },
    "850": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "SWAP2",
      "path": "198"
    },
    "851": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "CODECOPY",
      "path": "198"
    },
    "852": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4612
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x362"
    },
    "855": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        4591,
        4678
      ],
      "op": "JUMP",
      "path": "198"
    },
    "856": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4591,
        4678
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "857": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4584,
        4678
      ],
      "op": "SWAP1",
      "path": "198"
    },
    "858": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4584,
        4678
      ],
      "op": "POP",
      "path": "198"
    },
    "859": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4431,
        4685
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "860": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4431,
        4685
      ],
      "op": "SWAP4",
      "path": "198"
    },
    "861": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4431,
        4685
      ],
      "op": "SWAP3",
      "path": "198"
    },
    "862": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4431,
        4685
      ],
      "op": "POP",
      "path": "198"
    },
    "863": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4431,
        4685
      ],
      "op": "POP",
      "path": "198"
    },
    "864": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4431,
        4685
      ],
      "op": "POP",
      "path": "198"
    },
    "865": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4431,
        4685
      ],
      "op": "JUMP",
      "path": "198"
    },
    "866": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4933,
        5432
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "867": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5098,
        5110
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x60"
    },
    "869": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5155,
        5160
      ],
      "op": "DUP3",
      "path": "198",
      "statement": 9
    },
    "870": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5130,
        5151
      ],
      "op": "SELFBALANCE",
      "path": "198"
    },
    "871": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5130,
        5160
      ],
      "op": "LT",
      "path": "198"
    },
    "872": {
      "branch": 16,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5130,
        5160
      ],
      "op": "ISZERO",
      "path": "198"
    },
    "873": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x3C3"
    },
    "876": {
      "branch": 16,
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "JUMPI",
      "path": "198"
    },
    "877": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "879": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "880": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "884": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "886": {
      "op": "SHL"
    },
    "887": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "DUP2",
      "path": "198"
    },
    "888": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "MSTORE",
      "path": "198"
    },
    "889": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "891": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x4"
    },
    "893": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "DUP3",
      "path": "198"
    },
    "894": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "ADD",
      "path": "198"
    },
    "895": {
      "op": "MSTORE"
    },
    "896": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "898": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "900": {
      "op": "DUP3"
    },
    "901": {
      "op": "ADD"
    },
    "902": {
      "op": "MSTORE"
    },
    "903": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "936": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "938": {
      "op": "DUP3"
    },
    "939": {
      "op": "ADD"
    },
    "940": {
      "op": "MSTORE"
    },
    "941": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "948": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "950": {
      "op": "SHL"
    },
    "951": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "953": {
      "op": "DUP3"
    },
    "954": {
      "op": "ADD"
    },
    "955": {
      "op": "MSTORE"
    },
    "956": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "958": {
      "op": "ADD"
    },
    "959": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x1C1"
    },
    "962": {
      "op": "JUMP"
    },
    "963": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5122,
        5203
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "964": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "966": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "968": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "970": {
      "op": "SHL"
    },
    "971": {
      "op": "SUB"
    },
    "972": {
      "fn": "Address.isContract",
      "offset": [
        1450,
        1469
      ],
      "op": "DUP6",
      "path": "198",
      "statement": 10
    },
    "973": {
      "fn": "Address.isContract",
      "offset": [
        1450,
        1469
      ],
      "op": "AND",
      "path": "198"
    },
    "974": {
      "fn": "Address.isContract",
      "offset": [
        1450,
        1469
      ],
      "op": "EXTCODESIZE",
      "path": "198"
    },
    "975": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "PUSH2",
      "path": "198",
      "statement": 11,
      "value": "0x41A"
    },
    "978": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "JUMPI",
      "path": "198"
    },
    "979": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "981": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "982": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "986": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "988": {
      "op": "SHL"
    },
    "989": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "DUP2",
      "path": "198"
    },
    "990": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "MSTORE",
      "path": "198"
    },
    "991": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "993": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x4"
    },
    "995": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "DUP3",
      "path": "198"
    },
    "996": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "ADD",
      "path": "198"
    },
    "997": {
      "op": "MSTORE"
    },
    "998": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "1000": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1002": {
      "op": "DUP3"
    },
    "1003": {
      "op": "ADD"
    },
    "1004": {
      "op": "MSTORE"
    },
    "1005": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "1038": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1040": {
      "op": "DUP3"
    },
    "1041": {
      "op": "ADD"
    },
    "1042": {
      "op": "MSTORE"
    },
    "1043": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1045": {
      "op": "ADD"
    },
    "1046": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x1C1"
    },
    "1049": {
      "op": "JUMP"
    },
    "1050": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5213,
        5273
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "1051": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5285,
        5297
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x0"
    },
    "1053": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5299,
        5322
      ],
      "op": "DUP1",
      "path": "198"
    },
    "1054": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5332
      ],
      "op": "DUP7",
      "path": "198"
    },
    "1055": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1057": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1059": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1061": {
      "op": "SHL"
    },
    "1062": {
      "op": "SUB"
    },
    "1063": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5337
      ],
      "op": "AND",
      "path": "198"
    },
    "1064": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5345,
        5350
      ],
      "op": "DUP6",
      "path": "198"
    },
    "1065": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5352,
        5356
      ],
      "op": "DUP8",
      "path": "198"
    },
    "1066": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "1068": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "1069": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x436"
    },
    "1072": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "SWAP2",
      "path": "198"
    },
    "1073": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "SWAP1",
      "path": "198"
    },
    "1074": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x627"
    },
    "1077": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5326,
        5357
      ],
      "op": "JUMP",
      "path": "198"
    },
    "1078": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "1079": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x0"
    },
    "1081": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "1083": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "1084": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP1",
      "path": "198"
    },
    "1085": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP4",
      "path": "198"
    },
    "1086": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "SUB",
      "path": "198"
    },
    "1087": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP2",
      "path": "198"
    },
    "1088": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP6",
      "path": "198"
    },
    "1089": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP8",
      "path": "198"
    },
    "1090": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "GAS",
      "path": "198"
    },
    "1091": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "CALL",
      "path": "198"
    },
    "1092": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "SWAP3",
      "path": "198"
    },
    "1093": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "POP",
      "path": "198"
    },
    "1094": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "POP",
      "path": "198"
    },
    "1095": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "POP",
      "path": "198"
    },
    "1096": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "RETURNDATASIZE",
      "path": "198"
    },
    "1097": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP1",
      "path": "198"
    },
    "1098": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x0"
    },
    "1100": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP2",
      "path": "198"
    },
    "1101": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "EQ",
      "path": "198"
    },
    "1102": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x473"
    },
    "1105": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "JUMPI",
      "path": "198"
    },
    "1106": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "1108": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "1109": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "SWAP2",
      "path": "198"
    },
    "1110": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "POP",
      "path": "198"
    },
    "1111": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x1F"
    },
    "1113": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "NOT",
      "path": "198"
    },
    "1114": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x3F"
    },
    "1116": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "RETURNDATASIZE",
      "path": "198"
    },
    "1117": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "ADD",
      "path": "198"
    },
    "1118": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "AND",
      "path": "198"
    },
    "1119": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP3",
      "path": "198"
    },
    "1120": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "ADD",
      "path": "198"
    },
    "1121": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "1123": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "MSTORE",
      "path": "198"
    },
    "1124": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "RETURNDATASIZE",
      "path": "198"
    },
    "1125": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP3",
      "path": "198"
    },
    "1126": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "MSTORE",
      "path": "198"
    },
    "1127": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "RETURNDATASIZE",
      "path": "198"
    },
    "1128": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x0"
    },
    "1130": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x20"
    },
    "1132": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "DUP5",
      "path": "198"
    },
    "1133": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "ADD",
      "path": "198"
    },
    "1134": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "RETURNDATACOPY",
      "path": "198"
    },
    "1135": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x478"
    },
    "1138": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "JUMP",
      "path": "198"
    },
    "1139": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "1140": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x60"
    },
    "1142": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "SWAP2",
      "path": "198"
    },
    "1143": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "POP",
      "path": "198"
    },
    "1144": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "1145": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5326,
        5357
      ],
      "op": "POP",
      "path": "198"
    },
    "1146": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5284,
        5357
      ],
      "op": "SWAP2",
      "path": "198"
    },
    "1147": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5284,
        5357
      ],
      "op": "POP",
      "path": "198"
    },
    "1148": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5284,
        5357
      ],
      "op": "SWAP2",
      "path": "198"
    },
    "1149": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5284,
        5357
      ],
      "op": "POP",
      "path": "198"
    },
    "1150": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5374,
        5425
      ],
      "op": "PUSH2",
      "path": "198",
      "statement": 12,
      "value": "0x488"
    },
    "1153": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5391,
        5398
      ],
      "op": "DUP3",
      "path": "198"
    },
    "1154": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5400,
        5410
      ],
      "op": "DUP3",
      "path": "198"
    },
    "1155": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5412,
        5424
      ],
      "op": "DUP7",
      "path": "198"
    },
    "1156": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5374,
        5390
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x493"
    },
    "1159": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5374,
        5425
      ],
      "op": "JUMP",
      "path": "198"
    },
    "1160": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5374,
        5425
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "1161": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5367,
        5425
      ],
      "op": "SWAP8",
      "path": "198"
    },
    "1162": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4933,
        5432
      ],
      "op": "SWAP7",
      "path": "198"
    },
    "1163": {
      "op": "POP"
    },
    "1164": {
      "op": "POP"
    },
    "1165": {
      "op": "POP"
    },
    "1166": {
      "op": "POP"
    },
    "1167": {
      "op": "POP"
    },
    "1168": {
      "op": "POP"
    },
    "1169": {
      "op": "POP"
    },
    "1170": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4933,
        5432
      ],
      "op": "JUMP",
      "path": "198"
    },
    "1171": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7546,
        8238
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "1172": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7692,
        7704
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x60"
    },
    "1174": {
      "branch": 17,
      "fn": "Address.verifyCallResult",
      "offset": [
        7720,
        7727
      ],
      "op": "DUP4",
      "path": "198"
    },
    "1175": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7716,
        8232
      ],
      "op": "ISZERO",
      "path": "198"
    },
    "1176": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7716,
        8232
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x4A2"
    },
    "1179": {
      "branch": 17,
      "fn": "Address.verifyCallResult",
      "offset": [
        7716,
        8232
      ],
      "op": "JUMPI",
      "path": "198"
    },
    "1180": {
      "op": "POP"
    },
    "1181": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7750,
        7760
      ],
      "op": "DUP2",
      "path": "198",
      "statement": 13
    },
    "1182": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7743,
        7760
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x35B"
    },
    "1185": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7743,
        7760
      ],
      "op": "JUMP",
      "path": "198"
    },
    "1186": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7716,
        8232
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "1187": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7861,
        7878
      ],
      "op": "DUP3",
      "path": "198"
    },
    "1188": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7861,
        7878
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "1189": {
      "branch": 18,
      "fn": "Address.verifyCallResult",
      "offset": [
        7861,
        7882
      ],
      "op": "ISZERO",
      "path": "198"
    },
    "1190": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7857,
        8222
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x4B2"
    },
    "1193": {
      "branch": 18,
      "fn": "Address.verifyCallResult",
      "offset": [
        7857,
        8222
      ],
      "op": "JUMPI",
      "path": "198"
    },
    "1194": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8055,
        8065
      ],
      "op": "DUP3",
      "path": "198"
    },
    "1195": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8049,
        8066
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "1196": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8115,
        8130
      ],
      "op": "DUP1",
      "path": "198"
    },
    "1197": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8102,
        8112
      ],
      "op": "DUP5",
      "path": "198"
    },
    "1198": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8098,
        8100
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x20"
    },
    "1200": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8094,
        8113
      ],
      "op": "ADD",
      "path": "198"
    },
    "1201": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8087,
        8131
      ],
      "op": "REVERT",
      "path": "198"
    },
    "1202": {
      "fn": "Address.verifyCallResult",
      "offset": [
        7857,
        8222
      ],
      "op": "JUMPDEST",
      "path": "198"
    },
    "1203": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8194,
        8206
      ],
      "op": "DUP2",
      "path": "198",
      "statement": 14
    },
    "1204": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x40"
    },
    "1206": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "MLOAD",
      "path": "198"
    },
    "1207": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1211": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1213": {
      "op": "SHL"
    },
    "1214": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "DUP2",
      "path": "198"
    },
    "1215": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "MSTORE",
      "path": "198"
    },
    "1216": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "PUSH1",
      "path": "198",
      "value": "0x4"
    },
    "1218": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "ADD",
      "path": "198"
    },
    "1219": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x1C1"
    },
    "1222": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "SWAP2",
      "path": "198"
    },
    "1223": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "SWAP1",
      "path": "198"
    },
    "1224": {
      "fn": "Address.verifyCallResult",
      "offset": [
        8187,
        8207
      ],
      "op": "PUSH2",
      "path": "198",
      "value": "0x643"
    },
    "1227": {
      "fn": "Address.verifyCallResult",
      "jump": "i",
      "offset": [
        8187,
        8207
      ],
      "op": "JUMP",
      "path": "198"
    },
    "1228": {
      "op": "JUMPDEST"
    },
    "1229": {
      "op": "DUP1"
    },
    "1230": {
      "op": "CALLDATALOAD"
    },
    "1231": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1233": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1235": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1237": {
      "op": "SHL"
    },
    "1238": {
      "op": "SUB"
    },
    "1239": {
      "op": "DUP2"
    },
    "1240": {
      "op": "AND"
    },
    "1241": {
      "op": "DUP2"
    },
    "1242": {
      "op": "EQ"
    },
    "1243": {
      "op": "PUSH2",
      "value": "0x1CA"
    },
    "1246": {
      "op": "JUMPI"
    },
    "1247": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1249": {
      "op": "DUP1"
    },
    "1250": {
      "op": "REVERT"
    },
    "1251": {
      "op": "JUMPDEST"
    },
    "1252": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1254": {
      "op": "DUP1"
    },
    "1255": {
      "op": "DUP4"
    },
    "1256": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1258": {
      "op": "DUP5"
    },
    "1259": {
      "op": "ADD"
    },
    "1260": {
      "op": "SLT"
    },
    "1261": {
      "op": "PUSH2",
      "value": "0x4F5"
    },
    "1264": {
      "op": "JUMPI"
    },
    "1265": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1267": {
      "op": "DUP1"
    },
    "1268": {
      "op": "REVERT"
    },
    "1269": {
      "op": "JUMPDEST"
    },
    "1270": {
      "op": "POP"
    },
    "1271": {
      "op": "DUP2"
    },
    "1272": {
      "op": "CALLDATALOAD"
    },
    "1273": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1282": {
      "op": "DUP2"
    },
    "1283": {
      "op": "GT"
    },
    "1284": {
      "op": "ISZERO"
    },
    "1285": {
      "op": "PUSH2",
      "value": "0x50D"
    },
    "1288": {
      "op": "JUMPI"
    },
    "1289": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1291": {
      "op": "DUP1"
    },
    "1292": {
      "op": "REVERT"
    },
    "1293": {
      "op": "JUMPDEST"
    },
    "1294": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1296": {
      "op": "DUP4"
    },
    "1297": {
      "op": "ADD"
    },
    "1298": {
      "op": "SWAP2"
    },
    "1299": {
      "op": "POP"
    },
    "1300": {
      "op": "DUP4"
    },
    "1301": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1303": {
      "op": "DUP3"
    },
    "1304": {
      "op": "DUP6"
    },
    "1305": {
      "op": "ADD"
    },
    "1306": {
      "op": "ADD"
    },
    "1307": {
      "op": "GT"
    },
    "1308": {
      "op": "ISZERO"
    },
    "1309": {
      "op": "PUSH2",
      "value": "0x525"
    },
    "1312": {
      "op": "JUMPI"
    },
    "1313": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1315": {
      "op": "DUP1"
    },
    "1316": {
      "op": "REVERT"
    },
    "1317": {
      "op": "JUMPDEST"
    },
    "1318": {
      "op": "SWAP3"
    },
    "1319": {
      "op": "POP"
    },
    "1320": {
      "op": "SWAP3"
    },
    "1321": {
      "op": "SWAP1"
    },
    "1322": {
      "op": "POP"
    },
    "1323": {
      "jump": "o",
      "op": "JUMP"
    },
    "1324": {
      "op": "JUMPDEST"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1327": {
      "op": "DUP1"
    },
    "1328": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1330": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1332": {
      "op": "DUP5"
    },
    "1333": {
      "op": "DUP7"
    },
    "1334": {
      "op": "SUB"
    },
    "1335": {
      "op": "SLT"
    },
    "1336": {
      "op": "ISZERO"
    },
    "1337": {
      "op": "PUSH2",
      "value": "0x541"
    },
    "1340": {
      "op": "JUMPI"
    },
    "1341": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1343": {
      "op": "DUP1"
    },
    "1344": {
      "op": "REVERT"
    },
    "1345": {
      "op": "JUMPDEST"
    },
    "1346": {
      "op": "PUSH2",
      "value": "0x54A"
    },
    "1349": {
      "op": "DUP5"
    },
    "1350": {
      "op": "PUSH2",
      "value": "0x4CC"
    },
    "1353": {
      "jump": "i",
      "op": "JUMP"
    },
    "1354": {
      "op": "JUMPDEST"
    },
    "1355": {
      "op": "SWAP3"
    },
    "1356": {
      "op": "POP"
    },
    "1357": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1359": {
      "op": "DUP5"
    },
    "1360": {
      "op": "ADD"
    },
    "1361": {
      "op": "CALLDATALOAD"
    },
    "1362": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1371": {
      "op": "DUP2"
    },
    "1372": {
      "op": "GT"
    },
    "1373": {
      "op": "ISZERO"
    },
    "1374": {
      "op": "PUSH2",
      "value": "0x566"
    },
    "1377": {
      "op": "JUMPI"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1380": {
      "op": "DUP1"
    },
    "1381": {
      "op": "REVERT"
    },
    "1382": {
      "op": "JUMPDEST"
    },
    "1383": {
      "op": "PUSH2",
      "value": "0x572"
    },
    "1386": {
      "op": "DUP7"
    },
    "1387": {
      "op": "DUP3"
    },
    "1388": {
      "op": "DUP8"
    },
    "1389": {
      "op": "ADD"
    },
    "1390": {
      "op": "PUSH2",
      "value": "0x4E3"
    },
    "1393": {
      "jump": "i",
      "op": "JUMP"
    },
    "1394": {
      "op": "JUMPDEST"
    },
    "1395": {
      "op": "SWAP5"
    },
    "1396": {
      "op": "SWAP8"
    },
    "1397": {
      "op": "SWAP1"
    },
    "1398": {
      "op": "SWAP7"
    },
    "1399": {
      "op": "POP"
    },
    "1400": {
      "op": "SWAP4"
    },
    "1401": {
      "op": "SWAP5"
    },
    "1402": {
      "op": "POP"
    },
    "1403": {
      "op": "POP"
    },
    "1404": {
      "op": "POP"
    },
    "1405": {
      "op": "POP"
    },
    "1406": {
      "jump": "o",
      "op": "JUMP"
    },
    "1407": {
      "op": "JUMPDEST"
    },
    "1408": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1410": {
      "op": "DUP1"
    },
    "1411": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1413": {
      "op": "DUP4"
    },
    "1414": {
      "op": "DUP6"
    },
    "1415": {
      "op": "SUB"
    },
    "1416": {
      "op": "SLT"
    },
    "1417": {
      "op": "ISZERO"
    },
    "1418": {
      "op": "PUSH2",
      "value": "0x592"
    },
    "1421": {
      "op": "JUMPI"
    },
    "1422": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1424": {
      "op": "DUP1"
    },
    "1425": {
      "op": "REVERT"
    },
    "1426": {
      "op": "JUMPDEST"
    },
    "1427": {
      "op": "PUSH2",
      "value": "0x59B"
    },
    "1430": {
      "op": "DUP4"
    },
    "1431": {
      "op": "PUSH2",
      "value": "0x4CC"
    },
    "1434": {
      "jump": "i",
      "op": "JUMP"
    },
    "1435": {
      "op": "JUMPDEST"
    },
    "1436": {
      "op": "SWAP5"
    },
    "1437": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1439": {
      "op": "SWAP4"
    },
    "1440": {
      "op": "SWAP1"
    },
    "1441": {
      "op": "SWAP4"
    },
    "1442": {
      "op": "ADD"
    },
    "1443": {
      "op": "CALLDATALOAD"
    },
    "1444": {
      "op": "SWAP4"
    },
    "1445": {
      "op": "POP"
    },
    "1446": {
      "op": "POP"
    },
    "1447": {
      "op": "POP"
    },
    "1448": {
      "jump": "o",
      "op": "JUMP"
    },
    "1449": {
      "op": "JUMPDEST"
    },
    "1450": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1452": {
      "op": "DUP1"
    },
    "1453": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1455": {
      "op": "DUP1"
    },
    "1456": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1458": {
      "op": "DUP6"
    },
    "1459": {
      "op": "DUP8"
    },
    "1460": {
      "op": "SUB"
    },
    "1461": {
      "op": "SLT"
    },
    "1462": {
      "op": "ISZERO"
    },
    "1463": {
      "op": "PUSH2",
      "value": "0x5BF"
    },
    "1466": {
      "op": "JUMPI"
    },
    "1467": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1469": {
      "op": "DUP1"
    },
    "1470": {
      "op": "REVERT"
    },
    "1471": {
      "op": "JUMPDEST"
    },
    "1472": {
      "op": "PUSH2",
      "value": "0x5C8"
    },
    "1475": {
      "op": "DUP6"
    },
    "1476": {
      "op": "PUSH2",
      "value": "0x4CC"
    },
    "1479": {
      "jump": "i",
      "op": "JUMP"
    },
    "1480": {
      "op": "JUMPDEST"
    },
    "1481": {
      "op": "SWAP4"
    },
    "1482": {
      "op": "POP"
    },
    "1483": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1485": {
      "op": "DUP6"
    },
    "1486": {
      "op": "ADD"
    },
    "1487": {
      "op": "CALLDATALOAD"
    },
    "1488": {
      "op": "SWAP3"
    },
    "1489": {
      "op": "POP"
    },
    "1490": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1492": {
      "op": "DUP6"
    },
    "1493": {
      "op": "ADD"
    },
    "1494": {
      "op": "CALLDATALOAD"
    },
    "1495": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1504": {
      "op": "DUP2"
    },
    "1505": {
      "op": "GT"
    },
    "1506": {
      "op": "ISZERO"
    },
    "1507": {
      "op": "PUSH2",
      "value": "0x5EB"
    },
    "1510": {
      "op": "JUMPI"
    },
    "1511": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1513": {
      "op": "DUP1"
    },
    "1514": {
      "op": "REVERT"
    },
    "1515": {
      "op": "JUMPDEST"
    },
    "1516": {
      "op": "PUSH2",
      "value": "0x5F7"
    },
    "1519": {
      "op": "DUP8"
    },
    "1520": {
      "op": "DUP3"
    },
    "1521": {
      "op": "DUP9"
    },
    "1522": {
      "op": "ADD"
    },
    "1523": {
      "op": "PUSH2",
      "value": "0x4E3"
    },
    "1526": {
      "jump": "i",
      "op": "JUMP"
    },
    "1527": {
      "op": "JUMPDEST"
    },
    "1528": {
      "op": "SWAP6"
    },
    "1529": {
      "op": "SWAP9"
    },
    "1530": {
      "op": "SWAP5"
    },
    "1531": {
      "op": "SWAP8"
    },
    "1532": {
      "op": "POP"
    },
    "1533": {
      "op": "SWAP6"
    },
    "1534": {
      "op": "POP"
    },
    "1535": {
      "op": "POP"
    },
    "1536": {
      "op": "POP"
    },
    "1537": {
      "op": "POP"
    },
    "1538": {
      "jump": "o",
      "op": "JUMP"
    },
    "1539": {
      "op": "JUMPDEST"
    },
    "1540": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1542": {
      "op": "JUMPDEST"
    },
    "1543": {
      "op": "DUP4"
    },
    "1544": {
      "op": "DUP2"
    },
    "1545": {
      "op": "LT"
    },
    "1546": {
      "op": "ISZERO"
    },
    "1547": {
      "op": "PUSH2",
      "value": "0x61E"
    },
    "1550": {
      "op": "JUMPI"
    },
    "1551": {
      "op": "DUP2"
    },
    "1552": {
      "op": "DUP2"
    },
    "1553": {
      "op": "ADD"
    },
    "1554": {
      "op": "MLOAD"
    },
    "1555": {
      "op": "DUP4"
    },
    "1556": {
      "op": "DUP3"
    },
    "1557": {
      "op": "ADD"
    },
    "1558": {
      "op": "MSTORE"
    },
    "1559": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1561": {
      "op": "ADD"
    },
    "1562": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1565": {
      "op": "JUMP"
    },
    "1566": {
      "op": "JUMPDEST"
    },
    "1567": {
      "op": "POP"
    },
    "1568": {
      "op": "POP"
    },
    "1569": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1571": {
      "op": "SWAP2"
    },
    "1572": {
      "op": "ADD"
    },
    "1573": {
      "op": "MSTORE"
    },
    "1574": {
      "jump": "o",
      "op": "JUMP"
    },
    "1575": {
      "op": "JUMPDEST"
    },
    "1576": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1578": {
      "op": "DUP3"
    },
    "1579": {
      "op": "MLOAD"
    },
    "1580": {
      "op": "PUSH2",
      "value": "0x639"
    },
    "1583": {
      "op": "DUP2"
    },
    "1584": {
      "op": "DUP5"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1587": {
      "op": "DUP8"
    },
    "1588": {
      "op": "ADD"
    },
    "1589": {
      "op": "PUSH2",
      "value": "0x603"
    },
    "1592": {
      "jump": "i",
      "op": "JUMP"
    },
    "1593": {
      "op": "JUMPDEST"
    },
    "1594": {
      "op": "SWAP2"
    },
    "1595": {
      "op": "SWAP1"
    },
    "1596": {
      "op": "SWAP2"
    },
    "1597": {
      "op": "ADD"
    },
    "1598": {
      "op": "SWAP3"
    },
    "1599": {
      "op": "SWAP2"
    },
    "1600": {
      "op": "POP"
    },
    "1601": {
      "op": "POP"
    },
    "1602": {
      "jump": "o",
      "op": "JUMP"
    },
    "1603": {
      "op": "JUMPDEST"
    },
    "1604": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1606": {
      "op": "DUP2"
    },
    "1607": {
      "op": "MSTORE"
    },
    "1608": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1610": {
      "op": "DUP3"
    },
    "1611": {
      "op": "MLOAD"
    },
    "1612": {
      "op": "DUP1"
    },
    "1613": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1615": {
      "op": "DUP5"
    },
    "1616": {
      "op": "ADD"
    },
    "1617": {
      "op": "MSTORE"
    },
    "1618": {
      "op": "PUSH2",
      "value": "0x662"
    },
    "1621": {
      "op": "DUP2"
    },
    "1622": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1624": {
      "op": "DUP6"
    },
    "1625": {
      "op": "ADD"
    },
    "1626": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1628": {
      "op": "DUP8"
    },
    "1629": {
      "op": "ADD"
    },
    "1630": {
      "op": "PUSH2",
      "value": "0x603"
    },
    "1633": {
      "jump": "i",
      "op": "JUMP"
    },
    "1634": {
      "op": "JUMPDEST"
    },
    "1635": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1637": {
      "op": "ADD"
    },
    "1638": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1640": {
      "op": "NOT"
    },
    "1641": {
      "op": "AND"
    },
    "1642": {
      "op": "SWAP2"
    },
    "1643": {
      "op": "SWAP1"
    },
    "1644": {
      "op": "SWAP2"
    },
    "1645": {
      "op": "ADD"
    },
    "1646": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1648": {
      "op": "ADD"
    },
    "1649": {
      "op": "SWAP3"
    },
    "1650": {
      "op": "SWAP2"
    },
    "1651": {
      "op": "POP"
    },
    "1652": {
      "op": "POP"
    },
    "1653": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "f719e62d5e8004c9890db89aa8c5e0bdfdbe5bc8",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/Clones.sol\";\nimport \"../utils/Address.sol\";\n\ncontract ClonesMock {\n    using Address for address;\n    using Clones for address;\n\n    event NewInstance(address instance);\n\n    function clone(address implementation, bytes calldata initdata) public payable {\n        _initAndEmit(implementation.clone(), initdata);\n    }\n\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        bytes calldata initdata\n    ) public payable {\n        _initAndEmit(implementation.cloneDeterministic(salt), initdata);\n    }\n\n    function predictDeterministicAddress(address implementation, bytes32 salt) public view returns (address predicted) {\n        return implementation.predictDeterministicAddress(salt);\n    }\n\n    function _initAndEmit(address instance, bytes memory initdata) private {\n        if (initdata.length > 0) {\n            instance.functionCallWithValue(initdata, msg.value);\n        }\n        emit NewInstance(instance);\n    }\n}\n",
  "sourceMap": "120:919:56:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin-solidity/contracts/mocks/ClonesMock.sol",
  "type": "contract"
}