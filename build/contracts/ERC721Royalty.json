{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "179": "contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
    "180": "contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol",
    "185": "contracts/openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Royalty.sol",
    "188": "contracts/openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol",
    "197": "contracts/openzeppelin-solidity/contracts/token/common/ERC2981.sol",
    "202": "contracts/openzeppelin-solidity/contracts/utils/Context.sol",
    "216": "contracts/openzeppelin-solidity/contracts/utils/introspection/ERC165.sol",
    "220": "contracts/openzeppelin-solidity/contracts/utils/introspection/IERC165.sol",
    "37": "contracts/openzeppelin-solidity/contracts/interfaces/IERC2981.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Royalty.sol",
    "exportedSymbols": {
      "Address": [
        29802
      ],
      "Context": [
        30190
      ],
      "ERC165": [
        31974
      ],
      "ERC2981": [
        29507
      ],
      "ERC721": [
        26902
      ],
      "ERC721Royalty": [
        27487
      ],
      "IERC165": [
        32298
      ],
      "IERC2981": [
        10618
      ],
      "IERC721": [
        27018
      ],
      "IERC721Metadata": [
        27673
      ],
      "IERC721Receiver": [
        27036
      ],
      "Strings": [
        30693
      ]
    },
    "id": 27488,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 27443,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "110:23:185"
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "file": "../ERC721.sol",
        "id": 27444,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27488,
        "sourceUnit": 26903,
        "src": "135:23:185",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/token/common/ERC2981.sol",
        "file": "../../common/ERC2981.sol",
        "id": 27445,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27488,
        "sourceUnit": 29508,
        "src": "159:34:185",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/utils/introspection/ERC165.sol",
        "file": "../../../utils/introspection/ERC165.sol",
        "id": 27446,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27488,
        "sourceUnit": 31975,
        "src": "194:49:185",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 27448,
              "name": "ERC2981",
              "nameLocations": [
                "1001:7:185"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29507,
              "src": "1001:7:185"
            },
            "id": 27449,
            "nodeType": "InheritanceSpecifier",
            "src": "1001:7:185"
          },
          {
            "baseName": {
              "id": 27450,
              "name": "ERC721",
              "nameLocations": [
                "1010:6:185"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26902,
              "src": "1010:6:185"
            },
            "id": 27451,
            "nodeType": "InheritanceSpecifier",
            "src": "1010:6:185"
          }
        ],
        "canonicalName": "ERC721Royalty",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 27447,
          "nodeType": "StructuredDocumentation",
          "src": "245:720:185",
          "text": " @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\n information.\n Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n _Available since v4.5._"
        },
        "fullyImplemented": true,
        "id": 27487,
        "linearizedBaseContracts": [
          27487,
          26902,
          27673,
          27018,
          29507,
          31974,
          10618,
          32298,
          30190
        ],
        "name": "ERC721Royalty",
        "nameLocation": "984:13:185",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              26130,
              29355
            ],
            "body": {
              "id": 27467,
              "nodeType": "Block",
              "src": "1192:60:185",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 27464,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27454,
                        "src": "1233:11:185",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "expression": {
                        "id": 27462,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "1209:5:185",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721Royalty_$27487_$",
                          "typeString": "type(contract super ERC721Royalty)"
                        }
                      },
                      "id": 27463,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1215:17:185",
                      "memberName": "supportsInterface",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 26130,
                      "src": "1209:23:185",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                        "typeString": "function (bytes4) view returns (bool)"
                      }
                    },
                    "id": 27465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1209:36:185",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 27461,
                  "id": 27466,
                  "nodeType": "Return",
                  "src": "1202:43:185"
                }
              ]
            },
            "documentation": {
              "id": 27452,
              "nodeType": "StructuredDocumentation",
              "src": "1023:56:185",
              "text": " @dev See {IERC165-supportsInterface}."
            },
            "functionSelector": "01ffc9a7",
            "id": 27468,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "1093:17:185",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 27458,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 27456,
                  "name": "ERC721",
                  "nameLocations": [
                    "1160:6:185"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 26902,
                  "src": "1160:6:185"
                },
                {
                  "id": 27457,
                  "name": "ERC2981",
                  "nameLocations": [
                    "1168:7:185"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29507,
                  "src": "1168:7:185"
                }
              ],
              "src": "1151:25:185"
            },
            "parameters": {
              "id": 27455,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27454,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "1118:11:185",
                  "nodeType": "VariableDeclaration",
                  "scope": 27468,
                  "src": "1111:18:185",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 27453,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1111:6:185",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1110:20:185"
            },
            "returnParameters": {
              "id": 27461,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27460,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 27468,
                  "src": "1186:4:185",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 27459,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1186:4:185",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1185:6:185"
            },
            "scope": 27487,
            "src": "1084:168:185",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              26686
            ],
            "body": {
              "id": 27485,
              "nodeType": "Block",
              "src": "1437:74:185",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 27478,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27471,
                        "src": "1459:7:185",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 27475,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "1447:5:185",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721Royalty_$27487_$",
                          "typeString": "type(contract super ERC721Royalty)"
                        }
                      },
                      "id": 27477,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1453:5:185",
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 26686,
                      "src": "1447:11:185",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 27479,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1447:20:185",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27480,
                  "nodeType": "ExpressionStatement",
                  "src": "1447:20:185"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 27482,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27471,
                        "src": "1496:7:185",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 27481,
                      "name": "_resetTokenRoyalty",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29506,
                      "src": "1477:18:185",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 27483,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1477:27:185",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27484,
                  "nodeType": "ExpressionStatement",
                  "src": "1477:27:185"
                }
              ]
            },
            "documentation": {
              "id": 27469,
              "nodeType": "StructuredDocumentation",
              "src": "1258:116:185",
              "text": " @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token."
            },
            "id": 27486,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nameLocation": "1388:5:185",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 27473,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1428:8:185"
            },
            "parameters": {
              "id": 27472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27471,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1402:7:185",
                  "nodeType": "VariableDeclaration",
                  "scope": 27486,
                  "src": "1394:15:185",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27470,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1394:7:185",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1393:17:185"
            },
            "returnParameters": {
              "id": 27474,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1437:0:185"
            },
            "scope": 27487,
            "src": "1379:132:185",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 27488,
        "src": "966:547:185",
        "usedErrors": [],
        "usedEvents": [
          26917,
          26926,
          26935
        ]
      }
    ],
    "src": "110:1404:185"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.21+commit.d9974bed"
  },
  "contractName": "ERC721Royalty",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "Context",
    "ERC165",
    "ERC2981",
    "ERC721",
    "IERC165",
    "IERC2981",
    "IERC721",
    "IERC721Metadata"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "details": "Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported. _Available since v4.5._",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "offset": [
    966,
    1513
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "be9519421c84c9c5d8d77fccc82fa20c1e99c9d0",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Royalty.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../common/ERC2981.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\n * information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC721Royalty is ERC2981, ERC721 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n        _resetTokenRoyalty(tokenId);\n    }\n}\n",
  "sourceMap": "",
  "sourcePath": "contracts/openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Royalty.sol",
  "type": "contract"
}