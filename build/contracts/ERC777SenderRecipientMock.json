{
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "BeforeTokenTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toBalance",
          "type": "uint256"
        }
      ],
      "name": "TokensReceivedCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toBalance",
          "type": "uint256"
        }
      ],
      "name": "TokensToSendCalled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC777",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "recipientFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "registerRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "registerSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC777",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "senderFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "shouldRevert",
          "type": "bool"
        }
      ],
      "name": "setShouldRevertReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "shouldRevert",
          "type": "bool"
        }
      ],
      "name": "setShouldRevertSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensToSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "193": "contracts/openzeppelin-solidity/contracts/token/ERC777/IERC777.sol",
    "194": "contracts/openzeppelin-solidity/contracts/token/ERC777/IERC777Recipient.sol",
    "195": "contracts/openzeppelin-solidity/contracts/token/ERC777/IERC777Sender.sol",
    "202": "contracts/openzeppelin-solidity/contracts/utils/Context.sol",
    "219": "contracts/openzeppelin-solidity/contracts/utils/introspection/ERC1820Implementer.sol",
    "221": "contracts/openzeppelin-solidity/contracts/utils/introspection/IERC1820Implementer.sol",
    "222": "contracts/openzeppelin-solidity/contracts/utils/introspection/IERC1820Registry.sol",
    "99": "contracts/openzeppelin-solidity/contracts/mocks/ERC777SenderRecipientMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-solidity/contracts/mocks/ERC777SenderRecipientMock.sol",
    "exportedSymbols": {
      "Context": [
        30190
      ],
      "ERC1820Implementer": [
        32286
      ],
      "ERC777SenderRecipientMock": [
        14634
      ],
      "IERC1820Implementer": [
        32312
      ],
      "IERC1820Registry": [
        32402
      ],
      "IERC777": [
        29234
      ],
      "IERC777Recipient": [
        29254
      ],
      "IERC777Sender": [
        29274
      ]
    },
    "id": 14635,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 14290,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:99"
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/token/ERC777/IERC777.sol",
        "file": "../token/ERC777/IERC777.sol",
        "id": 14291,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 14635,
        "sourceUnit": 29235,
        "src": "58:37:99",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/token/ERC777/IERC777Sender.sol",
        "file": "../token/ERC777/IERC777Sender.sol",
        "id": 14292,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 14635,
        "sourceUnit": 29275,
        "src": "96:43:99",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/token/ERC777/IERC777Recipient.sol",
        "file": "../token/ERC777/IERC777Recipient.sol",
        "id": 14293,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 14635,
        "sourceUnit": 29255,
        "src": "140:46:99",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/utils/Context.sol",
        "file": "../utils/Context.sol",
        "id": 14294,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 14635,
        "sourceUnit": 30191,
        "src": "187:30:99",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/utils/introspection/IERC1820Registry.sol",
        "file": "../utils/introspection/IERC1820Registry.sol",
        "id": 14295,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 14635,
        "sourceUnit": 32403,
        "src": "218:53:99",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/utils/introspection/ERC1820Implementer.sol",
        "file": "../utils/introspection/ERC1820Implementer.sol",
        "id": 14296,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 14635,
        "sourceUnit": 32287,
        "src": "272:55:99",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 14297,
              "name": "Context",
              "nameLocations": [
                "367:7:99"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 30190,
              "src": "367:7:99"
            },
            "id": 14298,
            "nodeType": "InheritanceSpecifier",
            "src": "367:7:99"
          },
          {
            "baseName": {
              "id": 14299,
              "name": "IERC777Sender",
              "nameLocations": [
                "376:13:99"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29274,
              "src": "376:13:99"
            },
            "id": 14300,
            "nodeType": "InheritanceSpecifier",
            "src": "376:13:99"
          },
          {
            "baseName": {
              "id": 14301,
              "name": "IERC777Recipient",
              "nameLocations": [
                "391:16:99"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29254,
              "src": "391:16:99"
            },
            "id": 14302,
            "nodeType": "InheritanceSpecifier",
            "src": "391:16:99"
          },
          {
            "baseName": {
              "id": 14303,
              "name": "ERC1820Implementer",
              "nameLocations": [
                "409:18:99"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 32286,
              "src": "409:18:99"
            },
            "id": 14304,
            "nodeType": "InheritanceSpecifier",
            "src": "409:18:99"
          }
        ],
        "canonicalName": "ERC777SenderRecipientMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 14634,
        "linearizedBaseContracts": [
          14634,
          32286,
          32312,
          29254,
          29274,
          30190
        ],
        "name": "ERC777SenderRecipientMock",
        "nameLocation": "338:25:99",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "eventSelector": "aa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da85529",
            "id": 14324,
            "name": "TokensToSendCalled",
            "nameLocation": "440:18:99",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 14323,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14306,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "476:8:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "468:16:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14305,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "468:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14308,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "502:4:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "494:12:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14307,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "494:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14310,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "524:2:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "516:10:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14309,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "516:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14312,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "544:6:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "536:14:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14311,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "536:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14314,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "566:4:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "560:10:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14313,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "560:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14316,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "586:12:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "580:18:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14315,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "580:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14318,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "616:5:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "608:13:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14317,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "608:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14320,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fromBalance",
                  "nameLocation": "639:11:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "631:19:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14319,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "631:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14322,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "toBalance",
                  "nameLocation": "668:9:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14324,
                  "src": "660:17:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14321,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "660:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "458:225:99"
            },
            "src": "434:250:99"
          },
          {
            "anonymous": false,
            "eventSelector": "47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e",
            "id": 14344,
            "name": "TokensReceivedCalled",
            "nameLocation": "696:20:99",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 14343,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14326,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "734:8:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "726:16:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14325,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "726:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14328,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "760:4:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "752:12:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14327,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "752:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14330,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "782:2:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "774:10:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14329,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "774:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14332,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "802:6:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "794:14:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14331,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "794:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14334,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "824:4:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "818:10:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14333,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "818:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14336,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "844:12:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "838:18:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14335,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "838:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14338,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "874:5:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "866:13:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14337,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "866:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14340,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fromBalance",
                  "nameLocation": "897:11:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "889:19:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14339,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "889:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14342,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "toBalance",
                  "nameLocation": "926:9:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14344,
                  "src": "918:17:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14341,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "918:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "716:225:99"
            },
            "src": "690:252:99"
          },
          {
            "anonymous": false,
            "eventSelector": "52316ab8e8b0687ce803e403dfe429541bccd4f6c4683ec65d254d382f15a265",
            "id": 14346,
            "name": "BeforeTokenTransfer",
            "nameLocation": "1009:19:99",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 14345,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1028:2:99"
            },
            "src": "1003:28:99"
          },
          {
            "constant": false,
            "id": 14348,
            "mutability": "mutable",
            "name": "_shouldRevertSend",
            "nameLocation": "1050:17:99",
            "nodeType": "VariableDeclaration",
            "scope": 14634,
            "src": "1037:30:99",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 14347,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1037:4:99",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 14350,
            "mutability": "mutable",
            "name": "_shouldRevertReceive",
            "nameLocation": "1086:20:99",
            "nodeType": "VariableDeclaration",
            "scope": 14634,
            "src": "1073:33:99",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 14349,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1073:4:99",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 14356,
            "mutability": "mutable",
            "name": "_erc1820",
            "nameLocation": "1138:8:99",
            "nodeType": "VariableDeclaration",
            "scope": 14634,
            "src": "1113:96:99",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IERC1820Registry_$32402",
              "typeString": "contract IERC1820Registry"
            },
            "typeName": {
              "id": 14352,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 14351,
                "name": "IERC1820Registry",
                "nameLocations": [
                  "1113:16:99"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 32402,
                "src": "1113:16:99"
              },
              "referencedDeclaration": 32402,
              "src": "1113:16:99",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1820Registry_$32402",
                "typeString": "contract IERC1820Registry"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "307831383230613442373631384264453731446365386364633733614142364339353930356661443234",
                  "id": 14354,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1166:42:99",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "value": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 14353,
                "name": "IERC1820Registry",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 32402,
                "src": "1149:16:99",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_contract$_IERC1820Registry_$32402_$",
                  "typeString": "type(contract IERC1820Registry)"
                }
              },
              "id": 14355,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1149:60:99",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1820Registry_$32402",
                "typeString": "contract IERC1820Registry"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 14361,
            "mutability": "constant",
            "name": "_TOKENS_SENDER_INTERFACE_HASH",
            "nameLocation": "1241:29:99",
            "nodeType": "VariableDeclaration",
            "scope": 14634,
            "src": "1216:88:99",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 14357,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1216:7:99",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "455243373737546f6b656e7353656e646572",
                  "id": 14359,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1283:20:99",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895",
                    "typeString": "literal_string \"ERC777TokensSender\""
                  },
                  "value": "ERC777TokensSender"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895",
                    "typeString": "literal_string \"ERC777TokensSender\""
                  }
                ],
                "id": 14358,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "1273:9:99",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 14360,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1273:31:99",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 14366,
            "mutability": "constant",
            "name": "_TOKENS_RECIPIENT_INTERFACE_HASH",
            "nameLocation": "1335:32:99",
            "nodeType": "VariableDeclaration",
            "scope": 14634,
            "src": "1310:94:99",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 14362,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1310:7:99",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "455243373737546f6b656e73526563697069656e74",
                  "id": 14364,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1380:23:99",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_b281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
                    "typeString": "literal_string \"ERC777TokensRecipient\""
                  },
                  "value": "ERC777TokensRecipient"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_b281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
                    "typeString": "literal_string \"ERC777TokensRecipient\""
                  }
                ],
                "id": 14363,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -8,
                "src": "1370:9:99",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 14365,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "nameLocations": [],
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1370:34:99",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "baseFunctions": [
              29273
            ],
            "body": {
              "id": 14425,
              "nodeType": "Block",
              "src": "1619:563:99",
              "statements": [
                {
                  "condition": {
                    "id": 14382,
                    "name": "_shouldRevertSend",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 14348,
                    "src": "1633:17:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14387,
                  "nodeType": "IfStatement",
                  "src": "1629:56:99",
                  "trueBody": {
                    "id": 14386,
                    "nodeType": "Block",
                    "src": "1652:33:99",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 14383,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "1666:6:99",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 14384,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1666:8:99",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 14385,
                        "nodeType": "ExpressionStatement",
                        "src": "1666:8:99"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    14390
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 14390,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "1703:5:99",
                      "nodeType": "VariableDeclaration",
                      "scope": 14425,
                      "src": "1695:13:99",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC777_$29234",
                        "typeString": "contract IERC777"
                      },
                      "typeName": {
                        "id": 14389,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 14388,
                          "name": "IERC777",
                          "nameLocations": [
                            "1695:7:99"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 29234,
                          "src": "1695:7:99"
                        },
                        "referencedDeclaration": 29234,
                        "src": "1695:7:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$29234",
                          "typeString": "contract IERC777"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 14395,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 14392,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30180,
                          "src": "1719:10:99",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 14393,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1719:12:99",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 14391,
                      "name": "IERC777",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29234,
                      "src": "1711:7:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC777_$29234_$",
                        "typeString": "type(contract IERC777)"
                      }
                    },
                    "id": 14394,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1711:21:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC777_$29234",
                      "typeString": "contract IERC777"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1695:37:99"
                },
                {
                  "assignments": [
                    14397
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 14397,
                      "mutability": "mutable",
                      "name": "fromBalance",
                      "nameLocation": "1751:11:99",
                      "nodeType": "VariableDeclaration",
                      "scope": 14425,
                      "src": "1743:19:99",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 14396,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1743:7:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 14402,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 14400,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14370,
                        "src": "1781:4:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 14398,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14390,
                        "src": "1765:5:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$29234",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 14399,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1771:9:99",
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29110,
                      "src": "1765:15:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 14401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1765:21:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1743:43:99"
                },
                {
                  "assignments": [
                    14404
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 14404,
                      "mutability": "mutable",
                      "name": "toBalance",
                      "nameLocation": "1900:9:99",
                      "nodeType": "VariableDeclaration",
                      "scope": 14425,
                      "src": "1892:17:99",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 14403,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1892:7:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 14409,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 14407,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14372,
                        "src": "1928:2:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 14405,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14390,
                        "src": "1912:5:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$29234",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 14406,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1918:9:99",
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29110,
                      "src": "1912:15:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 14408,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1912:19:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1892:39:99"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 14411,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14368,
                        "src": "1979:8:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14412,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14370,
                        "src": "2001:4:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14413,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14372,
                        "src": "2019:2:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14414,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14374,
                        "src": "2035:6:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 14415,
                        "name": "userData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14376,
                        "src": "2055:8:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 14416,
                        "name": "operatorData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14378,
                        "src": "2077:12:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 14419,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14390,
                            "src": "2111:5:99",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC777_$29234",
                              "typeString": "contract IERC777"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IERC777_$29234",
                              "typeString": "contract IERC777"
                            }
                          ],
                          "id": 14418,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2103:7:99",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 14417,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2103:7:99",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 14420,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2103:14:99",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14421,
                        "name": "fromBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14397,
                        "src": "2131:11:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 14422,
                        "name": "toBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14404,
                        "src": "2156:9:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 14410,
                      "name": "TokensToSendCalled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14324,
                      "src": "1947:18:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256,bytes memory,bytes memory,address,uint256,uint256)"
                      }
                    },
                    "id": 14423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1947:228:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14424,
                  "nodeType": "EmitStatement",
                  "src": "1942:233:99"
                }
              ]
            },
            "functionSelector": "75ab9782",
            "id": 14426,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokensToSend",
            "nameLocation": "1420:12:99",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 14380,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1610:8:99"
            },
            "parameters": {
              "id": 14379,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14368,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "1450:8:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14426,
                  "src": "1442:16:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14367,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1442:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14370,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "1476:4:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14426,
                  "src": "1468:12:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14369,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1468:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14372,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1498:2:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14426,
                  "src": "1490:10:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14371,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1490:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14374,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1518:6:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14426,
                  "src": "1510:14:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14373,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1510:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14376,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "1549:8:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14426,
                  "src": "1534:23:99",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14375,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1534:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14378,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "1582:12:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14426,
                  "src": "1567:27:99",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14377,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1567:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1432:168:99"
            },
            "returnParameters": {
              "id": 14381,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1619:0:99"
            },
            "scope": 14634,
            "src": "1411:771:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              29253
            ],
            "body": {
              "id": 14485,
              "nodeType": "Block",
              "src": "2398:568:99",
              "statements": [
                {
                  "condition": {
                    "id": 14442,
                    "name": "_shouldRevertReceive",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 14350,
                    "src": "2412:20:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14447,
                  "nodeType": "IfStatement",
                  "src": "2408:59:99",
                  "trueBody": {
                    "id": 14446,
                    "nodeType": "Block",
                    "src": "2434:33:99",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 14443,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "2448:6:99",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 14444,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2448:8:99",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 14445,
                        "nodeType": "ExpressionStatement",
                        "src": "2448:8:99"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    14450
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 14450,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "2485:5:99",
                      "nodeType": "VariableDeclaration",
                      "scope": 14485,
                      "src": "2477:13:99",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC777_$29234",
                        "typeString": "contract IERC777"
                      },
                      "typeName": {
                        "id": 14449,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 14448,
                          "name": "IERC777",
                          "nameLocations": [
                            "2477:7:99"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 29234,
                          "src": "2477:7:99"
                        },
                        "referencedDeclaration": 29234,
                        "src": "2477:7:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$29234",
                          "typeString": "contract IERC777"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 14455,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 14452,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30180,
                          "src": "2501:10:99",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 14453,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2501:12:99",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 14451,
                      "name": "IERC777",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29234,
                      "src": "2493:7:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC777_$29234_$",
                        "typeString": "type(contract IERC777)"
                      }
                    },
                    "id": 14454,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2493:21:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC777_$29234",
                      "typeString": "contract IERC777"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2477:37:99"
                },
                {
                  "assignments": [
                    14457
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 14457,
                      "mutability": "mutable",
                      "name": "fromBalance",
                      "nameLocation": "2533:11:99",
                      "nodeType": "VariableDeclaration",
                      "scope": 14485,
                      "src": "2525:19:99",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 14456,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2525:7:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 14462,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 14460,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14430,
                        "src": "2563:4:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 14458,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14450,
                        "src": "2547:5:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$29234",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 14459,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2553:9:99",
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29110,
                      "src": "2547:15:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 14461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2547:21:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2525:43:99"
                },
                {
                  "assignments": [
                    14464
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 14464,
                      "mutability": "mutable",
                      "name": "toBalance",
                      "nameLocation": "2682:9:99",
                      "nodeType": "VariableDeclaration",
                      "scope": 14485,
                      "src": "2674:17:99",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 14463,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2674:7:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 14469,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 14467,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14432,
                        "src": "2710:2:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 14465,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14450,
                        "src": "2694:5:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$29234",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 14466,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2700:9:99",
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29110,
                      "src": "2694:15:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 14468,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2694:19:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2674:39:99"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 14471,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14428,
                        "src": "2763:8:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14472,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14430,
                        "src": "2785:4:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14473,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14432,
                        "src": "2803:2:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14474,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14434,
                        "src": "2819:6:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 14475,
                        "name": "userData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14436,
                        "src": "2839:8:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 14476,
                        "name": "operatorData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14438,
                        "src": "2861:12:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 14479,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14450,
                            "src": "2895:5:99",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC777_$29234",
                              "typeString": "contract IERC777"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IERC777_$29234",
                              "typeString": "contract IERC777"
                            }
                          ],
                          "id": 14478,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2887:7:99",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 14477,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2887:7:99",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 14480,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2887:14:99",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14481,
                        "name": "fromBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14457,
                        "src": "2915:11:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 14482,
                        "name": "toBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14464,
                        "src": "2940:9:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 14470,
                      "name": "TokensReceivedCalled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14344,
                      "src": "2729:20:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,address,uint256,bytes memory,bytes memory,address,uint256,uint256)"
                      }
                    },
                    "id": 14483,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2729:230:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14484,
                  "nodeType": "EmitStatement",
                  "src": "2724:235:99"
                }
              ]
            },
            "functionSelector": "0023de29",
            "id": 14486,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokensReceived",
            "nameLocation": "2197:14:99",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 14440,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2389:8:99"
            },
            "parameters": {
              "id": 14439,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14428,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "2229:8:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14486,
                  "src": "2221:16:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14427,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2221:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14430,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "2255:4:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14486,
                  "src": "2247:12:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14429,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2247:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14432,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2277:2:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14486,
                  "src": "2269:10:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14431,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2269:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14434,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2297:6:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14486,
                  "src": "2289:14:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14433,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2289:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14436,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "2328:8:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14486,
                  "src": "2313:23:99",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14435,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2313:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14438,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "2361:12:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14486,
                  "src": "2346:27:99",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14437,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2346:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2211:168:99"
            },
            "returnParameters": {
              "id": 14441,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2398:0:99"
            },
            "scope": 14634,
            "src": "2188:778:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 14512,
              "nodeType": "Block",
              "src": "3015:199:99",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 14492,
                        "name": "_TOKENS_SENDER_INTERFACE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14361,
                        "src": "3054:29:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 14493,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14488,
                        "src": "3085:7:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 14491,
                      "name": "_registerInterfaceForAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32285,
                      "src": "3025:28:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 14494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3025:68:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14495,
                  "nodeType": "ExpressionStatement",
                  "src": "3025:68:99"
                },
                {
                  "assignments": [
                    14497
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 14497,
                      "mutability": "mutable",
                      "name": "self",
                      "nameLocation": "3112:4:99",
                      "nodeType": "VariableDeclaration",
                      "scope": 14512,
                      "src": "3104:12:99",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 14496,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3104:7:99",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 14502,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 14500,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "3127:4:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$14634",
                          "typeString": "contract ERC777SenderRecipientMock"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$14634",
                          "typeString": "contract ERC777SenderRecipientMock"
                        }
                      ],
                      "id": 14499,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3119:7:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 14498,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3119:7:99",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 14501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3119:13:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3104:28:99"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 14505,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 14503,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14488,
                      "src": "3146:7:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 14504,
                      "name": "self",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14497,
                      "src": "3157:4:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3146:15:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14511,
                  "nodeType": "IfStatement",
                  "src": "3142:66:99",
                  "trueBody": {
                    "id": 14510,
                    "nodeType": "Block",
                    "src": "3163:45:99",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 14507,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14497,
                              "src": "3192:4:99",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 14506,
                            "name": "registerSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14530,
                            "src": "3177:14:99",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 14508,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3177:20:99",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 14509,
                        "nodeType": "ExpressionStatement",
                        "src": "3177:20:99"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "d2de6474",
            "id": 14513,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "senderFor",
            "nameLocation": "2981:9:99",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14488,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2999:7:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14513,
                  "src": "2991:15:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14487,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2991:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2990:17:99"
            },
            "returnParameters": {
              "id": 14490,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3015:0:99"
            },
            "scope": 14634,
            "src": "2972:242:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 14529,
              "nodeType": "Block",
              "src": "3267:103:99",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 14523,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "3318:4:99",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$14634",
                              "typeString": "contract ERC777SenderRecipientMock"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$14634",
                              "typeString": "contract ERC777SenderRecipientMock"
                            }
                          ],
                          "id": 14522,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3310:7:99",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 14521,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3310:7:99",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 14524,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3310:13:99",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14525,
                        "name": "_TOKENS_SENDER_INTERFACE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14361,
                        "src": "3325:29:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 14526,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14515,
                        "src": "3356:6:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 14518,
                        "name": "_erc1820",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14356,
                        "src": "3277:8:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC1820Registry_$32402",
                          "typeString": "contract IERC1820Registry"
                        }
                      },
                      "id": 14520,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3286:23:99",
                      "memberName": "setInterfaceImplementer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 32341,
                      "src": "3277:32:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (address,bytes32,address) external"
                      }
                    },
                    "id": 14527,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3277:86:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14528,
                  "nodeType": "ExpressionStatement",
                  "src": "3277:86:99"
                }
              ]
            },
            "functionSelector": "e1ecbd30",
            "id": 14530,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerSender",
            "nameLocation": "3229:14:99",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14516,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14515,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "3252:6:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14530,
                  "src": "3244:14:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14514,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3244:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3243:16:99"
            },
            "returnParameters": {
              "id": 14517,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3267:0:99"
            },
            "scope": 14634,
            "src": "3220:150:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 14556,
              "nodeType": "Block",
              "src": "3422:205:99",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 14536,
                        "name": "_TOKENS_RECIPIENT_INTERFACE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14366,
                        "src": "3461:32:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 14537,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14532,
                        "src": "3495:7:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 14535,
                      "name": "_registerInterfaceForAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32285,
                      "src": "3432:28:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (bytes32,address)"
                      }
                    },
                    "id": 14538,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3432:71:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14539,
                  "nodeType": "ExpressionStatement",
                  "src": "3432:71:99"
                },
                {
                  "assignments": [
                    14541
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 14541,
                      "mutability": "mutable",
                      "name": "self",
                      "nameLocation": "3522:4:99",
                      "nodeType": "VariableDeclaration",
                      "scope": 14556,
                      "src": "3514:12:99",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 14540,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3514:7:99",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 14546,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 14544,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "3537:4:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$14634",
                          "typeString": "contract ERC777SenderRecipientMock"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$14634",
                          "typeString": "contract ERC777SenderRecipientMock"
                        }
                      ],
                      "id": 14543,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3529:7:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 14542,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3529:7:99",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 14545,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3529:13:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3514:28:99"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 14549,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 14547,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14532,
                      "src": "3556:7:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 14548,
                      "name": "self",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14541,
                      "src": "3567:4:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3556:15:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14555,
                  "nodeType": "IfStatement",
                  "src": "3552:69:99",
                  "trueBody": {
                    "id": 14554,
                    "nodeType": "Block",
                    "src": "3573:48:99",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 14551,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14541,
                              "src": "3605:4:99",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 14550,
                            "name": "registerRecipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 14574,
                            "src": "3587:17:99",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 14552,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3587:23:99",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 14553,
                        "nodeType": "ExpressionStatement",
                        "src": "3587:23:99"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "e0eb2180",
            "id": 14557,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "recipientFor",
            "nameLocation": "3385:12:99",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14532,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "3406:7:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14557,
                  "src": "3398:15:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14531,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3398:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3397:17:99"
            },
            "returnParameters": {
              "id": 14534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3422:0:99"
            },
            "scope": 14634,
            "src": "3376:251:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 14573,
              "nodeType": "Block",
              "src": "3686:109:99",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 14567,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "3737:4:99",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$14634",
                              "typeString": "contract ERC777SenderRecipientMock"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ERC777SenderRecipientMock_$14634",
                              "typeString": "contract ERC777SenderRecipientMock"
                            }
                          ],
                          "id": 14566,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3729:7:99",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 14565,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3729:7:99",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 14568,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3729:13:99",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14569,
                        "name": "_TOKENS_RECIPIENT_INTERFACE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14366,
                        "src": "3744:32:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 14570,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14559,
                        "src": "3778:9:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 14562,
                        "name": "_erc1820",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14356,
                        "src": "3696:8:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC1820Registry_$32402",
                          "typeString": "contract IERC1820Registry"
                        }
                      },
                      "id": 14564,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3705:23:99",
                      "memberName": "setInterfaceImplementer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 32341,
                      "src": "3696:32:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bytes32_$_t_address_$returns$__$",
                        "typeString": "function (address,bytes32,address) external"
                      }
                    },
                    "id": 14571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3696:92:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14572,
                  "nodeType": "ExpressionStatement",
                  "src": "3696:92:99"
                }
              ]
            },
            "functionSelector": "a8badaa5",
            "id": 14574,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "registerRecipient",
            "nameLocation": "3642:17:99",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14560,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14559,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "3668:9:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14574,
                  "src": "3660:17:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14558,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3660:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3659:19:99"
            },
            "returnParameters": {
              "id": 14561,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3686:0:99"
            },
            "scope": 14634,
            "src": "3633:162:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 14583,
              "nodeType": "Block",
              "src": "3856:49:99",
              "statements": [
                {
                  "expression": {
                    "id": 14581,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 14579,
                      "name": "_shouldRevertSend",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14348,
                      "src": "3866:17:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 14580,
                      "name": "shouldRevert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14576,
                      "src": "3886:12:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3866:32:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14582,
                  "nodeType": "ExpressionStatement",
                  "src": "3866:32:99"
                }
              ]
            },
            "functionSelector": "4e4ae5a5",
            "id": 14584,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setShouldRevertSend",
            "nameLocation": "3810:19:99",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14577,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14576,
                  "mutability": "mutable",
                  "name": "shouldRevert",
                  "nameLocation": "3835:12:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14584,
                  "src": "3830:17:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 14575,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3830:4:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3829:19:99"
            },
            "returnParameters": {
              "id": 14578,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3856:0:99"
            },
            "scope": 14634,
            "src": "3801:104:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 14593,
              "nodeType": "Block",
              "src": "3969:52:99",
              "statements": [
                {
                  "expression": {
                    "id": 14591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 14589,
                      "name": "_shouldRevertReceive",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14350,
                      "src": "3979:20:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 14590,
                      "name": "shouldRevert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14586,
                      "src": "4002:12:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3979:35:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 14592,
                  "nodeType": "ExpressionStatement",
                  "src": "3979:35:99"
                }
              ]
            },
            "functionSelector": "c97e18fc",
            "id": 14594,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setShouldRevertReceive",
            "nameLocation": "3920:22:99",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14587,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14586,
                  "mutability": "mutable",
                  "name": "shouldRevert",
                  "nameLocation": "3948:12:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14594,
                  "src": "3943:17:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 14585,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3943:4:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3942:19:99"
            },
            "returnParameters": {
              "id": 14588,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3969:0:99"
            },
            "scope": 14634,
            "src": "3911:110:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 14614,
              "nodeType": "Block",
              "src": "4148:158:99",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 14609,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14599,
                        "src": "4240:2:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 14610,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14601,
                        "src": "4244:6:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 14611,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14603,
                        "src": "4252:4:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 14606,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14597,
                        "src": "4229:5:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$29234",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 14608,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4235:4:99",
                      "memberName": "send",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29120,
                      "src": "4229:10:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory) external"
                      }
                    },
                    "id": 14612,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4229:28:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14613,
                  "nodeType": "ExpressionStatement",
                  "src": "4229:28:99"
                }
              ]
            },
            "functionSelector": "3836ef89",
            "id": 14615,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "send",
            "nameLocation": "4036:4:99",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14604,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14597,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "4058:5:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14615,
                  "src": "4050:13:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$29234",
                    "typeString": "contract IERC777"
                  },
                  "typeName": {
                    "id": 14596,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 14595,
                      "name": "IERC777",
                      "nameLocations": [
                        "4050:7:99"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29234,
                      "src": "4050:7:99"
                    },
                    "referencedDeclaration": 29234,
                    "src": "4050:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC777_$29234",
                      "typeString": "contract IERC777"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14599,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "4081:2:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14615,
                  "src": "4073:10:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 14598,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4073:7:99",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14601,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4101:6:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14615,
                  "src": "4093:14:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14600,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4093:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14603,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "4130:4:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14615,
                  "src": "4117:17:99",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14602,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4117:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4040:100:99"
            },
            "returnParameters": {
              "id": 14605,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4148:0:99"
            },
            "scope": 14634,
            "src": "4027:279:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 14632,
              "nodeType": "Block",
              "src": "4413:41:99",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 14628,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14620,
                        "src": "4434:6:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 14629,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14622,
                        "src": "4442:4:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 14625,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14618,
                        "src": "4423:5:99",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC777_$29234",
                          "typeString": "contract IERC777"
                        }
                      },
                      "id": 14627,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4429:4:99",
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 29128,
                      "src": "4423:10:99",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,bytes memory) external"
                      }
                    },
                    "id": 14630,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4423:24:99",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 14631,
                  "nodeType": "ExpressionStatement",
                  "src": "4423:24:99"
                }
              ]
            },
            "functionSelector": "44d17187",
            "id": 14633,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "4321:4:99",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 14623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 14618,
                  "mutability": "mutable",
                  "name": "token",
                  "nameLocation": "4343:5:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14633,
                  "src": "4335:13:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC777_$29234",
                    "typeString": "contract IERC777"
                  },
                  "typeName": {
                    "id": 14617,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 14616,
                      "name": "IERC777",
                      "nameLocations": [
                        "4335:7:99"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29234,
                      "src": "4335:7:99"
                    },
                    "referencedDeclaration": 29234,
                    "src": "4335:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC777_$29234",
                      "typeString": "contract IERC777"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14620,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4366:6:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14633,
                  "src": "4358:14:99",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 14619,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4358:7:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 14622,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "4395:4:99",
                  "nodeType": "VariableDeclaration",
                  "scope": 14633,
                  "src": "4382:17:99",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14621,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4382:5:99",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4325:80:99"
            },
            "returnParameters": {
              "id": 14624,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4413:0:99"
            },
            "scope": 14634,
            "src": "4312:142:99",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 14635,
        "src": "329:4127:99",
        "usedErrors": [],
        "usedEvents": [
          14324,
          14344,
          14346
        ]
      }
    ],
    "src": "33:4424:99"
  },
  "bytecode": "60806040526001805462010000600160b01b031916751820a4b7618bde71dce8cdc73aab6c95905fad24000017905534801561003a57600080fd5b50610b8a8061004a6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c806375ab97821161007157806375ab97821461012e578063a8badaa514610141578063c97e18fc14610154578063d2de64741461017c578063e0eb21801461018f578063e1ecbd30146101a257600080fd5b806223de29146100ad578063249cb3fa146100c25780633836ef89146100e757806344d17187146100fa5780634e4ae5a51461010d575b600080fd5b6100c06100bb36600461077c565b6101b5565b005b6100d56100d036600461082d565b610307565b60405190815260200160405180910390f35b6100c06100f5366004610900565b61035f565b6100c061010836600461096c565b6103c7565b6100c061011b3660046109c5565b6001805460ff1916911515919091179055565b6100c061013c36600461077c565b61042c565b6100c061014f3660046109e7565b610564565b6100c06101623660046109c5565b600180549115156101000261ff0019909216919091179055565b6100c061018a3660046109e7565b6105fa565b6100c061019d3660046109e7565b610643565b6100c06101b03660046109e7565b610688565b600154610100900460ff16156101ca57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610a04565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a0823190602401602060405180830381865afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610a04565b90507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b6040516102f29b9a99989796959493929190610a46565b60405180910390a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610336576000610358565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b604051634decdde360e11b81526001600160a01b03851690639bd9bbc69061038f90869086908690600401610b03565b600060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b5050505050505050565b60405163fe9d930360e01b81526001600160a01b0384169063fe9d9303906103f59085908590600401610b33565b600060405180830381600087803b15801561040f57600080fd5b505af1158015610423573d6000803e3d6000fd5b50505050505050565b60015460ff161561043c57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610a04565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a0823190602401602060405180830381865afa1580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f9190610a04565b90507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b6040516102f29b9a99989796959493929190610a46565b6001546040516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064015b600060405180830381600087803b1580156105df57600080fd5b505af11580156105f3573d6000803e3d6000fd5b5050505050565b6106247f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895826106ed565b306001600160a01b03821681900361063f5761063f81610688565b5050565b61066d7fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b826106ed565b306001600160a01b03821681900361063f5761063f81610564565b6001546040516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064016105c5565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff19166001179055565b6001600160a01b038116811461073057600080fd5b50565b60008083601f84011261074557600080fd5b50813567ffffffffffffffff81111561075d57600080fd5b60208301915083602082850101111561077557600080fd5b9250929050565b60008060008060008060008060c0898b03121561079857600080fd5b88356107a38161071b565b975060208901356107b38161071b565b965060408901356107c38161071b565b955060608901359450608089013567ffffffffffffffff808211156107e757600080fd5b6107f38c838d01610733565b909650945060a08b013591508082111561080c57600080fd5b506108198b828c01610733565b999c989b5096995094979396929594505050565b6000806040838503121561084057600080fd5b8235915060208301356108528161071b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261088457600080fd5b813567ffffffffffffffff8082111561089f5761089f61085d565b604051601f8301601f19908116603f011681019082821181831017156108c7576108c761085d565b816040528381528660208588010111156108e057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561091657600080fd5b84356109218161071b565b935060208501356109318161071b565b925060408501359150606085013567ffffffffffffffff81111561095457600080fd5b61096087828801610873565b91505092959194509250565b60008060006060848603121561098157600080fd5b833561098c8161071b565b925060208401359150604084013567ffffffffffffffff8111156109af57600080fd5b6109bb86828701610873565b9150509250925092565b6000602082840312156109d757600080fd5b8135801515811461035857600080fd5b6000602082840312156109f957600080fd5b81356103588161071b565b600060208284031215610a1657600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038c811682528b811660208301528a81166040830152606082018a905261012060808301819052600091610a848483018b8d610a1d565b915083820360a0850152610a9982898b610a1d565b961660c0840152505060e08101929092526101009091015298975050505050505050565b6000815180845260005b81811015610ae357602081850181015186830182015201610ac7565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b0384168152826020820152606060408201526000610b2a6060830184610abd565b95945050505050565b828152604060208201526000610b4c6040830184610abd565b94935050505056fea2646970667358221220826dfbeceedbf417040048cc03b4ee76ecc3022bcbaba13c320cb27236082b8364736f6c63430008150033",
  "bytecodeSha1": "4e9cf567bcb3a669c4c218347dd2148abfb26771",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.21+commit.d9974bed"
  },
  "contractName": "ERC777SenderRecipientMock",
  "coverageMap": {
    "branches": {
      "193": {},
      "194": {},
      "195": {},
      "202": {},
      "219": {
        "ERC1820Implementer.canImplementInterfaceForAddress": {
          "21": [
            984,
            1028,
            true
          ]
        }
      },
      "221": {},
      "222": {},
      "99": {
        "ERC777SenderRecipientMock.recipientFor": {
          "20": [
            3556,
            3571,
            false
          ]
        },
        "ERC777SenderRecipientMock.senderFor": {
          "19": [
            3146,
            3161,
            false
          ]
        },
        "ERC777SenderRecipientMock.tokensReceived": {
          "17": [
            2412,
            2432,
            false
          ]
        },
        "ERC777SenderRecipientMock.tokensToSend": {
          "18": [
            1633,
            1650,
            false
          ]
        }
      }
    },
    "statements": {
      "193": {},
      "194": {},
      "195": {},
      "202": {
        "Context._msgSender": {
          "3": [
            712,
            729
          ]
        }
      },
      "219": {
        "ERC1820Implementer._registerInterfaceForAddress": {
          "16": [
            1415,
            1466
          ]
        },
        "ERC1820Implementer.canImplementInterfaceForAddress": {
          "5": [
            977,
            1068
          ]
        }
      },
      "221": {},
      "222": {},
      "99": {
        "ERC777SenderRecipientMock.burn": {
          "7": [
            4423,
            4447
          ]
        },
        "ERC777SenderRecipientMock.recipientFor": {
          "13": [
            3432,
            3503
          ],
          "14": [
            3587,
            3610
          ]
        },
        "ERC777SenderRecipientMock.registerRecipient": {
          "10": [
            3696,
            3788
          ]
        },
        "ERC777SenderRecipientMock.registerSender": {
          "15": [
            3277,
            3363
          ]
        },
        "ERC777SenderRecipientMock.send": {
          "6": [
            4229,
            4257
          ]
        },
        "ERC777SenderRecipientMock.senderFor": {
          "11": [
            3025,
            3093
          ],
          "12": [
            3177,
            3197
          ]
        },
        "ERC777SenderRecipientMock.setShouldRevertReceive": {
          "1": [
            3979,
            4014
          ]
        },
        "ERC777SenderRecipientMock.setShouldRevertSend": {
          "0": [
            3866,
            3898
          ]
        },
        "ERC777SenderRecipientMock.tokensReceived": {
          "2": [
            2448,
            2456
          ],
          "4": [
            2724,
            2959
          ]
        },
        "ERC777SenderRecipientMock.tokensToSend": {
          "8": [
            1666,
            1674
          ],
          "9": [
            1942,
            2175
          ]
        }
      }
    }
  },
  "dependencies": [
    "Context",
    "ERC1820Implementer",
    "IERC1820Implementer",
    "IERC1820Registry",
    "IERC777",
    "IERC777Recipient",
    "IERC777Sender"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a85760003560e01c806375ab97821161007157806375ab97821461012e578063a8badaa514610141578063c97e18fc14610154578063d2de64741461017c578063e0eb21801461018f578063e1ecbd30146101a257600080fd5b806223de29146100ad578063249cb3fa146100c25780633836ef89146100e757806344d17187146100fa5780634e4ae5a51461010d575b600080fd5b6100c06100bb36600461077c565b6101b5565b005b6100d56100d036600461082d565b610307565b60405190815260200160405180910390f35b6100c06100f5366004610900565b61035f565b6100c061010836600461096c565b6103c7565b6100c061011b3660046109c5565b6001805460ff1916911515919091179055565b6100c061013c36600461077c565b61042c565b6100c061014f3660046109e7565b610564565b6100c06101623660046109c5565b600180549115156101000261ff0019909216919091179055565b6100c061018a3660046109e7565b6105fa565b6100c061019d3660046109e7565b610643565b6100c06101b03660046109e7565b610688565b600154610100900460ff16156101ca57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023d9190610a04565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a0823190602401602060405180830381865afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610a04565b90507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b6040516102f29b9a99989796959493929190610a46565b60405180910390a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610336576000610358565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b604051634decdde360e11b81526001600160a01b03851690639bd9bbc69061038f90869086908690600401610b03565b600060405180830381600087803b1580156103a957600080fd5b505af11580156103bd573d6000803e3d6000fd5b5050505050505050565b60405163fe9d930360e01b81526001600160a01b0384169063fe9d9303906103f59085908590600401610b33565b600060405180830381600087803b15801561040f57600080fd5b505af1158015610423573d6000803e3d6000fd5b50505050505050565b60015460ff161561043c57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610a04565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a0823190602401602060405180830381865afa1580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f9190610a04565b90507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b6040516102f29b9a99989796959493929190610a46565b6001546040516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064015b600060405180830381600087803b1580156105df57600080fd5b505af11580156105f3573d6000803e3d6000fd5b5050505050565b6106247f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895826106ed565b306001600160a01b03821681900361063f5761063f81610688565b5050565b61066d7fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b826106ed565b306001600160a01b03821681900361063f5761063f81610564565b6001546040516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064016105c5565b6000918252602082815260408084206001600160a01b0390931684529190529020805460ff19166001179055565b6001600160a01b038116811461073057600080fd5b50565b60008083601f84011261074557600080fd5b50813567ffffffffffffffff81111561075d57600080fd5b60208301915083602082850101111561077557600080fd5b9250929050565b60008060008060008060008060c0898b03121561079857600080fd5b88356107a38161071b565b975060208901356107b38161071b565b965060408901356107c38161071b565b955060608901359450608089013567ffffffffffffffff808211156107e757600080fd5b6107f38c838d01610733565b909650945060a08b013591508082111561080c57600080fd5b506108198b828c01610733565b999c989b5096995094979396929594505050565b6000806040838503121561084057600080fd5b8235915060208301356108528161071b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261088457600080fd5b813567ffffffffffffffff8082111561089f5761089f61085d565b604051601f8301601f19908116603f011681019082821181831017156108c7576108c761085d565b816040528381528660208588010111156108e057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561091657600080fd5b84356109218161071b565b935060208501356109318161071b565b925060408501359150606085013567ffffffffffffffff81111561095457600080fd5b61096087828801610873565b91505092959194509250565b60008060006060848603121561098157600080fd5b833561098c8161071b565b925060208401359150604084013567ffffffffffffffff8111156109af57600080fd5b6109bb86828701610873565b9150509250925092565b6000602082840312156109d757600080fd5b8135801515811461035857600080fd5b6000602082840312156109f957600080fd5b81356103588161071b565b600060208284031215610a1657600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038c811682528b811660208301528a81166040830152606082018a905261012060808301819052600091610a848483018b8d610a1d565b915083820360a0850152610a9982898b610a1d565b961660c0840152505060e08101929092526101009091015298975050505050505050565b6000815180845260005b81811015610ae357602081850181015186830182015201610ac7565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b0384168152826020820152606060408201526000610b2a6060830184610abd565b95945050505050565b828152604060208201526000610b4c6040830184610abd565b94935050505056fea2646970667358221220826dfbeceedbf417040048cc03b4ee76ecc3022bcbaba13c320cb27236082b8364736f6c63430008150033",
  "deployedSourceMap": "329:4127:99:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2188:778;;;;;;:::i;:::-;;:::i;:::-;;795:280:219;;;;;;:::i;:::-;;:::i;:::-;;;2178:25:249;;;2166:2;2151:18;795:280:219;;;;;;;4027:279:99;;;;;;:::i;:::-;;:::i;4312:142::-;;;;;;:::i;:::-;;:::i;3801:104::-;;;;;;:::i;:::-;3866:17;:32;;-1:-1:-1;;3866:32:99;;;;;;;;;;3801:104;1411:771;;;;;;:::i;:::-;;:::i;3633:162::-;;;;;;:::i;:::-;;:::i;3911:110::-;;;;;;:::i;:::-;3979:20;:35;;;;;;;-1:-1:-1;;3979:35:99;;;;;;;;;3911:110;2972:242;;;;;;:::i;:::-;;:::i;3376:251::-;;;;;;:::i;:::-;;:::i;3220:150::-;;;;;;:::i;:::-;;:::i;2188:778::-;2412:20;;;;;;;2408:59;;;2448:8;;;2408:59;2477:13;719:10:202;2547:21:99;;-1:-1:-1;;;2547:21:99;;-1:-1:-1;;;;;4995:32:249;;;2547:21:99;;;4977:51:249;2477:37:99;;-1:-1:-1;2525:19:99;;2547:15;;;;;4950:18:249;;2547:21:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2694:19;;-1:-1:-1;;;2694:19:99;;-1:-1:-1;;;;;4995:32:249;;;2694:19:99;;;4977:51:249;2525:43:99;;-1:-1:-1;2674:17:99;;2694:15;;;;;4950:18:249;;2694:19:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2674:39;;2729:230;2763:8;2785:4;2803:2;2819:6;2839:8;;2861:12;;2895:5;2915:11;2940:9;2729:230;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2398:568;;;2188:778;;;;;;;;:::o;795:280:219:-;954:7;984:35;;;;;;;;;;;-1:-1:-1;;;;;984:44:219;;;;;;;;;;;;:84;;1063:4;984:84;;;588:33;984:84;977:91;795:280;-1:-1:-1;;;795:280:219:o;4027:279:99:-;4229:28;;-1:-1:-1;;;4229:28:99;;-1:-1:-1;;;;;4229:10:99;;;;;:28;;4240:2;;4244:6;;4252:4;;4229:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4027:279;;;;:::o;4312:142::-;4423:24;;-1:-1:-1;;;4423:24:99;;-1:-1:-1;;;;;4423:10:99;;;;;:24;;4434:6;;4442:4;;4423:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4312:142;;;:::o;1411:771::-;1633:17;;;;1629:56;;;1666:8;;;1629:56;1695:13;719:10:202;1765:21:99;;-1:-1:-1;;;1765:21:99;;-1:-1:-1;;;;;4995:32:249;;;1765:21:99;;;4977:51:249;1695:37:99;;-1:-1:-1;1743:19:99;;1765:15;;;;;4950:18:249;;1765:21:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1912:19;;-1:-1:-1;;;1912:19:99;;-1:-1:-1;;;;;4995:32:249;;;1912:19:99;;;4977:51:249;1743:43:99;;-1:-1:-1;1892:17:99;;1912:15;;;;;4950:18:249;;1912:19:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1892:39;;1947:228;1979:8;2001:4;2019:2;2035:6;2055:8;;2077:12;;2111:5;2131:11;2156:9;1947:228;;;;;;;;;;;;;;;;:::i;3633:162::-;3696:8;;:92;;-1:-1:-1;;;3696:92:99;;3737:4;3696:92;;;7885:34:249;1370::99;7935:18:249;;;7928:34;-1:-1:-1;;;;;7998:15:249;;;7978:18;;;7971:43;3696:8:99;;;;;;;;:32;;7820:18:249;;3696:92:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3633:162;:::o;2972:242::-;3025:68;1273:31;3085:7;3025:28;:68::i;:::-;3127:4;-1:-1:-1;;;;;3146:15:99;;;;;3142:66;;3177:20;3192:4;3177:14;:20::i;:::-;3015:199;2972:242;:::o;3376:251::-;3432:71;1370:34;3495:7;3432:28;:71::i;:::-;3537:4;-1:-1:-1;;;;;3556:15:99;;;;;3552:69;;3587:23;3605:4;3587:17;:23::i;3220:150::-;3277:8;;:86;;-1:-1:-1;;;3277:86:99;;3318:4;3277:86;;;7885:34:249;1273:31:99;7935:18:249;;;7928:34;-1:-1:-1;;;;;7998:15:249;;;7978:18;;;7971:43;3277:8:99;;;;;;;;:32;;7820:18:249;;3277:86:99;7645:375:249;1310:163:219;1415:20;:35;;;;;;;;;;;-1:-1:-1;;;;;1415:44:219;;;;;;;;;;:51;;-1:-1:-1;;1415:51:219;1462:4;1415:51;;;1310:163::o;14:131:249:-;-1:-1:-1;;;;;89:31:249;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:347::-;201:8;211:6;265:3;258:4;250:6;246:17;242:27;232:55;;283:1;280;273:12;232:55;-1:-1:-1;306:20:249;;349:18;338:30;;335:50;;;381:1;378;371:12;335:50;418:4;410:6;406:17;394:29;;470:3;463:4;454:6;446;442:19;438:30;435:39;432:59;;;487:1;484;477:12;432:59;150:347;;;;;:::o;502:1205::-;628:6;636;644;652;660;668;676;684;737:3;725:9;716:7;712:23;708:33;705:53;;;754:1;751;744:12;705:53;793:9;780:23;812:31;837:5;812:31;:::i;:::-;862:5;-1:-1:-1;919:2:249;904:18;;891:32;932:33;891:32;932:33;:::i;:::-;984:7;-1:-1:-1;1043:2:249;1028:18;;1015:32;1056:33;1015:32;1056:33;:::i;:::-;1108:7;-1:-1:-1;1162:2:249;1147:18;;1134:32;;-1:-1:-1;1217:3:249;1202:19;;1189:33;1241:18;1271:14;;;1268:34;;;1298:1;1295;1288:12;1268:34;1337:58;1387:7;1378:6;1367:9;1363:22;1337:58;:::i;:::-;1414:8;;-1:-1:-1;1311:84:249;-1:-1:-1;1502:3:249;1487:19;;1474:33;;-1:-1:-1;1519:16:249;;;1516:36;;;1548:1;1545;1538:12;1516:36;;1587:60;1639:7;1628:8;1617:9;1613:24;1587:60;:::i;:::-;502:1205;;;;-1:-1:-1;502:1205:249;;-1:-1:-1;502:1205:249;;;;;;1666:8;-1:-1:-1;;;502:1205:249:o;1712:315::-;1780:6;1788;1841:2;1829:9;1820:7;1816:23;1812:32;1809:52;;;1857:1;1854;1847:12;1809:52;1893:9;1880:23;1870:33;;1953:2;1942:9;1938:18;1925:32;1966:31;1991:5;1966:31;:::i;:::-;2016:5;2006:15;;;1712:315;;;;;:::o;2214:127::-;2275:10;2270:3;2266:20;2263:1;2256:31;2306:4;2303:1;2296:15;2330:4;2327:1;2320:15;2346:718;2388:5;2441:3;2434:4;2426:6;2422:17;2418:27;2408:55;;2459:1;2456;2449:12;2408:55;2495:6;2482:20;2521:18;2558:2;2554;2551:10;2548:36;;;2564:18;;:::i;:::-;2639:2;2633:9;2607:2;2693:13;;-1:-1:-1;;2689:22:249;;;2713:2;2685:31;2681:40;2669:53;;;2737:18;;;2757:22;;;2734:46;2731:72;;;2783:18;;:::i;:::-;2823:10;2819:2;2812:22;2858:2;2850:6;2843:18;2904:3;2897:4;2892:2;2884:6;2880:15;2876:26;2873:35;2870:55;;;2921:1;2918;2911:12;2870:55;2985:2;2978:4;2970:6;2966:17;2959:4;2951:6;2947:17;2934:54;3032:1;3025:4;3020:2;3012:6;3008:15;3004:26;2997:37;3052:6;3043:15;;;;;;2346:718;;;;:::o;3069:682::-;3181:6;3189;3197;3205;3258:3;3246:9;3237:7;3233:23;3229:33;3226:53;;;3275:1;3272;3265:12;3226:53;3314:9;3301:23;3333:31;3358:5;3333:31;:::i;:::-;3383:5;-1:-1:-1;3440:2:249;3425:18;;3412:32;3453:33;3412:32;3453:33;:::i;:::-;3505:7;-1:-1:-1;3559:2:249;3544:18;;3531:32;;-1:-1:-1;3614:2:249;3599:18;;3586:32;3641:18;3630:30;;3627:50;;;3673:1;3670;3663:12;3627:50;3696:49;3737:7;3728:6;3717:9;3713:22;3696:49;:::i;:::-;3686:59;;;3069:682;;;;;;;:::o;3756:540::-;3859:6;3867;3875;3928:2;3916:9;3907:7;3903:23;3899:32;3896:52;;;3944:1;3941;3934:12;3896:52;3983:9;3970:23;4002:31;4027:5;4002:31;:::i;:::-;4052:5;-1:-1:-1;4104:2:249;4089:18;;4076:32;;-1:-1:-1;4159:2:249;4144:18;;4131:32;4186:18;4175:30;;4172:50;;;4218:1;4215;4208:12;4172:50;4241:49;4282:7;4273:6;4262:9;4258:22;4241:49;:::i;:::-;4231:59;;;3756:540;;;;;:::o;4301:273::-;4357:6;4410:2;4398:9;4389:7;4385:23;4381:32;4378:52;;;4426:1;4423;4416:12;4378:52;4465:9;4452:23;4518:5;4511:13;4504:21;4497:5;4494:32;4484:60;;4540:1;4537;4530:12;4579:247;4638:6;4691:2;4679:9;4670:7;4666:23;4662:32;4659:52;;;4707:1;4704;4697:12;4659:52;4746:9;4733:23;4765:31;4790:5;4765:31;:::i;5039:184::-;5109:6;5162:2;5150:9;5141:7;5137:23;5133:32;5130:52;;;5178:1;5175;5168:12;5130:52;-1:-1:-1;5201:16:249;;5039:184;-1:-1:-1;5039:184:249:o;5228:266::-;5316:6;5311:3;5304:19;5368:6;5361:5;5354:4;5349:3;5345:14;5332:43;-1:-1:-1;5420:1:249;5395:16;;;5413:4;5391:27;;;5384:38;;;;5476:2;5455:15;;;-1:-1:-1;;5451:29:249;5442:39;;;5438:50;;5228:266::o;5499:1031::-;-1:-1:-1;;;;;5969:15:249;;;5951:34;;6021:15;;;6016:2;6001:18;;5994:43;6073:15;;;6068:2;6053:18;;6046:43;6120:2;6105:18;;6098:34;;;5901:3;6163;6148:19;;6141:31;;;5872:4;;6195:61;6237:18;;;6229:6;6221;6195:61;:::i;:::-;6181:75;;6305:9;6297:6;6293:22;6287:3;6276:9;6272:19;6265:51;6333:49;6375:6;6367;6359;6333:49;:::i;:::-;6419:15;;6413:3;6398:19;;6391:44;-1:-1:-1;;6466:3:249;6451:19;;6444:35;;;;6510:3;6495:19;;;6488:36;6325:57;5499:1031;-1:-1:-1;;;;;;;;5499:1031:249:o;6535:422::-;6576:3;6614:5;6608:12;6641:6;6636:3;6629:19;6666:1;6676:162;6690:6;6687:1;6684:13;6676:162;;;6752:4;6808:13;;;6804:22;;6798:29;6780:11;;;6776:20;;6769:59;6705:12;6676:162;;;6680:3;6883:1;6876:4;6867:6;6862:3;6858:16;6854:27;6847:38;6946:4;6939:2;6935:7;6930:2;6922:6;6918:15;6914:29;6909:3;6905:39;6901:50;6894:57;;;6535:422;;;;:::o;6962:385::-;7194:1;7190;7185:3;7181:11;7177:19;7169:6;7165:32;7154:9;7147:51;7234:6;7229:2;7218:9;7214:18;7207:34;7277:2;7272;7261:9;7257:18;7250:30;7128:4;7297:44;7337:2;7326:9;7322:18;7314:6;7297:44;:::i;:::-;7289:52;6962:385;-1:-1:-1;;;;;6962:385:249:o;7352:288::-;7527:6;7516:9;7509:25;7570:2;7565;7554:9;7550:18;7543:30;7490:4;7590:44;7630:2;7619:9;7615:18;7607:6;7590:44;:::i;:::-;7582:52;7352:288;-1:-1:-1;;;;7352:288:249:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."
      },
      "tokensToSend(address,address,address,uint256,bytes,bytes)": {
        "details": "Called by an {IERC777} token contract whenever a registered holder's (`from`) tokens are about to be moved or destroyed. The type of operation is conveyed by `to` being the zero address or not. This call occurs _before_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the pre-operation state. This function may revert to prevent the operation from being executed."
      }
    },
    "version": 1
  },
  "offset": [
    329,
    4456
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75AB9782 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x75AB9782 EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0xA8BADAA5 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0xC97E18FC EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xD2DE6474 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xE0EB2180 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xE1ECBD30 EQ PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x249CB3FA EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0x3836EF89 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0x44D17187 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x4E4AE5A5 EQ PUSH2 0x10D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC0 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD5 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x82D JUMP JUMPDEST PUSH2 0x307 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC0 PUSH2 0xF5 CALLDATASIZE PUSH1 0x4 PUSH2 0x900 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x96C JUMP JUMPDEST PUSH2 0x3C7 JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x9C5 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x42C JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0x9E7 JUMP JUMPDEST PUSH2 0x564 JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x9C5 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x9E7 JUMP JUMPDEST PUSH2 0x5FA JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x9E7 JUMP JUMPDEST PUSH2 0x643 JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E7 JUMP JUMPDEST PUSH2 0x688 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x219 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x289 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST SWAP1 POP PUSH32 0x47E915878C47F3EC4D7FF646A2BECB229F64FD2ABE4D2B5E2BB4275B0CF50D4E DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0x2F2 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA46 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x336 JUMPI PUSH1 0x0 PUSH2 0x358 JUMP JUMPDEST PUSH32 0xA2EF4600D742022D532D4747CB3547474667D6F13804902513B2EC01C848F4B4 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4DECDDE3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x9BD9BBC6 SWAP1 PUSH2 0x38F SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xB03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFE9D9303 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xFE9D9303 SWAP1 PUSH2 0x3F5 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xB33 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x423 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLER PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AF SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x51F SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST SWAP1 POP PUSH32 0xAA3E88ACA472E90221DAF7D3D601ABAFB62B120319089D7A2C2F63588DA85529 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0x2F2 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA46 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x29965A1D PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0xB281FC8C12954D22544DB45DE3159A39272895B169A852B314F9CC762E44C53B PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH3 0x10000 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x29965A1D SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x624 PUSH32 0x29DDB589B1FB5FC7CF394961C1ADF5F8C6454761ADF795E67FE149F658ABE895 DUP3 PUSH2 0x6ED JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP2 SWAP1 SUB PUSH2 0x63F JUMPI PUSH2 0x63F DUP2 PUSH2 0x688 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x66D PUSH32 0xB281FC8C12954D22544DB45DE3159A39272895B169A852B314F9CC762E44C53B DUP3 PUSH2 0x6ED JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP2 SWAP1 SUB PUSH2 0x63F JUMPI PUSH2 0x63F DUP2 PUSH2 0x564 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x29965A1D PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x29DDB589B1FB5FC7CF394961C1ADF5F8C6454761ADF795E67FE149F658ABE895 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH3 0x10000 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP1 PUSH4 0x29965A1D SWAP1 PUSH1 0x64 ADD PUSH2 0x5C5 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x7A3 DUP2 PUSH2 0x71B JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x7B3 DUP2 PUSH2 0x71B JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x7C3 DUP2 PUSH2 0x71B JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F3 DUP13 DUP4 DUP14 ADD PUSH2 0x733 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x80C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x819 DUP12 DUP3 DUP13 ADD PUSH2 0x733 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x840 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x852 DUP2 PUSH2 0x71B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x89F JUMPI PUSH2 0x89F PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x8C7 JUMPI PUSH2 0x8C7 PUSH2 0x85D JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x8E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x916 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x921 DUP2 PUSH2 0x71B JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x931 DUP2 PUSH2 0x71B JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x954 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x960 DUP8 DUP3 DUP9 ADD PUSH2 0x873 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x98C DUP2 PUSH2 0x71B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BB DUP7 DUP3 DUP8 ADD PUSH2 0x873 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x358 DUP2 PUSH2 0x71B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND DUP3 MSTORE DUP12 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP11 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP11 SWAP1 MSTORE PUSH2 0x120 PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH2 0xA84 DUP5 DUP4 ADD DUP12 DUP14 PUSH2 0xA1D JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0xA99 DUP3 DUP10 DUP12 PUSH2 0xA1D JUMP JUMPDEST SWAP7 AND PUSH1 0xC0 DUP5 ADD MSTORE POP POP PUSH1 0xE0 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x100 SWAP1 SWAP2 ADD MSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAE3 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xAC7 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xB2A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xABD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xB4C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xABD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 PUSH14 0xFBECEEDBF417040048CC03B4EE76 0xEC 0xC3 MUL 0x2B 0xCB 0xAB LOG1 EXTCODECOPY ORIGIN 0xC 0xB2 PUSH19 0x36082B8364736F6C6343000815003300000000 ",
  "pcMap": {
    "0": {
      "offset": [
        329,
        4456
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "5": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "CALLVALUE",
      "path": "99"
    },
    "6": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "7": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "8": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "12": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "REVERT",
      "path": "99"
    },
    "16": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "17": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "POP",
      "path": "99"
    },
    "18": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "21": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "LT",
      "path": "99"
    },
    "22": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xA8"
    },
    "25": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "26": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "CALLDATALOAD",
      "path": "99"
    },
    "29": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "SHR",
      "path": "99"
    },
    "32": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "33": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x75AB9782"
    },
    "38": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "GT",
      "path": "99"
    },
    "39": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "43": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "44": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x75AB9782"
    },
    "49": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "50": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x12E"
    },
    "53": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "54": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "55": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0xA8BADAA5"
    },
    "60": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "61": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x141"
    },
    "64": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "65": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "66": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0xC97E18FC"
    },
    "71": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "72": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x154"
    },
    "75": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "76": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "77": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0xD2DE6474"
    },
    "82": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "83": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x17C"
    },
    "86": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "87": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "88": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0xE0EB2180"
    },
    "93": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "94": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x18F"
    },
    "97": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "98": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "99": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0xE1ECBD30"
    },
    "104": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "105": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x1A2"
    },
    "108": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "109": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "112": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "REVERT",
      "path": "99"
    },
    "113": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "114": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "115": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH3",
      "path": "99",
      "value": "0x23DE29"
    },
    "119": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "120": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xAD"
    },
    "123": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "124": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "125": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x249CB3FA"
    },
    "130": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "131": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC2"
    },
    "134": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "135": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "136": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x3836EF89"
    },
    "141": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "142": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xE7"
    },
    "145": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "146": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "147": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x44D17187"
    },
    "152": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "153": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xFA"
    },
    "156": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "157": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "158": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x4E4AE5A5"
    },
    "163": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "EQ",
      "path": "99"
    },
    "164": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x10D"
    },
    "167": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "168": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "169": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "171": {
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "172": {
      "first_revert": true,
      "fn": null,
      "offset": [
        329,
        4456
      ],
      "op": "REVERT",
      "path": "99"
    },
    "173": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "174": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "177": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xBB"
    },
    "180": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "181": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "183": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x77C"
    },
    "186": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMP",
      "path": "99"
    },
    "187": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "188": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x1B5"
    },
    "191": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMP",
      "path": "99"
    },
    "192": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "193": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "STOP",
      "path": "99"
    },
    "194": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "JUMPDEST",
      "path": "219"
    },
    "195": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "PUSH2",
      "path": "219",
      "value": "0xD5"
    },
    "198": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "PUSH2",
      "path": "219",
      "value": "0xD0"
    },
    "201": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "CALLDATASIZE",
      "path": "219"
    },
    "202": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x4"
    },
    "204": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "PUSH2",
      "path": "219",
      "value": "0x82D"
    },
    "207": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "jump": "i",
      "offset": [
        795,
        1075
      ],
      "op": "JUMP",
      "path": "219"
    },
    "208": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "JUMPDEST",
      "path": "219"
    },
    "209": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "PUSH2",
      "path": "219",
      "value": "0x307"
    },
    "212": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "jump": "i",
      "offset": [
        795,
        1075
      ],
      "op": "JUMP",
      "path": "219"
    },
    "213": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "JUMPDEST",
      "path": "219"
    },
    "214": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x40"
    },
    "216": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "MLOAD",
      "path": "219"
    },
    "217": {
      "op": "SWAP1"
    },
    "218": {
      "op": "DUP2"
    },
    "219": {
      "op": "MSTORE"
    },
    "220": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "222": {
      "op": "ADD"
    },
    "223": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x40"
    },
    "225": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "MLOAD",
      "path": "219"
    },
    "226": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "DUP1",
      "path": "219"
    },
    "227": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "SWAP2",
      "path": "219"
    },
    "228": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "SUB",
      "path": "219"
    },
    "229": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "SWAP1",
      "path": "219"
    },
    "230": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "RETURN",
      "path": "219"
    },
    "231": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "232": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "235": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xF5"
    },
    "238": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "239": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "241": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x900"
    },
    "244": {
      "fn": "ERC777SenderRecipientMock.send",
      "jump": "i",
      "offset": [
        4027,
        4306
      ],
      "op": "JUMP",
      "path": "99"
    },
    "245": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "246": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x35F"
    },
    "249": {
      "fn": "ERC777SenderRecipientMock.send",
      "jump": "i",
      "offset": [
        4027,
        4306
      ],
      "op": "JUMP",
      "path": "99"
    },
    "250": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "251": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "254": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x108"
    },
    "257": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "258": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "260": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x96C"
    },
    "263": {
      "fn": "ERC777SenderRecipientMock.burn",
      "jump": "i",
      "offset": [
        4312,
        4454
      ],
      "op": "JUMP",
      "path": "99"
    },
    "264": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "265": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x3C7"
    },
    "268": {
      "fn": "ERC777SenderRecipientMock.burn",
      "jump": "i",
      "offset": [
        4312,
        4454
      ],
      "op": "JUMP",
      "path": "99"
    },
    "269": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "270": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "273": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x11B"
    },
    "276": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "277": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "279": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x9C5"
    },
    "282": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "jump": "i",
      "offset": [
        3801,
        3905
      ],
      "op": "JUMP",
      "path": "99"
    },
    "283": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "284": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3883
      ],
      "op": "PUSH1",
      "path": "99",
      "statement": 0,
      "value": "0x1"
    },
    "286": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "DUP1",
      "path": "99"
    },
    "287": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SLOAD",
      "path": "99"
    },
    "288": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "290": {
      "op": "NOT"
    },
    "291": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "AND",
      "path": "99"
    },
    "292": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "293": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "294": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "295": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "296": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "297": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "298": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "OR",
      "path": "99"
    },
    "299": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "300": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3866,
        3898
      ],
      "op": "SSTORE",
      "path": "99"
    },
    "301": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertSend",
      "offset": [
        3801,
        3905
      ],
      "op": "JUMP",
      "path": "99"
    },
    "302": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "303": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "306": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x13C"
    },
    "309": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "310": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "312": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x77C"
    },
    "315": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMP",
      "path": "99"
    },
    "316": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "317": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x42C"
    },
    "320": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMP",
      "path": "99"
    },
    "321": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "322": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "325": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x14F"
    },
    "328": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "329": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "331": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x9E7"
    },
    "334": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "jump": "i",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMP",
      "path": "99"
    },
    "335": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "336": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x564"
    },
    "339": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "jump": "i",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMP",
      "path": "99"
    },
    "340": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "341": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "344": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x162"
    },
    "347": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "348": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "350": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x9C5"
    },
    "353": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "jump": "i",
      "offset": [
        3911,
        4021
      ],
      "op": "JUMP",
      "path": "99"
    },
    "354": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "355": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        3999
      ],
      "op": "PUSH1",
      "path": "99",
      "statement": 1,
      "value": "0x1"
    },
    "357": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "DUP1",
      "path": "99"
    },
    "358": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SLOAD",
      "path": "99"
    },
    "359": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "360": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "361": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "362": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x100"
    },
    "365": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "MUL",
      "path": "99"
    },
    "366": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "369": {
      "op": "NOT"
    },
    "370": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "371": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "372": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "AND",
      "path": "99"
    },
    "373": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "374": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "375": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "376": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "OR",
      "path": "99"
    },
    "377": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "378": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3979,
        4014
      ],
      "op": "SSTORE",
      "path": "99"
    },
    "379": {
      "fn": "ERC777SenderRecipientMock.setShouldRevertReceive",
      "offset": [
        3911,
        4021
      ],
      "op": "JUMP",
      "path": "99"
    },
    "380": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "381": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "384": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x18A"
    },
    "387": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "388": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "390": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x9E7"
    },
    "393": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "i",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMP",
      "path": "99"
    },
    "394": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "395": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x5FA"
    },
    "398": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "i",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMP",
      "path": "99"
    },
    "399": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "400": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "403": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x19D"
    },
    "406": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "407": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "409": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x9E7"
    },
    "412": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "jump": "i",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMP",
      "path": "99"
    },
    "413": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "414": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x643"
    },
    "417": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "jump": "i",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMP",
      "path": "99"
    },
    "418": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "419": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xC0"
    },
    "422": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x1B0"
    },
    "425": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "CALLDATASIZE",
      "path": "99"
    },
    "426": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "428": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x9E7"
    },
    "431": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "jump": "i",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMP",
      "path": "99"
    },
    "432": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "433": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x688"
    },
    "436": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "jump": "i",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMP",
      "path": "99"
    },
    "437": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "438": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1"
    },
    "440": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "SLOAD",
      "path": "99"
    },
    "441": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x100"
    },
    "444": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "445": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "DIV",
      "path": "99"
    },
    "446": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0xFF"
    },
    "448": {
      "branch": 17,
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2412,
        2432
      ],
      "op": "AND",
      "path": "99"
    },
    "449": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2408,
        2467
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "450": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2408,
        2467
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x1CA"
    },
    "453": {
      "branch": 17,
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2408,
        2467
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "454": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2448,
        2456
      ],
      "op": "PUSH1",
      "path": "99",
      "statement": 2,
      "value": "0x0"
    },
    "456": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2448,
        2456
      ],
      "op": "DUP1",
      "path": "99"
    },
    "457": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2448,
        2456
      ],
      "op": "REVERT",
      "path": "99"
    },
    "458": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2408,
        2467
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "459": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2477,
        2490
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "461": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "202",
      "statement": 3
    },
    "462": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "464": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "465": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "470": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "472": {
      "op": "SHL"
    },
    "473": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP2",
      "path": "99"
    },
    "474": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "475": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "477": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "479": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "481": {
      "op": "SHL"
    },
    "482": {
      "op": "SUB"
    },
    "483": {
      "op": "DUP11"
    },
    "484": {
      "op": "DUP2"
    },
    "485": {
      "op": "AND"
    },
    "486": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "488": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP4",
      "path": "99"
    },
    "489": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ADD",
      "path": "99"
    },
    "490": {
      "op": "MSTORE"
    },
    "491": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2477,
        2514
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "492": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2477,
        2514
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "493": {
      "op": "POP"
    },
    "494": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2525,
        2544
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "496": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2525,
        2544
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "497": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "DUP4",
      "path": "99"
    },
    "498": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "AND",
      "path": "99"
    },
    "499": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "500": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x70A08231"
    },
    "505": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2562
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "506": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "508": {
      "op": "ADD"
    },
    "509": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x20"
    },
    "511": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "513": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "514": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "99"
    },
    "515": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP4",
      "path": "99"
    },
    "516": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "SUB",
      "path": "99"
    },
    "517": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP2",
      "path": "99"
    },
    "518": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP7",
      "path": "99"
    },
    "519": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "GAS",
      "path": "99"
    },
    "520": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "STATICCALL",
      "path": "99"
    },
    "521": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "522": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "99"
    },
    "523": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "524": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x219"
    },
    "527": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "528": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "529": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "531": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "99"
    },
    "532": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "RETURNDATACOPY",
      "path": "99"
    },
    "533": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "534": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "536": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "REVERT",
      "path": "99"
    },
    "537": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "538": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "99"
    },
    "539": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "99"
    },
    "540": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "99"
    },
    "541": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "99"
    },
    "542": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "544": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "545": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "546": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1F"
    },
    "548": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "NOT",
      "path": "99"
    },
    "549": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1F"
    },
    "551": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP3",
      "path": "99"
    },
    "552": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ADD",
      "path": "99"
    },
    "553": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "AND",
      "path": "99"
    },
    "554": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP3",
      "path": "99"
    },
    "555": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ADD",
      "path": "99"
    },
    "556": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP1",
      "path": "99"
    },
    "557": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "559": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "560": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "POP",
      "path": "99"
    },
    "561": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "DUP2",
      "path": "99"
    },
    "562": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "ADD",
      "path": "99"
    },
    "563": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "564": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x23D"
    },
    "567": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "568": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "569": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xA04"
    },
    "572": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMP",
      "path": "99"
    },
    "573": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2547,
        2568
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "574": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "576": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "577": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "582": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "584": {
      "op": "SHL"
    },
    "585": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP2",
      "path": "99"
    },
    "586": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "587": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "589": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "591": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "593": {
      "op": "SHL"
    },
    "594": {
      "op": "SUB"
    },
    "595": {
      "op": "DUP11"
    },
    "596": {
      "op": "DUP2"
    },
    "597": {
      "op": "AND"
    },
    "598": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "600": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP4",
      "path": "99"
    },
    "601": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ADD",
      "path": "99"
    },
    "602": {
      "op": "MSTORE"
    },
    "603": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2525,
        2568
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "604": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2525,
        2568
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "605": {
      "op": "POP"
    },
    "606": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2674,
        2691
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "608": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2674,
        2691
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "609": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "DUP5",
      "path": "99"
    },
    "610": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "AND",
      "path": "99"
    },
    "611": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "612": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x70A08231"
    },
    "617": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2709
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "618": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "620": {
      "op": "ADD"
    },
    "621": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x20"
    },
    "623": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "625": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "626": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "99"
    },
    "627": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP4",
      "path": "99"
    },
    "628": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "SUB",
      "path": "99"
    },
    "629": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP2",
      "path": "99"
    },
    "630": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP7",
      "path": "99"
    },
    "631": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "GAS",
      "path": "99"
    },
    "632": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "STATICCALL",
      "path": "99"
    },
    "633": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "634": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "99"
    },
    "635": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "636": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x289"
    },
    "639": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "640": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "641": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "643": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "99"
    },
    "644": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "RETURNDATACOPY",
      "path": "99"
    },
    "645": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "646": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "648": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "REVERT",
      "path": "99"
    },
    "649": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "650": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "99"
    },
    "651": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "99"
    },
    "652": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "99"
    },
    "653": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "99"
    },
    "654": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "656": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "657": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "658": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1F"
    },
    "660": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "NOT",
      "path": "99"
    },
    "661": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1F"
    },
    "663": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP3",
      "path": "99"
    },
    "664": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ADD",
      "path": "99"
    },
    "665": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "AND",
      "path": "99"
    },
    "666": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP3",
      "path": "99"
    },
    "667": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ADD",
      "path": "99"
    },
    "668": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP1",
      "path": "99"
    },
    "669": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "671": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "672": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "POP",
      "path": "99"
    },
    "673": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "DUP2",
      "path": "99"
    },
    "674": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "ADD",
      "path": "99"
    },
    "675": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "676": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x2AD"
    },
    "679": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "680": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "681": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xA04"
    },
    "684": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMP",
      "path": "99"
    },
    "685": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2694,
        2713
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "686": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2674,
        2713
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "687": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2674,
        2713
      ],
      "op": "POP",
      "path": "99"
    },
    "688": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH32",
      "path": "99",
      "statement": 4,
      "value": "0x47E915878C47F3EC4D7FF646A2BECB229F64FD2ABE4D2B5E2BB4275B0CF50D4E"
    },
    "721": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2763,
        2771
      ],
      "op": "DUP12",
      "path": "99"
    },
    "722": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2785,
        2789
      ],
      "op": "DUP12",
      "path": "99"
    },
    "723": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2803,
        2805
      ],
      "op": "DUP12",
      "path": "99"
    },
    "724": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2819,
        2825
      ],
      "op": "DUP12",
      "path": "99"
    },
    "725": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2839,
        2847
      ],
      "op": "DUP12",
      "path": "99"
    },
    "726": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2839,
        2847
      ],
      "op": "DUP12",
      "path": "99"
    },
    "727": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2861,
        2873
      ],
      "op": "DUP12",
      "path": "99"
    },
    "728": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2861,
        2873
      ],
      "op": "DUP12",
      "path": "99"
    },
    "729": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2895,
        2900
      ],
      "op": "DUP12",
      "path": "99"
    },
    "730": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2915,
        2926
      ],
      "op": "DUP12",
      "path": "99"
    },
    "731": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2940,
        2949
      ],
      "op": "DUP12",
      "path": "99"
    },
    "732": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "734": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "735": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x2F2"
    },
    "738": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP12",
      "path": "99"
    },
    "739": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP11",
      "path": "99"
    },
    "740": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP10",
      "path": "99"
    },
    "741": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP9",
      "path": "99"
    },
    "742": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP8",
      "path": "99"
    },
    "743": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP7",
      "path": "99"
    },
    "744": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP6",
      "path": "99"
    },
    "745": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP5",
      "path": "99"
    },
    "746": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP4",
      "path": "99"
    },
    "747": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "748": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "749": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "750": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xA46"
    },
    "753": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "i",
      "offset": [
        2729,
        2959
      ],
      "op": "JUMP",
      "path": "99"
    },
    "754": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "755": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "757": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "758": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "DUP1",
      "path": "99"
    },
    "759": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "760": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SUB",
      "path": "99"
    },
    "761": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "762": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2729,
        2959
      ],
      "op": "LOG1",
      "path": "99"
    },
    "763": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2398,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "764": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2398,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "765": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2398,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "766": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "767": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "768": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "769": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "770": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "771": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "772": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "773": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "offset": [
        2188,
        2966
      ],
      "op": "POP",
      "path": "99"
    },
    "774": {
      "fn": "ERC777SenderRecipientMock.tokensReceived",
      "jump": "o",
      "offset": [
        2188,
        2966
      ],
      "op": "JUMP",
      "path": "99"
    },
    "775": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "JUMPDEST",
      "path": "219"
    },
    "776": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        954,
        961
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x0"
    },
    "778": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "DUP3",
      "path": "219",
      "statement": 5
    },
    "779": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "DUP2",
      "path": "219"
    },
    "780": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "MSTORE",
      "path": "219"
    },
    "781": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x20"
    },
    "783": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "DUP2",
      "path": "219"
    },
    "784": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "DUP2",
      "path": "219"
    },
    "785": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "MSTORE",
      "path": "219"
    },
    "786": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x40"
    },
    "788": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "DUP1",
      "path": "219"
    },
    "789": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "DUP4",
      "path": "219"
    },
    "790": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1019
      ],
      "op": "KECCAK256",
      "path": "219"
    },
    "791": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "795": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "797": {
      "op": "SHL"
    },
    "798": {
      "op": "SUB"
    },
    "799": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "DUP6",
      "path": "219"
    },
    "800": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "AND",
      "path": "219"
    },
    "801": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "DUP5",
      "path": "219"
    },
    "802": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "MSTORE",
      "path": "219"
    },
    "803": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "SWAP1",
      "path": "219"
    },
    "804": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "SWAP2",
      "path": "219"
    },
    "805": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "MSTORE",
      "path": "219"
    },
    "806": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "DUP2",
      "path": "219"
    },
    "807": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "KECCAK256",
      "path": "219"
    },
    "808": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "SLOAD",
      "path": "219"
    },
    "809": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0xFF"
    },
    "811": {
      "branch": 21,
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1028
      ],
      "op": "AND",
      "path": "219"
    },
    "812": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1068
      ],
      "op": "PUSH2",
      "path": "219",
      "value": "0x336"
    },
    "815": {
      "branch": 21,
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1068
      ],
      "op": "JUMPI",
      "path": "219"
    },
    "816": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        1063,
        1067
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x0"
    },
    "818": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1068
      ],
      "op": "PUSH2",
      "path": "219",
      "value": "0x358"
    },
    "821": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1068
      ],
      "op": "JUMP",
      "path": "219"
    },
    "822": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1068
      ],
      "op": "JUMPDEST",
      "path": "219"
    },
    "823": {
      "offset": [
        588,
        621
      ],
      "op": "PUSH32",
      "path": "219",
      "value": "0xA2EF4600D742022D532D4747CB3547474667D6F13804902513B2EC01C848F4B4"
    },
    "856": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        984,
        1068
      ],
      "op": "JUMPDEST",
      "path": "219"
    },
    "857": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        977,
        1068
      ],
      "op": "SWAP4",
      "path": "219"
    },
    "858": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "offset": [
        795,
        1075
      ],
      "op": "SWAP3",
      "path": "219"
    },
    "859": {
      "op": "POP"
    },
    "860": {
      "op": "POP"
    },
    "861": {
      "op": "POP"
    },
    "862": {
      "fn": "ERC1820Implementer.canImplementInterfaceForAddress",
      "jump": "o",
      "offset": [
        795,
        1075
      ],
      "op": "JUMP",
      "path": "219"
    },
    "863": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "864": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH1",
      "path": "99",
      "statement": 6,
      "value": "0x40"
    },
    "866": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "867": {
      "op": "PUSH4",
      "value": "0x4DECDDE3"
    },
    "872": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "874": {
      "op": "SHL"
    },
    "875": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP2",
      "path": "99"
    },
    "876": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "877": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "879": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "881": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "883": {
      "op": "SHL"
    },
    "884": {
      "op": "SUB"
    },
    "885": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4239
      ],
      "op": "DUP6",
      "path": "99"
    },
    "886": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4239
      ],
      "op": "AND",
      "path": "99"
    },
    "887": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4239
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "888": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4239
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x9BD9BBC6"
    },
    "893": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4239
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "894": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x38F"
    },
    "897": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "898": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4240,
        4242
      ],
      "op": "DUP7",
      "path": "99"
    },
    "899": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4240,
        4242
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "900": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4244,
        4250
      ],
      "op": "DUP7",
      "path": "99"
    },
    "901": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4244,
        4250
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "902": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4252,
        4256
      ],
      "op": "DUP7",
      "path": "99"
    },
    "903": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4252,
        4256
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "904": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "906": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "ADD",
      "path": "99"
    },
    "907": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xB03"
    },
    "910": {
      "fn": "ERC777SenderRecipientMock.send",
      "jump": "i",
      "offset": [
        4229,
        4257
      ],
      "op": "JUMP",
      "path": "99"
    },
    "911": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "912": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "914": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "916": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "917": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP1",
      "path": "99"
    },
    "918": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP4",
      "path": "99"
    },
    "919": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "SUB",
      "path": "99"
    },
    "920": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP2",
      "path": "99"
    },
    "921": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "923": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP8",
      "path": "99"
    },
    "924": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP1",
      "path": "99"
    },
    "925": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "EXTCODESIZE",
      "path": "99"
    },
    "926": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "927": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP1",
      "path": "99"
    },
    "928": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "929": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x3A9"
    },
    "932": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "933": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "935": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP1",
      "path": "99"
    },
    "936": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "REVERT",
      "path": "99"
    },
    "937": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "938": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "POP",
      "path": "99"
    },
    "939": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "GAS",
      "path": "99"
    },
    "940": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "CALL",
      "path": "99"
    },
    "941": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "942": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP1",
      "path": "99"
    },
    "943": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "944": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x3BD"
    },
    "947": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "948": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "949": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "951": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "DUP1",
      "path": "99"
    },
    "952": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "RETURNDATACOPY",
      "path": "99"
    },
    "953": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "954": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "956": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "REVERT",
      "path": "99"
    },
    "957": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "958": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "POP",
      "path": "99"
    },
    "959": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "POP",
      "path": "99"
    },
    "960": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "POP",
      "path": "99"
    },
    "961": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4229,
        4257
      ],
      "op": "POP",
      "path": "99"
    },
    "962": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "POP",
      "path": "99"
    },
    "963": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "POP",
      "path": "99"
    },
    "964": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "POP",
      "path": "99"
    },
    "965": {
      "fn": "ERC777SenderRecipientMock.send",
      "offset": [
        4027,
        4306
      ],
      "op": "POP",
      "path": "99"
    },
    "966": {
      "fn": "ERC777SenderRecipientMock.send",
      "jump": "o",
      "offset": [
        4027,
        4306
      ],
      "op": "JUMP",
      "path": "99"
    },
    "967": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "968": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH1",
      "path": "99",
      "statement": 7,
      "value": "0x40"
    },
    "970": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "971": {
      "op": "PUSH4",
      "value": "0xFE9D9303"
    },
    "976": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "978": {
      "op": "SHL"
    },
    "979": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP2",
      "path": "99"
    },
    "980": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "981": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "983": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "985": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "987": {
      "op": "SHL"
    },
    "988": {
      "op": "SUB"
    },
    "989": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4433
      ],
      "op": "DUP5",
      "path": "99"
    },
    "990": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4433
      ],
      "op": "AND",
      "path": "99"
    },
    "991": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4433
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "992": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4433
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0xFE9D9303"
    },
    "997": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4433
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "998": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x3F5"
    },
    "1001": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1002": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4434,
        4440
      ],
      "op": "DUP6",
      "path": "99"
    },
    "1003": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4434,
        4440
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1004": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4442,
        4446
      ],
      "op": "DUP6",
      "path": "99"
    },
    "1005": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4442,
        4446
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1006": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "1008": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "ADD",
      "path": "99"
    },
    "1009": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xB33"
    },
    "1012": {
      "fn": "ERC777SenderRecipientMock.burn",
      "jump": "i",
      "offset": [
        4423,
        4447
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1013": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1014": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1016": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1018": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1019": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1020": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1021": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "SUB",
      "path": "99"
    },
    "1022": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1023": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1025": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP8",
      "path": "99"
    },
    "1026": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1027": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "EXTCODESIZE",
      "path": "99"
    },
    "1028": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1029": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1030": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1031": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x40F"
    },
    "1034": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1035": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1037": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1038": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "REVERT",
      "path": "99"
    },
    "1039": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1040": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "POP",
      "path": "99"
    },
    "1041": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "GAS",
      "path": "99"
    },
    "1042": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "CALL",
      "path": "99"
    },
    "1043": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1044": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1045": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1046": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x423"
    },
    "1049": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1050": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1051": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1053": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1054": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "RETURNDATACOPY",
      "path": "99"
    },
    "1055": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1056": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1058": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "REVERT",
      "path": "99"
    },
    "1059": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1060": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "POP",
      "path": "99"
    },
    "1061": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "POP",
      "path": "99"
    },
    "1062": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "POP",
      "path": "99"
    },
    "1063": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4423,
        4447
      ],
      "op": "POP",
      "path": "99"
    },
    "1064": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "POP",
      "path": "99"
    },
    "1065": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "POP",
      "path": "99"
    },
    "1066": {
      "fn": "ERC777SenderRecipientMock.burn",
      "offset": [
        4312,
        4454
      ],
      "op": "POP",
      "path": "99"
    },
    "1067": {
      "fn": "ERC777SenderRecipientMock.burn",
      "jump": "o",
      "offset": [
        4312,
        4454
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1068": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1411,
        2182
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1069": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1633,
        1650
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1"
    },
    "1071": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1633,
        1650
      ],
      "op": "SLOAD",
      "path": "99"
    },
    "1072": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1633,
        1650
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0xFF"
    },
    "1074": {
      "branch": 18,
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1633,
        1650
      ],
      "op": "AND",
      "path": "99"
    },
    "1075": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1629,
        1685
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1076": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1629,
        1685
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x43C"
    },
    "1079": {
      "branch": 18,
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1629,
        1685
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1080": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1666,
        1674
      ],
      "op": "PUSH1",
      "path": "99",
      "statement": 8,
      "value": "0x0"
    },
    "1082": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1666,
        1674
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1083": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1666,
        1674
      ],
      "op": "REVERT",
      "path": "99"
    },
    "1084": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1629,
        1685
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1085": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1695,
        1708
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1087": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "202"
    },
    "1088": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1090": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1091": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1096": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1098": {
      "op": "SHL"
    },
    "1099": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1100": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1101": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1103": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1105": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1107": {
      "op": "SHL"
    },
    "1108": {
      "op": "SUB"
    },
    "1109": {
      "op": "DUP11"
    },
    "1110": {
      "op": "DUP2"
    },
    "1111": {
      "op": "AND"
    },
    "1112": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "1114": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1115": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ADD",
      "path": "99"
    },
    "1116": {
      "op": "MSTORE"
    },
    "1117": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1695,
        1732
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1118": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1695,
        1732
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "1119": {
      "op": "POP"
    },
    "1120": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1743,
        1762
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1122": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1743,
        1762
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1123": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1124": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "AND",
      "path": "99"
    },
    "1125": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1126": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x70A08231"
    },
    "1131": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1780
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1132": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1134": {
      "op": "ADD"
    },
    "1135": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x20"
    },
    "1137": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1139": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1140": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1141": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1142": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "SUB",
      "path": "99"
    },
    "1143": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1144": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP7",
      "path": "99"
    },
    "1145": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "GAS",
      "path": "99"
    },
    "1146": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "STATICCALL",
      "path": "99"
    },
    "1147": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1148": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1149": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1150": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x48B"
    },
    "1153": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1154": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1155": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1157": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1158": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "RETURNDATACOPY",
      "path": "99"
    },
    "1159": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1160": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1162": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "REVERT",
      "path": "99"
    },
    "1163": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1164": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "99"
    },
    "1165": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "99"
    },
    "1166": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "99"
    },
    "1167": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "99"
    },
    "1168": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1170": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1171": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1172": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1F"
    },
    "1174": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "NOT",
      "path": "99"
    },
    "1175": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1F"
    },
    "1177": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1178": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ADD",
      "path": "99"
    },
    "1179": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "AND",
      "path": "99"
    },
    "1180": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1181": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ADD",
      "path": "99"
    },
    "1182": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1183": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1185": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1186": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "POP",
      "path": "99"
    },
    "1187": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1188": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "ADD",
      "path": "99"
    },
    "1189": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1190": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x4AF"
    },
    "1193": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1194": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1195": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xA04"
    },
    "1198": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1199": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1765,
        1786
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1200": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1202": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1203": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1208": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1210": {
      "op": "SHL"
    },
    "1211": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1212": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1213": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1215": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1217": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1219": {
      "op": "SHL"
    },
    "1220": {
      "op": "SUB"
    },
    "1221": {
      "op": "DUP11"
    },
    "1222": {
      "op": "DUP2"
    },
    "1223": {
      "op": "AND"
    },
    "1224": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "1226": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1227": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ADD",
      "path": "99"
    },
    "1228": {
      "op": "MSTORE"
    },
    "1229": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1743,
        1786
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1230": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1743,
        1786
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "1231": {
      "op": "POP"
    },
    "1232": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1892,
        1909
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1234": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1892,
        1909
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1235": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "DUP5",
      "path": "99"
    },
    "1236": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "AND",
      "path": "99"
    },
    "1237": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1238": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x70A08231"
    },
    "1243": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1927
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1244": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1246": {
      "op": "ADD"
    },
    "1247": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x20"
    },
    "1249": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1251": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1252": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1253": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1254": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "SUB",
      "path": "99"
    },
    "1255": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1256": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP7",
      "path": "99"
    },
    "1257": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "GAS",
      "path": "99"
    },
    "1258": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "STATICCALL",
      "path": "99"
    },
    "1259": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1260": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1261": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1262": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x4FB"
    },
    "1265": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1266": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1267": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1269": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1270": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "RETURNDATACOPY",
      "path": "99"
    },
    "1271": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1272": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1274": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "REVERT",
      "path": "99"
    },
    "1275": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1276": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "99"
    },
    "1277": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "99"
    },
    "1278": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "99"
    },
    "1279": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "99"
    },
    "1280": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1282": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1283": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1284": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1F"
    },
    "1286": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "NOT",
      "path": "99"
    },
    "1287": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x1F"
    },
    "1289": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1290": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ADD",
      "path": "99"
    },
    "1291": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "AND",
      "path": "99"
    },
    "1292": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1293": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ADD",
      "path": "99"
    },
    "1294": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1295": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1297": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1298": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "POP",
      "path": "99"
    },
    "1299": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1300": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "ADD",
      "path": "99"
    },
    "1301": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1302": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x51F"
    },
    "1305": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1306": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1307": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xA04"
    },
    "1310": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1311": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1912,
        1931
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1312": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1892,
        1931
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1313": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1892,
        1931
      ],
      "op": "POP",
      "path": "99"
    },
    "1314": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "PUSH32",
      "path": "99",
      "statement": 9,
      "value": "0xAA3E88ACA472E90221DAF7D3D601ABAFB62B120319089D7A2C2F63588DA85529"
    },
    "1347": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1979,
        1987
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1348": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2001,
        2005
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1349": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2019,
        2021
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1350": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2035,
        2041
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1351": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2055,
        2063
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1352": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2055,
        2063
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1353": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2077,
        2089
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1354": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2077,
        2089
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1355": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2111,
        2116
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1356": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2131,
        2142
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1357": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        2156,
        2165
      ],
      "op": "DUP12",
      "path": "99"
    },
    "1358": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1360": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1361": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x2F2"
    },
    "1364": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP12",
      "path": "99"
    },
    "1365": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP11",
      "path": "99"
    },
    "1366": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP10",
      "path": "99"
    },
    "1367": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP9",
      "path": "99"
    },
    "1368": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP8",
      "path": "99"
    },
    "1369": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP7",
      "path": "99"
    },
    "1370": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP6",
      "path": "99"
    },
    "1371": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP5",
      "path": "99"
    },
    "1372": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP4",
      "path": "99"
    },
    "1373": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "1374": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1375": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1376": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "offset": [
        1947,
        2175
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0xA46"
    },
    "1379": {
      "fn": "ERC777SenderRecipientMock.tokensToSend",
      "jump": "i",
      "offset": [
        1947,
        2175
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1380": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1381": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "PUSH1",
      "path": "99",
      "statement": 10,
      "value": "0x1"
    },
    "1383": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SLOAD",
      "path": "99"
    },
    "1384": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1386": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1387": {
      "op": "PUSH4",
      "value": "0x29965A1D"
    },
    "1392": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1394": {
      "op": "SHL"
    },
    "1395": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1396": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1397": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3737,
        3741
      ],
      "op": "ADDRESS",
      "path": "99"
    },
    "1398": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "1400": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1401": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ADD",
      "path": "99"
    },
    "1402": {
      "op": "MSTORE"
    },
    "1403": {
      "offset": [
        1370,
        1404
      ],
      "op": "PUSH32",
      "path": "99",
      "value": "0xB281FC8C12954D22544DB45DE3159A39272895B169A852B314F9CC762E44C53B"
    },
    "1436": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1438": {
      "op": "DUP3"
    },
    "1439": {
      "op": "ADD"
    },
    "1440": {
      "op": "MSTORE"
    },
    "1441": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1443": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1445": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1447": {
      "op": "SHL"
    },
    "1448": {
      "op": "SUB"
    },
    "1449": {
      "op": "DUP4"
    },
    "1450": {
      "op": "DUP2"
    },
    "1451": {
      "op": "AND"
    },
    "1452": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1454": {
      "op": "DUP4"
    },
    "1455": {
      "op": "ADD"
    },
    "1456": {
      "op": "MSTORE"
    },
    "1457": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "PUSH3",
      "path": "99",
      "value": "0x10000"
    },
    "1461": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1462": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "1463": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "DIV",
      "path": "99"
    },
    "1464": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1465": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1466": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "AND",
      "path": "99"
    },
    "1467": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3704
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1468": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3728
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x29965A1D"
    },
    "1473": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3728
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1474": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1476": {
      "op": "ADD"
    },
    "1477": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1478": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1480": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1482": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1483": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1484": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP4",
      "path": "99"
    },
    "1485": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "SUB",
      "path": "99"
    },
    "1486": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1487": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1489": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP8",
      "path": "99"
    },
    "1490": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1491": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "EXTCODESIZE",
      "path": "99"
    },
    "1492": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1493": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1494": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1495": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x5DF"
    },
    "1498": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1499": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1501": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1502": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "REVERT",
      "path": "99"
    },
    "1503": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1504": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "99"
    },
    "1505": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "GAS",
      "path": "99"
    },
    "1506": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "CALL",
      "path": "99"
    },
    "1507": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1508": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1509": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "ISZERO",
      "path": "99"
    },
    "1510": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x5F3"
    },
    "1513": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1514": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1515": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1517": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "DUP1",
      "path": "99"
    },
    "1518": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "RETURNDATACOPY",
      "path": "99"
    },
    "1519": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "RETURNDATASIZE",
      "path": "99"
    },
    "1520": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x0"
    },
    "1522": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "REVERT",
      "path": "99"
    },
    "1523": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1524": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "99"
    },
    "1525": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "99"
    },
    "1526": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "99"
    },
    "1527": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3696,
        3788
      ],
      "op": "POP",
      "path": "99"
    },
    "1528": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "offset": [
        3633,
        3795
      ],
      "op": "POP",
      "path": "99"
    },
    "1529": {
      "fn": "ERC777SenderRecipientMock.registerRecipient",
      "jump": "o",
      "offset": [
        3633,
        3795
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1530": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1531": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3025,
        3093
      ],
      "op": "PUSH2",
      "path": "99",
      "statement": 11,
      "value": "0x624"
    },
    "1534": {
      "offset": [
        1273,
        1304
      ],
      "op": "PUSH32",
      "path": "99",
      "value": "0x29DDB589B1FB5FC7CF394961C1ADF5F8C6454761ADF795E67FE149F658ABE895"
    },
    "1567": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3085,
        3092
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1568": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3025,
        3053
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x6ED"
    },
    "1571": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "i",
      "offset": [
        3025,
        3093
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1572": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3025,
        3093
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1573": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3127,
        3131
      ],
      "op": "ADDRESS",
      "path": "99"
    },
    "1574": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1576": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1578": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1580": {
      "op": "SHL"
    },
    "1581": {
      "op": "SUB"
    },
    "1582": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1583": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "AND",
      "path": "99"
    },
    "1584": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1585": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1586": {
      "branch": 19,
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3146,
        3161
      ],
      "op": "SUB",
      "path": "99"
    },
    "1587": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3142,
        3208
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x63F"
    },
    "1590": {
      "branch": 19,
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3142,
        3208
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1591": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3177,
        3197
      ],
      "op": "PUSH2",
      "path": "99",
      "statement": 12,
      "value": "0x63F"
    },
    "1594": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3192,
        3196
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1595": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3177,
        3191
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x688"
    },
    "1598": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "i",
      "offset": [
        3177,
        3197
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1599": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3177,
        3197
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1600": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        3015,
        3214
      ],
      "op": "POP",
      "path": "99"
    },
    "1601": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "offset": [
        2972,
        3214
      ],
      "op": "POP",
      "path": "99"
    },
    "1602": {
      "fn": "ERC777SenderRecipientMock.senderFor",
      "jump": "o",
      "offset": [
        2972,
        3214
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1603": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3376,
        3627
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1604": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3432,
        3503
      ],
      "op": "PUSH2",
      "path": "99",
      "statement": 13,
      "value": "0x66D"
    },
    "1607": {
      "offset": [
        1370,
        1404
      ],
      "op": "PUSH32",
      "path": "99",
      "value": "0xB281FC8C12954D22544DB45DE3159A39272895B169A852B314F9CC762E44C53B"
    },
    "1640": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3495,
        3502
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1641": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3432,
        3460
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x6ED"
    },
    "1644": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "jump": "i",
      "offset": [
        3432,
        3503
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1645": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3432,
        3503
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1646": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3537,
        3541
      ],
      "op": "ADDRESS",
      "path": "99"
    },
    "1647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1649": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1651": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1653": {
      "op": "SHL"
    },
    "1654": {
      "op": "SUB"
    },
    "1655": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1656": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "AND",
      "path": "99"
    },
    "1657": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1658": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1659": {
      "branch": 20,
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3556,
        3571
      ],
      "op": "SUB",
      "path": "99"
    },
    "1660": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3552,
        3621
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x63F"
    },
    "1663": {
      "branch": 20,
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3552,
        3621
      ],
      "op": "JUMPI",
      "path": "99"
    },
    "1664": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3587,
        3610
      ],
      "op": "PUSH2",
      "path": "99",
      "statement": 14,
      "value": "0x63F"
    },
    "1667": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3605,
        3609
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1668": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "offset": [
        3587,
        3604
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x564"
    },
    "1671": {
      "fn": "ERC777SenderRecipientMock.recipientFor",
      "jump": "i",
      "offset": [
        3587,
        3610
      ],
      "op": "JUMP",
      "path": "99"
    },
    "1672": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3220,
        3370
      ],
      "op": "JUMPDEST",
      "path": "99"
    },
    "1673": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "PUSH1",
      "path": "99",
      "statement": 15,
      "value": "0x1"
    },
    "1675": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SLOAD",
      "path": "99"
    },
    "1676": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x40"
    },
    "1678": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "MLOAD",
      "path": "99"
    },
    "1679": {
      "op": "PUSH4",
      "value": "0x29965A1D"
    },
    "1684": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1686": {
      "op": "SHL"
    },
    "1687": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "DUP2",
      "path": "99"
    },
    "1688": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "MSTORE",
      "path": "99"
    },
    "1689": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3318,
        3322
      ],
      "op": "ADDRESS",
      "path": "99"
    },
    "1690": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "PUSH1",
      "path": "99",
      "value": "0x4"
    },
    "1692": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "DUP3",
      "path": "99"
    },
    "1693": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "ADD",
      "path": "99"
    },
    "1694": {
      "op": "MSTORE"
    },
    "1695": {
      "offset": [
        1273,
        1304
      ],
      "op": "PUSH32",
      "path": "99",
      "value": "0x29DDB589B1FB5FC7CF394961C1ADF5F8C6454761ADF795E67FE149F658ABE895"
    },
    "1728": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1730": {
      "op": "DUP3"
    },
    "1731": {
      "op": "ADD"
    },
    "1732": {
      "op": "MSTORE"
    },
    "1733": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1739": {
      "op": "SHL"
    },
    "1740": {
      "op": "SUB"
    },
    "1741": {
      "op": "DUP4"
    },
    "1742": {
      "op": "DUP2"
    },
    "1743": {
      "op": "AND"
    },
    "1744": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1746": {
      "op": "DUP4"
    },
    "1747": {
      "op": "ADD"
    },
    "1748": {
      "op": "MSTORE"
    },
    "1749": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "PUSH3",
      "path": "99",
      "value": "0x10000"
    },
    "1753": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1754": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP3",
      "path": "99"
    },
    "1755": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "DIV",
      "path": "99"
    },
    "1756": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1757": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP2",
      "path": "99"
    },
    "1758": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "AND",
      "path": "99"
    },
    "1759": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3285
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1760": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3309
      ],
      "op": "PUSH4",
      "path": "99",
      "value": "0x29965A1D"
    },
    "1765": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3309
      ],
      "op": "SWAP1",
      "path": "99"
    },
    "1766": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1768": {
      "op": "ADD"
    },
    "1769": {
      "fn": "ERC777SenderRecipientMock.registerSender",
      "offset": [
        3277,
        3363
      ],
      "op": "PUSH2",
      "path": "99",
      "value": "0x5C5"
    },
    "1772": {
      "op": "JUMP"
    },
    "1773": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1310,
        1473
      ],
      "op": "JUMPDEST",
      "path": "219"
    },
    "1774": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1435
      ],
      "op": "PUSH1",
      "path": "219",
      "statement": 16,
      "value": "0x0"
    },
    "1776": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "SWAP2",
      "path": "219"
    },
    "1777": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "DUP3",
      "path": "219"
    },
    "1778": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "MSTORE",
      "path": "219"
    },
    "1779": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x20"
    },
    "1781": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "DUP3",
      "path": "219"
    },
    "1782": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "DUP2",
      "path": "219"
    },
    "1783": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "MSTORE",
      "path": "219"
    },
    "1784": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x40"
    },
    "1786": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "DUP1",
      "path": "219"
    },
    "1787": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "DUP5",
      "path": "219"
    },
    "1788": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1450
      ],
      "op": "KECCAK256",
      "path": "219"
    },
    "1789": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1791": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1795": {
      "op": "SHL"
    },
    "1796": {
      "op": "SUB"
    },
    "1797": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "SWAP1",
      "path": "219"
    },
    "1798": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "SWAP4",
      "path": "219"
    },
    "1799": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "AND",
      "path": "219"
    },
    "1800": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "DUP5",
      "path": "219"
    },
    "1801": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "MSTORE",
      "path": "219"
    },
    "1802": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "SWAP2",
      "path": "219"
    },
    "1803": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "SWAP1",
      "path": "219"
    },
    "1804": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "MSTORE",
      "path": "219"
    },
    "1805": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "SWAP1",
      "path": "219"
    },
    "1806": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1459
      ],
      "op": "KECCAK256",
      "path": "219"
    },
    "1807": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1466
      ],
      "op": "DUP1",
      "path": "219"
    },
    "1808": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1466
      ],
      "op": "SLOAD",
      "path": "219"
    },
    "1809": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1811": {
      "op": "NOT"
    },
    "1812": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1466
      ],
      "op": "AND",
      "path": "219"
    },
    "1813": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1462,
        1466
      ],
      "op": "PUSH1",
      "path": "219",
      "value": "0x1"
    },
    "1815": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1466
      ],
      "op": "OR",
      "path": "219"
    },
    "1816": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1466
      ],
      "op": "SWAP1",
      "path": "219"
    },
    "1817": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "offset": [
        1415,
        1466
      ],
      "op": "SSTORE",
      "path": "219"
    },
    "1818": {
      "fn": "ERC1820Implementer._registerInterfaceForAddress",
      "jump": "o",
      "offset": [
        1310,
        1473
      ],
      "op": "JUMP",
      "path": "219"
    },
    "1819": {
      "op": "JUMPDEST"
    },
    "1820": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1822": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1824": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1826": {
      "op": "SHL"
    },
    "1827": {
      "op": "SUB"
    },
    "1828": {
      "op": "DUP2"
    },
    "1829": {
      "op": "AND"
    },
    "1830": {
      "op": "DUP2"
    },
    "1831": {
      "op": "EQ"
    },
    "1832": {
      "op": "PUSH2",
      "value": "0x730"
    },
    "1835": {
      "op": "JUMPI"
    },
    "1836": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1838": {
      "op": "DUP1"
    },
    "1839": {
      "op": "REVERT"
    },
    "1840": {
      "op": "JUMPDEST"
    },
    "1841": {
      "op": "POP"
    },
    "1842": {
      "jump": "o",
      "op": "JUMP"
    },
    "1843": {
      "op": "JUMPDEST"
    },
    "1844": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1846": {
      "op": "DUP1"
    },
    "1847": {
      "op": "DUP4"
    },
    "1848": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1850": {
      "op": "DUP5"
    },
    "1851": {
      "op": "ADD"
    },
    "1852": {
      "op": "SLT"
    },
    "1853": {
      "op": "PUSH2",
      "value": "0x745"
    },
    "1856": {
      "op": "JUMPI"
    },
    "1857": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1859": {
      "op": "DUP1"
    },
    "1860": {
      "op": "REVERT"
    },
    "1861": {
      "op": "JUMPDEST"
    },
    "1862": {
      "op": "POP"
    },
    "1863": {
      "op": "DUP2"
    },
    "1864": {
      "op": "CALLDATALOAD"
    },
    "1865": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1874": {
      "op": "DUP2"
    },
    "1875": {
      "op": "GT"
    },
    "1876": {
      "op": "ISZERO"
    },
    "1877": {
      "op": "PUSH2",
      "value": "0x75D"
    },
    "1880": {
      "op": "JUMPI"
    },
    "1881": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1883": {
      "op": "DUP1"
    },
    "1884": {
      "op": "REVERT"
    },
    "1885": {
      "op": "JUMPDEST"
    },
    "1886": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1888": {
      "op": "DUP4"
    },
    "1889": {
      "op": "ADD"
    },
    "1890": {
      "op": "SWAP2"
    },
    "1891": {
      "op": "POP"
    },
    "1892": {
      "op": "DUP4"
    },
    "1893": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1895": {
      "op": "DUP3"
    },
    "1896": {
      "op": "DUP6"
    },
    "1897": {
      "op": "ADD"
    },
    "1898": {
      "op": "ADD"
    },
    "1899": {
      "op": "GT"
    },
    "1900": {
      "op": "ISZERO"
    },
    "1901": {
      "op": "PUSH2",
      "value": "0x775"
    },
    "1904": {
      "op": "JUMPI"
    },
    "1905": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1907": {
      "op": "DUP1"
    },
    "1908": {
      "op": "REVERT"
    },
    "1909": {
      "op": "JUMPDEST"
    },
    "1910": {
      "op": "SWAP3"
    },
    "1911": {
      "op": "POP"
    },
    "1912": {
      "op": "SWAP3"
    },
    "1913": {
      "op": "SWAP1"
    },
    "1914": {
      "op": "POP"
    },
    "1915": {
      "jump": "o",
      "op": "JUMP"
    },
    "1916": {
      "op": "JUMPDEST"
    },
    "1917": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1919": {
      "op": "DUP1"
    },
    "1920": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1922": {
      "op": "DUP1"
    },
    "1923": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1925": {
      "op": "DUP1"
    },
    "1926": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1928": {
      "op": "DUP1"
    },
    "1929": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "1931": {
      "op": "DUP10"
    },
    "1932": {
      "op": "DUP12"
    },
    "1933": {
      "op": "SUB"
    },
    "1934": {
      "op": "SLT"
    },
    "1935": {
      "op": "ISZERO"
    },
    "1936": {
      "op": "PUSH2",
      "value": "0x798"
    },
    "1939": {
      "op": "JUMPI"
    },
    "1940": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1942": {
      "op": "DUP1"
    },
    "1943": {
      "op": "REVERT"
    },
    "1944": {
      "op": "JUMPDEST"
    },
    "1945": {
      "op": "DUP9"
    },
    "1946": {
      "op": "CALLDATALOAD"
    },
    "1947": {
      "op": "PUSH2",
      "value": "0x7A3"
    },
    "1950": {
      "op": "DUP2"
    },
    "1951": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "1954": {
      "jump": "i",
      "op": "JUMP"
    },
    "1955": {
      "op": "JUMPDEST"
    },
    "1956": {
      "op": "SWAP8"
    },
    "1957": {
      "op": "POP"
    },
    "1958": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1960": {
      "op": "DUP10"
    },
    "1961": {
      "op": "ADD"
    },
    "1962": {
      "op": "CALLDATALOAD"
    },
    "1963": {
      "op": "PUSH2",
      "value": "0x7B3"
    },
    "1966": {
      "op": "DUP2"
    },
    "1967": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "1970": {
      "jump": "i",
      "op": "JUMP"
    },
    "1971": {
      "op": "JUMPDEST"
    },
    "1972": {
      "op": "SWAP7"
    },
    "1973": {
      "op": "POP"
    },
    "1974": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1976": {
      "op": "DUP10"
    },
    "1977": {
      "op": "ADD"
    },
    "1978": {
      "op": "CALLDATALOAD"
    },
    "1979": {
      "op": "PUSH2",
      "value": "0x7C3"
    },
    "1982": {
      "op": "DUP2"
    },
    "1983": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "1986": {
      "jump": "i",
      "op": "JUMP"
    },
    "1987": {
      "op": "JUMPDEST"
    },
    "1988": {
      "op": "SWAP6"
    },
    "1989": {
      "op": "POP"
    },
    "1990": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1992": {
      "op": "DUP10"
    },
    "1993": {
      "op": "ADD"
    },
    "1994": {
      "op": "CALLDATALOAD"
    },
    "1995": {
      "op": "SWAP5"
    },
    "1996": {
      "op": "POP"
    },
    "1997": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1999": {
      "op": "DUP10"
    },
    "2000": {
      "op": "ADD"
    },
    "2001": {
      "op": "CALLDATALOAD"
    },
    "2002": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2011": {
      "op": "DUP1"
    },
    "2012": {
      "op": "DUP3"
    },
    "2013": {
      "op": "GT"
    },
    "2014": {
      "op": "ISZERO"
    },
    "2015": {
      "op": "PUSH2",
      "value": "0x7E7"
    },
    "2018": {
      "op": "JUMPI"
    },
    "2019": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2021": {
      "op": "DUP1"
    },
    "2022": {
      "op": "REVERT"
    },
    "2023": {
      "op": "JUMPDEST"
    },
    "2024": {
      "op": "PUSH2",
      "value": "0x7F3"
    },
    "2027": {
      "op": "DUP13"
    },
    "2028": {
      "op": "DUP4"
    },
    "2029": {
      "op": "DUP14"
    },
    "2030": {
      "op": "ADD"
    },
    "2031": {
      "op": "PUSH2",
      "value": "0x733"
    },
    "2034": {
      "jump": "i",
      "op": "JUMP"
    },
    "2035": {
      "op": "JUMPDEST"
    },
    "2036": {
      "op": "SWAP1"
    },
    "2037": {
      "op": "SWAP7"
    },
    "2038": {
      "op": "POP"
    },
    "2039": {
      "op": "SWAP5"
    },
    "2040": {
      "op": "POP"
    },
    "2041": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2043": {
      "op": "DUP12"
    },
    "2044": {
      "op": "ADD"
    },
    "2045": {
      "op": "CALLDATALOAD"
    },
    "2046": {
      "op": "SWAP2"
    },
    "2047": {
      "op": "POP"
    },
    "2048": {
      "op": "DUP1"
    },
    "2049": {
      "op": "DUP3"
    },
    "2050": {
      "op": "GT"
    },
    "2051": {
      "op": "ISZERO"
    },
    "2052": {
      "op": "PUSH2",
      "value": "0x80C"
    },
    "2055": {
      "op": "JUMPI"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2058": {
      "op": "DUP1"
    },
    "2059": {
      "op": "REVERT"
    },
    "2060": {
      "op": "JUMPDEST"
    },
    "2061": {
      "op": "POP"
    },
    "2062": {
      "op": "PUSH2",
      "value": "0x819"
    },
    "2065": {
      "op": "DUP12"
    },
    "2066": {
      "op": "DUP3"
    },
    "2067": {
      "op": "DUP13"
    },
    "2068": {
      "op": "ADD"
    },
    "2069": {
      "op": "PUSH2",
      "value": "0x733"
    },
    "2072": {
      "jump": "i",
      "op": "JUMP"
    },
    "2073": {
      "op": "JUMPDEST"
    },
    "2074": {
      "op": "SWAP10"
    },
    "2075": {
      "op": "SWAP13"
    },
    "2076": {
      "op": "SWAP9"
    },
    "2077": {
      "op": "SWAP12"
    },
    "2078": {
      "op": "POP"
    },
    "2079": {
      "op": "SWAP7"
    },
    "2080": {
      "op": "SWAP10"
    },
    "2081": {
      "op": "POP"
    },
    "2082": {
      "op": "SWAP5"
    },
    "2083": {
      "op": "SWAP8"
    },
    "2084": {
      "op": "SWAP4"
    },
    "2085": {
      "op": "SWAP7"
    },
    "2086": {
      "op": "SWAP3"
    },
    "2087": {
      "op": "SWAP6"
    },
    "2088": {
      "op": "SWAP5"
    },
    "2089": {
      "op": "POP"
    },
    "2090": {
      "op": "POP"
    },
    "2091": {
      "op": "POP"
    },
    "2092": {
      "jump": "o",
      "op": "JUMP"
    },
    "2093": {
      "op": "JUMPDEST"
    },
    "2094": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2096": {
      "op": "DUP1"
    },
    "2097": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2099": {
      "op": "DUP4"
    },
    "2100": {
      "op": "DUP6"
    },
    "2101": {
      "op": "SUB"
    },
    "2102": {
      "op": "SLT"
    },
    "2103": {
      "op": "ISZERO"
    },
    "2104": {
      "op": "PUSH2",
      "value": "0x840"
    },
    "2107": {
      "op": "JUMPI"
    },
    "2108": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2110": {
      "op": "DUP1"
    },
    "2111": {
      "op": "REVERT"
    },
    "2112": {
      "op": "JUMPDEST"
    },
    "2113": {
      "op": "DUP3"
    },
    "2114": {
      "op": "CALLDATALOAD"
    },
    "2115": {
      "op": "SWAP2"
    },
    "2116": {
      "op": "POP"
    },
    "2117": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2119": {
      "op": "DUP4"
    },
    "2120": {
      "op": "ADD"
    },
    "2121": {
      "op": "CALLDATALOAD"
    },
    "2122": {
      "op": "PUSH2",
      "value": "0x852"
    },
    "2125": {
      "op": "DUP2"
    },
    "2126": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "2129": {
      "jump": "i",
      "op": "JUMP"
    },
    "2130": {
      "op": "JUMPDEST"
    },
    "2131": {
      "op": "DUP1"
    },
    "2132": {
      "op": "SWAP2"
    },
    "2133": {
      "op": "POP"
    },
    "2134": {
      "op": "POP"
    },
    "2135": {
      "op": "SWAP3"
    },
    "2136": {
      "op": "POP"
    },
    "2137": {
      "op": "SWAP3"
    },
    "2138": {
      "op": "SWAP1"
    },
    "2139": {
      "op": "POP"
    },
    "2140": {
      "jump": "o",
      "op": "JUMP"
    },
    "2141": {
      "op": "JUMPDEST"
    },
    "2142": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2147": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2149": {
      "op": "SHL"
    },
    "2150": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2152": {
      "op": "MSTORE"
    },
    "2153": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "2155": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2157": {
      "op": "MSTORE"
    },
    "2158": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2160": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2162": {
      "op": "REVERT"
    },
    "2163": {
      "op": "JUMPDEST"
    },
    "2164": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2166": {
      "op": "DUP3"
    },
    "2167": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2169": {
      "op": "DUP4"
    },
    "2170": {
      "op": "ADD"
    },
    "2171": {
      "op": "SLT"
    },
    "2172": {
      "op": "PUSH2",
      "value": "0x884"
    },
    "2175": {
      "op": "JUMPI"
    },
    "2176": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2178": {
      "op": "DUP1"
    },
    "2179": {
      "op": "REVERT"
    },
    "2180": {
      "op": "JUMPDEST"
    },
    "2181": {
      "op": "DUP2"
    },
    "2182": {
      "op": "CALLDATALOAD"
    },
    "2183": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2192": {
      "op": "DUP1"
    },
    "2193": {
      "op": "DUP3"
    },
    "2194": {
      "op": "GT"
    },
    "2195": {
      "op": "ISZERO"
    },
    "2196": {
      "op": "PUSH2",
      "value": "0x89F"
    },
    "2199": {
      "op": "JUMPI"
    },
    "2200": {
      "op": "PUSH2",
      "value": "0x89F"
    },
    "2203": {
      "op": "PUSH2",
      "value": "0x85D"
    },
    "2206": {
      "jump": "i",
      "op": "JUMP"
    },
    "2207": {
      "op": "JUMPDEST"
    },
    "2208": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2210": {
      "op": "MLOAD"
    },
    "2211": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2213": {
      "op": "DUP4"
    },
    "2214": {
      "op": "ADD"
    },
    "2215": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2217": {
      "op": "NOT"
    },
    "2218": {
      "op": "SWAP1"
    },
    "2219": {
      "op": "DUP2"
    },
    "2220": {
      "op": "AND"
    },
    "2221": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "2223": {
      "op": "ADD"
    },
    "2224": {
      "op": "AND"
    },
    "2225": {
      "op": "DUP2"
    },
    "2226": {
      "op": "ADD"
    },
    "2227": {
      "op": "SWAP1"
    },
    "2228": {
      "op": "DUP3"
    },
    "2229": {
      "op": "DUP3"
    },
    "2230": {
      "op": "GT"
    },
    "2231": {
      "op": "DUP2"
    },
    "2232": {
      "op": "DUP4"
    },
    "2233": {
      "op": "LT"
    },
    "2234": {
      "op": "OR"
    },
    "2235": {
      "op": "ISZERO"
    },
    "2236": {
      "op": "PUSH2",
      "value": "0x8C7"
    },
    "2239": {
      "op": "JUMPI"
    },
    "2240": {
      "op": "PUSH2",
      "value": "0x8C7"
    },
    "2243": {
      "op": "PUSH2",
      "value": "0x85D"
    },
    "2246": {
      "jump": "i",
      "op": "JUMP"
    },
    "2247": {
      "op": "JUMPDEST"
    },
    "2248": {
      "op": "DUP2"
    },
    "2249": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2251": {
      "op": "MSTORE"
    },
    "2252": {
      "op": "DUP4"
    },
    "2253": {
      "op": "DUP2"
    },
    "2254": {
      "op": "MSTORE"
    },
    "2255": {
      "op": "DUP7"
    },
    "2256": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2258": {
      "op": "DUP6"
    },
    "2259": {
      "op": "DUP9"
    },
    "2260": {
      "op": "ADD"
    },
    "2261": {
      "op": "ADD"
    },
    "2262": {
      "op": "GT"
    },
    "2263": {
      "op": "ISZERO"
    },
    "2264": {
      "op": "PUSH2",
      "value": "0x8E0"
    },
    "2267": {
      "op": "JUMPI"
    },
    "2268": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2270": {
      "op": "DUP1"
    },
    "2271": {
      "op": "REVERT"
    },
    "2272": {
      "op": "JUMPDEST"
    },
    "2273": {
      "op": "DUP4"
    },
    "2274": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2276": {
      "op": "DUP8"
    },
    "2277": {
      "op": "ADD"
    },
    "2278": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2280": {
      "op": "DUP4"
    },
    "2281": {
      "op": "ADD"
    },
    "2282": {
      "op": "CALLDATACOPY"
    },
    "2283": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2285": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2287": {
      "op": "DUP6"
    },
    "2288": {
      "op": "DUP4"
    },
    "2289": {
      "op": "ADD"
    },
    "2290": {
      "op": "ADD"
    },
    "2291": {
      "op": "MSTORE"
    },
    "2292": {
      "op": "DUP1"
    },
    "2293": {
      "op": "SWAP5"
    },
    "2294": {
      "op": "POP"
    },
    "2295": {
      "op": "POP"
    },
    "2296": {
      "op": "POP"
    },
    "2297": {
      "op": "POP"
    },
    "2298": {
      "op": "POP"
    },
    "2299": {
      "op": "SWAP3"
    },
    "2300": {
      "op": "SWAP2"
    },
    "2301": {
      "op": "POP"
    },
    "2302": {
      "op": "POP"
    },
    "2303": {
      "jump": "o",
      "op": "JUMP"
    },
    "2304": {
      "op": "JUMPDEST"
    },
    "2305": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2307": {
      "op": "DUP1"
    },
    "2308": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2310": {
      "op": "DUP1"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2313": {
      "op": "DUP6"
    },
    "2314": {
      "op": "DUP8"
    },
    "2315": {
      "op": "SUB"
    },
    "2316": {
      "op": "SLT"
    },
    "2317": {
      "op": "ISZERO"
    },
    "2318": {
      "op": "PUSH2",
      "value": "0x916"
    },
    "2321": {
      "op": "JUMPI"
    },
    "2322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2324": {
      "op": "DUP1"
    },
    "2325": {
      "op": "REVERT"
    },
    "2326": {
      "op": "JUMPDEST"
    },
    "2327": {
      "op": "DUP5"
    },
    "2328": {
      "op": "CALLDATALOAD"
    },
    "2329": {
      "op": "PUSH2",
      "value": "0x921"
    },
    "2332": {
      "op": "DUP2"
    },
    "2333": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "2336": {
      "jump": "i",
      "op": "JUMP"
    },
    "2337": {
      "op": "JUMPDEST"
    },
    "2338": {
      "op": "SWAP4"
    },
    "2339": {
      "op": "POP"
    },
    "2340": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2342": {
      "op": "DUP6"
    },
    "2343": {
      "op": "ADD"
    },
    "2344": {
      "op": "CALLDATALOAD"
    },
    "2345": {
      "op": "PUSH2",
      "value": "0x931"
    },
    "2348": {
      "op": "DUP2"
    },
    "2349": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "2352": {
      "jump": "i",
      "op": "JUMP"
    },
    "2353": {
      "op": "JUMPDEST"
    },
    "2354": {
      "op": "SWAP3"
    },
    "2355": {
      "op": "POP"
    },
    "2356": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2358": {
      "op": "DUP6"
    },
    "2359": {
      "op": "ADD"
    },
    "2360": {
      "op": "CALLDATALOAD"
    },
    "2361": {
      "op": "SWAP2"
    },
    "2362": {
      "op": "POP"
    },
    "2363": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2365": {
      "op": "DUP6"
    },
    "2366": {
      "op": "ADD"
    },
    "2367": {
      "op": "CALLDATALOAD"
    },
    "2368": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2377": {
      "op": "DUP2"
    },
    "2378": {
      "op": "GT"
    },
    "2379": {
      "op": "ISZERO"
    },
    "2380": {
      "op": "PUSH2",
      "value": "0x954"
    },
    "2383": {
      "op": "JUMPI"
    },
    "2384": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2386": {
      "op": "DUP1"
    },
    "2387": {
      "op": "REVERT"
    },
    "2388": {
      "op": "JUMPDEST"
    },
    "2389": {
      "op": "PUSH2",
      "value": "0x960"
    },
    "2392": {
      "op": "DUP8"
    },
    "2393": {
      "op": "DUP3"
    },
    "2394": {
      "op": "DUP9"
    },
    "2395": {
      "op": "ADD"
    },
    "2396": {
      "op": "PUSH2",
      "value": "0x873"
    },
    "2399": {
      "jump": "i",
      "op": "JUMP"
    },
    "2400": {
      "op": "JUMPDEST"
    },
    "2401": {
      "op": "SWAP2"
    },
    "2402": {
      "op": "POP"
    },
    "2403": {
      "op": "POP"
    },
    "2404": {
      "op": "SWAP3"
    },
    "2405": {
      "op": "SWAP6"
    },
    "2406": {
      "op": "SWAP2"
    },
    "2407": {
      "op": "SWAP5"
    },
    "2408": {
      "op": "POP"
    },
    "2409": {
      "op": "SWAP3"
    },
    "2410": {
      "op": "POP"
    },
    "2411": {
      "jump": "o",
      "op": "JUMP"
    },
    "2412": {
      "op": "JUMPDEST"
    },
    "2413": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2415": {
      "op": "DUP1"
    },
    "2416": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2418": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2420": {
      "op": "DUP5"
    },
    "2421": {
      "op": "DUP7"
    },
    "2422": {
      "op": "SUB"
    },
    "2423": {
      "op": "SLT"
    },
    "2424": {
      "op": "ISZERO"
    },
    "2425": {
      "op": "PUSH2",
      "value": "0x981"
    },
    "2428": {
      "op": "JUMPI"
    },
    "2429": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2431": {
      "op": "DUP1"
    },
    "2432": {
      "op": "REVERT"
    },
    "2433": {
      "op": "JUMPDEST"
    },
    "2434": {
      "op": "DUP4"
    },
    "2435": {
      "op": "CALLDATALOAD"
    },
    "2436": {
      "op": "PUSH2",
      "value": "0x98C"
    },
    "2439": {
      "op": "DUP2"
    },
    "2440": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "2443": {
      "jump": "i",
      "op": "JUMP"
    },
    "2444": {
      "op": "JUMPDEST"
    },
    "2445": {
      "op": "SWAP3"
    },
    "2446": {
      "op": "POP"
    },
    "2447": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2449": {
      "op": "DUP5"
    },
    "2450": {
      "op": "ADD"
    },
    "2451": {
      "op": "CALLDATALOAD"
    },
    "2452": {
      "op": "SWAP2"
    },
    "2453": {
      "op": "POP"
    },
    "2454": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2456": {
      "op": "DUP5"
    },
    "2457": {
      "op": "ADD"
    },
    "2458": {
      "op": "CALLDATALOAD"
    },
    "2459": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2468": {
      "op": "DUP2"
    },
    "2469": {
      "op": "GT"
    },
    "2470": {
      "op": "ISZERO"
    },
    "2471": {
      "op": "PUSH2",
      "value": "0x9AF"
    },
    "2474": {
      "op": "JUMPI"
    },
    "2475": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2477": {
      "op": "DUP1"
    },
    "2478": {
      "op": "REVERT"
    },
    "2479": {
      "op": "JUMPDEST"
    },
    "2480": {
      "op": "PUSH2",
      "value": "0x9BB"
    },
    "2483": {
      "op": "DUP7"
    },
    "2484": {
      "op": "DUP3"
    },
    "2485": {
      "op": "DUP8"
    },
    "2486": {
      "op": "ADD"
    },
    "2487": {
      "op": "PUSH2",
      "value": "0x873"
    },
    "2490": {
      "jump": "i",
      "op": "JUMP"
    },
    "2491": {
      "op": "JUMPDEST"
    },
    "2492": {
      "op": "SWAP2"
    },
    "2493": {
      "op": "POP"
    },
    "2494": {
      "op": "POP"
    },
    "2495": {
      "op": "SWAP3"
    },
    "2496": {
      "op": "POP"
    },
    "2497": {
      "op": "SWAP3"
    },
    "2498": {
      "op": "POP"
    },
    "2499": {
      "op": "SWAP3"
    },
    "2500": {
      "jump": "o",
      "op": "JUMP"
    },
    "2501": {
      "op": "JUMPDEST"
    },
    "2502": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2504": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2506": {
      "op": "DUP3"
    },
    "2507": {
      "op": "DUP5"
    },
    "2508": {
      "op": "SUB"
    },
    "2509": {
      "op": "SLT"
    },
    "2510": {
      "op": "ISZERO"
    },
    "2511": {
      "op": "PUSH2",
      "value": "0x9D7"
    },
    "2514": {
      "op": "JUMPI"
    },
    "2515": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2517": {
      "op": "DUP1"
    },
    "2518": {
      "op": "REVERT"
    },
    "2519": {
      "op": "JUMPDEST"
    },
    "2520": {
      "op": "DUP2"
    },
    "2521": {
      "op": "CALLDATALOAD"
    },
    "2522": {
      "op": "DUP1"
    },
    "2523": {
      "op": "ISZERO"
    },
    "2524": {
      "op": "ISZERO"
    },
    "2525": {
      "op": "DUP2"
    },
    "2526": {
      "op": "EQ"
    },
    "2527": {
      "op": "PUSH2",
      "value": "0x358"
    },
    "2530": {
      "op": "JUMPI"
    },
    "2531": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2533": {
      "op": "DUP1"
    },
    "2534": {
      "op": "REVERT"
    },
    "2535": {
      "op": "JUMPDEST"
    },
    "2536": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2538": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2540": {
      "op": "DUP3"
    },
    "2541": {
      "op": "DUP5"
    },
    "2542": {
      "op": "SUB"
    },
    "2543": {
      "op": "SLT"
    },
    "2544": {
      "op": "ISZERO"
    },
    "2545": {
      "op": "PUSH2",
      "value": "0x9F9"
    },
    "2548": {
      "op": "JUMPI"
    },
    "2549": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2551": {
      "op": "DUP1"
    },
    "2552": {
      "op": "REVERT"
    },
    "2553": {
      "op": "JUMPDEST"
    },
    "2554": {
      "op": "DUP2"
    },
    "2555": {
      "op": "CALLDATALOAD"
    },
    "2556": {
      "op": "PUSH2",
      "value": "0x358"
    },
    "2559": {
      "op": "DUP2"
    },
    "2560": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "2563": {
      "jump": "i",
      "op": "JUMP"
    },
    "2564": {
      "op": "JUMPDEST"
    },
    "2565": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2569": {
      "op": "DUP3"
    },
    "2570": {
      "op": "DUP5"
    },
    "2571": {
      "op": "SUB"
    },
    "2572": {
      "op": "SLT"
    },
    "2573": {
      "op": "ISZERO"
    },
    "2574": {
      "op": "PUSH2",
      "value": "0xA16"
    },
    "2577": {
      "op": "JUMPI"
    },
    "2578": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2580": {
      "op": "DUP1"
    },
    "2581": {
      "op": "REVERT"
    },
    "2582": {
      "op": "JUMPDEST"
    },
    "2583": {
      "op": "POP"
    },
    "2584": {
      "op": "MLOAD"
    },
    "2585": {
      "op": "SWAP2"
    },
    "2586": {
      "op": "SWAP1"
    },
    "2587": {
      "op": "POP"
    },
    "2588": {
      "jump": "o",
      "op": "JUMP"
    },
    "2589": {
      "op": "JUMPDEST"
    },
    "2590": {
      "op": "DUP2"
    },
    "2591": {
      "op": "DUP4"
    },
    "2592": {
      "op": "MSTORE"
    },
    "2593": {
      "op": "DUP2"
    },
    "2594": {
      "op": "DUP2"
    },
    "2595": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2597": {
      "op": "DUP6"
    },
    "2598": {
      "op": "ADD"
    },
    "2599": {
      "op": "CALLDATACOPY"
    },
    "2600": {
      "op": "POP"
    },
    "2601": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2603": {
      "op": "DUP3"
    },
    "2604": {
      "op": "DUP3"
    },
    "2605": {
      "op": "ADD"
    },
    "2606": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2608": {
      "op": "SWAP1"
    },
    "2609": {
      "op": "DUP2"
    },
    "2610": {
      "op": "ADD"
    },
    "2611": {
      "op": "SWAP2"
    },
    "2612": {
      "op": "SWAP1"
    },
    "2613": {
      "op": "SWAP2"
    },
    "2614": {
      "op": "MSTORE"
    },
    "2615": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2617": {
      "op": "SWAP1"
    },
    "2618": {
      "op": "SWAP2"
    },
    "2619": {
      "op": "ADD"
    },
    "2620": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2622": {
      "op": "NOT"
    },
    "2623": {
      "op": "AND"
    },
    "2624": {
      "op": "SWAP1"
    },
    "2625": {
      "op": "SWAP2"
    },
    "2626": {
      "op": "ADD"
    },
    "2627": {
      "op": "ADD"
    },
    "2628": {
      "op": "SWAP1"
    },
    "2629": {
      "jump": "o",
      "op": "JUMP"
    },
    "2630": {
      "op": "JUMPDEST"
    },
    "2631": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2633": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2635": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2637": {
      "op": "SHL"
    },
    "2638": {
      "op": "SUB"
    },
    "2639": {
      "op": "DUP13"
    },
    "2640": {
      "op": "DUP2"
    },
    "2641": {
      "op": "AND"
    },
    "2642": {
      "op": "DUP3"
    },
    "2643": {
      "op": "MSTORE"
    },
    "2644": {
      "op": "DUP12"
    },
    "2645": {
      "op": "DUP2"
    },
    "2646": {
      "op": "AND"
    },
    "2647": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2649": {
      "op": "DUP4"
    },
    "2650": {
      "op": "ADD"
    },
    "2651": {
      "op": "MSTORE"
    },
    "2652": {
      "op": "DUP11"
    },
    "2653": {
      "op": "DUP2"
    },
    "2654": {
      "op": "AND"
    },
    "2655": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2657": {
      "op": "DUP4"
    },
    "2658": {
      "op": "ADD"
    },
    "2659": {
      "op": "MSTORE"
    },
    "2660": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2662": {
      "op": "DUP3"
    },
    "2663": {
      "op": "ADD"
    },
    "2664": {
      "op": "DUP11"
    },
    "2665": {
      "op": "SWAP1"
    },
    "2666": {
      "op": "MSTORE"
    },
    "2667": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "2670": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2672": {
      "op": "DUP4"
    },
    "2673": {
      "op": "ADD"
    },
    "2674": {
      "op": "DUP2"
    },
    "2675": {
      "op": "SWAP1"
    },
    "2676": {
      "op": "MSTORE"
    },
    "2677": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2679": {
      "op": "SWAP2"
    },
    "2680": {
      "op": "PUSH2",
      "value": "0xA84"
    },
    "2683": {
      "op": "DUP5"
    },
    "2684": {
      "op": "DUP4"
    },
    "2685": {
      "op": "ADD"
    },
    "2686": {
      "op": "DUP12"
    },
    "2687": {
      "op": "DUP14"
    },
    "2688": {
      "op": "PUSH2",
      "value": "0xA1D"
    },
    "2691": {
      "jump": "i",
      "op": "JUMP"
    },
    "2692": {
      "op": "JUMPDEST"
    },
    "2693": {
      "op": "SWAP2"
    },
    "2694": {
      "op": "POP"
    },
    "2695": {
      "op": "DUP4"
    },
    "2696": {
      "op": "DUP3"
    },
    "2697": {
      "op": "SUB"
    },
    "2698": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2700": {
      "op": "DUP6"
    },
    "2701": {
      "op": "ADD"
    },
    "2702": {
      "op": "MSTORE"
    },
    "2703": {
      "op": "PUSH2",
      "value": "0xA99"
    },
    "2706": {
      "op": "DUP3"
    },
    "2707": {
      "op": "DUP10"
    },
    "2708": {
      "op": "DUP12"
    },
    "2709": {
      "op": "PUSH2",
      "value": "0xA1D"
    },
    "2712": {
      "jump": "i",
      "op": "JUMP"
    },
    "2713": {
      "op": "JUMPDEST"
    },
    "2714": {
      "op": "SWAP7"
    },
    "2715": {
      "op": "AND"
    },
    "2716": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2718": {
      "op": "DUP5"
    },
    "2719": {
      "op": "ADD"
    },
    "2720": {
      "op": "MSTORE"
    },
    "2721": {
      "op": "POP"
    },
    "2722": {
      "op": "POP"
    },
    "2723": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2725": {
      "op": "DUP2"
    },
    "2726": {
      "op": "ADD"
    },
    "2727": {
      "op": "SWAP3"
    },
    "2728": {
      "op": "SWAP1"
    },
    "2729": {
      "op": "SWAP3"
    },
    "2730": {
      "op": "MSTORE"
    },
    "2731": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "2734": {
      "op": "SWAP1"
    },
    "2735": {
      "op": "SWAP2"
    },
    "2736": {
      "op": "ADD"
    },
    "2737": {
      "op": "MSTORE"
    },
    "2738": {
      "op": "SWAP9"
    },
    "2739": {
      "op": "SWAP8"
    },
    "2740": {
      "op": "POP"
    },
    "2741": {
      "op": "POP"
    },
    "2742": {
      "op": "POP"
    },
    "2743": {
      "op": "POP"
    },
    "2744": {
      "op": "POP"
    },
    "2745": {
      "op": "POP"
    },
    "2746": {
      "op": "POP"
    },
    "2747": {
      "op": "POP"
    },
    "2748": {
      "jump": "o",
      "op": "JUMP"
    },
    "2749": {
      "op": "JUMPDEST"
    },
    "2750": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2752": {
      "op": "DUP2"
    },
    "2753": {
      "op": "MLOAD"
    },
    "2754": {
      "op": "DUP1"
    },
    "2755": {
      "op": "DUP5"
    },
    "2756": {
      "op": "MSTORE"
    },
    "2757": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2759": {
      "op": "JUMPDEST"
    },
    "2760": {
      "op": "DUP2"
    },
    "2761": {
      "op": "DUP2"
    },
    "2762": {
      "op": "LT"
    },
    "2763": {
      "op": "ISZERO"
    },
    "2764": {
      "op": "PUSH2",
      "value": "0xAE3"
    },
    "2767": {
      "op": "JUMPI"
    },
    "2768": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2770": {
      "op": "DUP2"
    },
    "2771": {
      "op": "DUP6"
    },
    "2772": {
      "op": "ADD"
    },
    "2773": {
      "op": "DUP2"
    },
    "2774": {
      "op": "ADD"
    },
    "2775": {
      "op": "MLOAD"
    },
    "2776": {
      "op": "DUP7"
    },
    "2777": {
      "op": "DUP4"
    },
    "2778": {
      "op": "ADD"
    },
    "2779": {
      "op": "DUP3"
    },
    "2780": {
      "op": "ADD"
    },
    "2781": {
      "op": "MSTORE"
    },
    "2782": {
      "op": "ADD"
    },
    "2783": {
      "op": "PUSH2",
      "value": "0xAC7"
    },
    "2786": {
      "op": "JUMP"
    },
    "2787": {
      "op": "JUMPDEST"
    },
    "2788": {
      "op": "POP"
    },
    "2789": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2791": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2793": {
      "op": "DUP3"
    },
    "2794": {
      "op": "DUP7"
    },
    "2795": {
      "op": "ADD"
    },
    "2796": {
      "op": "ADD"
    },
    "2797": {
      "op": "MSTORE"
    },
    "2798": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2800": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2802": {
      "op": "NOT"
    },
    "2803": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2805": {
      "op": "DUP4"
    },
    "2806": {
      "op": "ADD"
    },
    "2807": {
      "op": "AND"
    },
    "2808": {
      "op": "DUP6"
    },
    "2809": {
      "op": "ADD"
    },
    "2810": {
      "op": "ADD"
    },
    "2811": {
      "op": "SWAP2"
    },
    "2812": {
      "op": "POP"
    },
    "2813": {
      "op": "POP"
    },
    "2814": {
      "op": "SWAP3"
    },
    "2815": {
      "op": "SWAP2"
    },
    "2816": {
      "op": "POP"
    },
    "2817": {
      "op": "POP"
    },
    "2818": {
      "jump": "o",
      "op": "JUMP"
    },
    "2819": {
      "op": "JUMPDEST"
    },
    "2820": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2822": {
      "op": "DUP1"
    },
    "2823": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2825": {
      "op": "SHL"
    },
    "2826": {
      "op": "SUB"
    },
    "2827": {
      "op": "DUP5"
    },
    "2828": {
      "op": "AND"
    },
    "2829": {
      "op": "DUP2"
    },
    "2830": {
      "op": "MSTORE"
    },
    "2831": {
      "op": "DUP3"
    },
    "2832": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2834": {
      "op": "DUP3"
    },
    "2835": {
      "op": "ADD"
    },
    "2836": {
      "op": "MSTORE"
    },
    "2837": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2839": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2841": {
      "op": "DUP3"
    },
    "2842": {
      "op": "ADD"
    },
    "2843": {
      "op": "MSTORE"
    },
    "2844": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2846": {
      "op": "PUSH2",
      "value": "0xB2A"
    },
    "2849": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2851": {
      "op": "DUP4"
    },
    "2852": {
      "op": "ADD"
    },
    "2853": {
      "op": "DUP5"
    },
    "2854": {
      "op": "PUSH2",
      "value": "0xABD"
    },
    "2857": {
      "jump": "i",
      "op": "JUMP"
    },
    "2858": {
      "op": "JUMPDEST"
    },
    "2859": {
      "op": "SWAP6"
    },
    "2860": {
      "op": "SWAP5"
    },
    "2861": {
      "op": "POP"
    },
    "2862": {
      "op": "POP"
    },
    "2863": {
      "op": "POP"
    },
    "2864": {
      "op": "POP"
    },
    "2865": {
      "op": "POP"
    },
    "2866": {
      "jump": "o",
      "op": "JUMP"
    },
    "2867": {
      "op": "JUMPDEST"
    },
    "2868": {
      "op": "DUP3"
    },
    "2869": {
      "op": "DUP2"
    },
    "2870": {
      "op": "MSTORE"
    },
    "2871": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2873": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2875": {
      "op": "DUP3"
    },
    "2876": {
      "op": "ADD"
    },
    "2877": {
      "op": "MSTORE"
    },
    "2878": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2880": {
      "op": "PUSH2",
      "value": "0xB4C"
    },
    "2883": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2885": {
      "op": "DUP4"
    },
    "2886": {
      "op": "ADD"
    },
    "2887": {
      "op": "DUP5"
    },
    "2888": {
      "op": "PUSH2",
      "value": "0xABD"
    },
    "2891": {
      "jump": "i",
      "op": "JUMP"
    },
    "2892": {
      "op": "JUMPDEST"
    },
    "2893": {
      "op": "SWAP5"
    },
    "2894": {
      "op": "SWAP4"
    },
    "2895": {
      "op": "POP"
    },
    "2896": {
      "op": "POP"
    },
    "2897": {
      "op": "POP"
    },
    "2898": {
      "op": "POP"
    },
    "2899": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "dca99bdf30c46e50bcdc17f817a402b767d4097e",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC777/IERC777.sol\";\nimport \"../token/ERC777/IERC777Sender.sol\";\nimport \"../token/ERC777/IERC777Recipient.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/introspection/IERC1820Registry.sol\";\nimport \"../utils/introspection/ERC1820Implementer.sol\";\n\ncontract ERC777SenderRecipientMock is Context, IERC777Sender, IERC777Recipient, ERC1820Implementer {\n    event TokensToSendCalled(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData,\n        address token,\n        uint256 fromBalance,\n        uint256 toBalance\n    );\n\n    event TokensReceivedCalled(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData,\n        address token,\n        uint256 fromBalance,\n        uint256 toBalance\n    );\n\n    // Emitted in ERC777Mock. Here for easier decoding\n    event BeforeTokenTransfer();\n\n    bool private _shouldRevertSend;\n    bool private _shouldRevertReceive;\n\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        if (_shouldRevertSend) {\n            revert();\n        }\n\n        IERC777 token = IERC777(_msgSender());\n\n        uint256 fromBalance = token.balanceOf(from);\n        // when called due to burn, to will be the zero address, which will have a balance of 0\n        uint256 toBalance = token.balanceOf(to);\n\n        emit TokensToSendCalled(\n            operator,\n            from,\n            to,\n            amount,\n            userData,\n            operatorData,\n            address(token),\n            fromBalance,\n            toBalance\n        );\n    }\n\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        if (_shouldRevertReceive) {\n            revert();\n        }\n\n        IERC777 token = IERC777(_msgSender());\n\n        uint256 fromBalance = token.balanceOf(from);\n        // when called due to burn, to will be the zero address, which will have a balance of 0\n        uint256 toBalance = token.balanceOf(to);\n\n        emit TokensReceivedCalled(\n            operator,\n            from,\n            to,\n            amount,\n            userData,\n            operatorData,\n            address(token),\n            fromBalance,\n            toBalance\n        );\n    }\n\n    function senderFor(address account) public {\n        _registerInterfaceForAddress(_TOKENS_SENDER_INTERFACE_HASH, account);\n\n        address self = address(this);\n        if (account == self) {\n            registerSender(self);\n        }\n    }\n\n    function registerSender(address sender) public {\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_SENDER_INTERFACE_HASH, sender);\n    }\n\n    function recipientFor(address account) public {\n        _registerInterfaceForAddress(_TOKENS_RECIPIENT_INTERFACE_HASH, account);\n\n        address self = address(this);\n        if (account == self) {\n            registerRecipient(self);\n        }\n    }\n\n    function registerRecipient(address recipient) public {\n        _erc1820.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, recipient);\n    }\n\n    function setShouldRevertSend(bool shouldRevert) public {\n        _shouldRevertSend = shouldRevert;\n    }\n\n    function setShouldRevertReceive(bool shouldRevert) public {\n        _shouldRevertReceive = shouldRevert;\n    }\n\n    function send(\n        IERC777 token,\n        address to,\n        uint256 amount,\n        bytes memory data\n    ) public {\n        // This is 777's send function, not the Solidity send function\n        token.send(to, amount, data); // solhint-disable-line check-send-result\n    }\n\n    function burn(\n        IERC777 token,\n        uint256 amount,\n        bytes memory data\n    ) public {\n        token.burn(amount, data);\n    }\n}\n",
  "sourceMap": "329:4127:99:-:0;;;1113:96;;;-1:-1:-1;;;;;;1113:96:99;;;;;329:4127;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin-solidity/contracts/mocks/ERC777SenderRecipientMock.sol",
  "type": "contract"
}