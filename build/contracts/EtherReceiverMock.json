{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "acceptEther",
          "type": "bool"
        }
      ],
      "name": "setAcceptEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "allSourcePaths": {
    "102": "contracts/openzeppelin-solidity/contracts/mocks/EtherReceiverMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-solidity/contracts/mocks/EtherReceiverMock.sol",
    "exportedSymbols": {
      "EtherReceiverMock": [
        15076
      ]
    },
    "id": 15077,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15052,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:102"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "EtherReceiverMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 15076,
        "linearizedBaseContracts": [
          15076
        ],
        "name": "EtherReceiverMock",
        "nameLocation": "67:17:102",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 15054,
            "mutability": "mutable",
            "name": "_acceptEther",
            "nameLocation": "104:12:102",
            "nodeType": "VariableDeclaration",
            "scope": 15076,
            "src": "91:25:102",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 15053,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "91:4:102",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 15063,
              "nodeType": "Block",
              "src": "172:43:102",
              "statements": [
                {
                  "expression": {
                    "id": 15061,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 15059,
                      "name": "_acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15054,
                      "src": "182:12:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 15060,
                      "name": "acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15056,
                      "src": "197:11:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "182:26:102",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 15062,
                  "nodeType": "ExpressionStatement",
                  "src": "182:26:102"
                }
              ]
            },
            "functionSelector": "4fea120c",
            "id": 15064,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setAcceptEther",
            "nameLocation": "132:14:102",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15057,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15056,
                  "mutability": "mutable",
                  "name": "acceptEther",
                  "nameLocation": "152:11:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 15064,
                  "src": "147:16:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 15055,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "147:4:102",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "146:18:102"
            },
            "returnParameters": {
              "id": 15058,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "172:0:102"
            },
            "scope": 15076,
            "src": "123:92:102",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15074,
              "nodeType": "Block",
              "src": "248:68:102",
              "statements": [
                {
                  "condition": {
                    "id": 15068,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "262:13:102",
                    "subExpression": {
                      "id": 15067,
                      "name": "_acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15054,
                      "src": "263:12:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 15073,
                  "nodeType": "IfStatement",
                  "src": "258:52:102",
                  "trueBody": {
                    "id": 15072,
                    "nodeType": "Block",
                    "src": "277:33:102",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 15069,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "291:6:102",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 15070,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "291:8:102",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 15071,
                        "nodeType": "ExpressionStatement",
                        "src": "291:8:102"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 15075,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15065,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "228:2:102"
            },
            "returnParameters": {
              "id": 15066,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "248:0:102"
            },
            "scope": 15076,
            "src": "221:95:102",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 15077,
        "src": "58:260:102",
        "usedErrors": [],
        "usedEvents": []
      }
    ],
    "src": "33:286:102"
  },
  "bytecode": "608060405234801561001057600080fd5b5060c08061001f6000396000f3fe60806040526004361060205760003560e01c80634fea120c14603957600080fd5b3660345760005460ff16603257600080fd5b005b600080fd5b348015604457600080fd5b50603260503660046063565b6000805460ff1916911515919091179055565b600060208284031215607457600080fd5b81358015158114608357600080fd5b939250505056fea26469706673582212201bfbbb3133a38f5e95e8a14e435d592040996423e89da0d7a7c3199117422c8264736f6c63430008150033",
  "bytecodeSha1": "cfbe6e0830075559af3f6d4b597530ec99bae3ca",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.21+commit.d9974bed"
  },
  "contractName": "EtherReceiverMock",
  "coverageMap": {
    "branches": {
      "102": {
        "EtherReceiverMock.<receive>": {
          "2": [
            263,
            275,
            false
          ]
        }
      }
    },
    "statements": {
      "102": {
        "EtherReceiverMock.<receive>": {
          "0": [
            291,
            299
          ]
        },
        "EtherReceiverMock.setAcceptEther": {
          "1": [
            182,
            208
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "60806040526004361060205760003560e01c80634fea120c14603957600080fd5b3660345760005460ff16603257600080fd5b005b600080fd5b348015604457600080fd5b50603260503660046063565b6000805460ff1916911515919091179055565b600060208284031215607457600080fd5b81358015158114608357600080fd5b939250505056fea26469706673582212201bfbbb3133a38f5e95e8a14e435d592040996423e89da0d7a7c3199117422c8264736f6c63430008150033",
  "deployedSourceMap": "58:260:102:-:0;;;;;;;;;;;;;;;;;;;;;;;;263:12;;;;258:52;;291:8;;;258:52;58:260;;;;;123:92;;;;;;;;;;-1:-1:-1;123:92:102;;;;;:::i;:::-;182:12;:26;;-1:-1:-1;;182:26:102;;;;;;;;;;123:92;14:273:249;70:6;123:2;111:9;102:7;98:23;94:32;91:52;;;139:1;136;129:12;91:52;178:9;165:23;231:5;224:13;217:21;210:5;207:32;197:60;;253:1;250;243:12;197:60;276:5;14:273;-1:-1:-1;;;14:273:249:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    58,
    318
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x20 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FEA120C EQ PUSH1 0x39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x34 JUMPI PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x32 PUSH1 0x50 CALLDATASIZE PUSH1 0x4 PUSH1 0x63 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH1 0x74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH1 0x83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHL 0xFB 0xBB BALANCE CALLER LOG3 DUP16 0x5E SWAP6 0xE8 LOG1 0x4E NUMBER 0x5D MSIZE KECCAK256 BLOCKHASH SWAP10 PUSH5 0x23E89DA0D7 0xA7 0xC3 NOT SWAP2 OR TIMESTAMP 0x2C DUP3 PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "MSTORE",
      "path": "102"
    },
    "5": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "CALLDATASIZE",
      "path": "102"
    },
    "8": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "LT",
      "path": "102"
    },
    "9": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x20"
    },
    "11": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "JUMPI",
      "path": "102"
    },
    "12": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "CALLDATALOAD",
      "path": "102"
    },
    "15": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0xE0"
    },
    "17": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "SHR",
      "path": "102"
    },
    "18": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "DUP1",
      "path": "102"
    },
    "19": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH4",
      "path": "102",
      "value": "0x4FEA120C"
    },
    "24": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "EQ",
      "path": "102"
    },
    "25": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x39"
    },
    "27": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "JUMPI",
      "path": "102"
    },
    "28": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x0"
    },
    "30": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "DUP1",
      "path": "102"
    },
    "31": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "REVERT",
      "path": "102"
    },
    "32": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "JUMPDEST",
      "path": "102"
    },
    "33": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "CALLDATASIZE",
      "path": "102"
    },
    "34": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x34"
    },
    "36": {
      "fn": null,
      "offset": [
        58,
        318
      ],
      "op": "JUMPI",
      "path": "102"
    },
    "37": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        263,
        275
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x0"
    },
    "39": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        263,
        275
      ],
      "op": "SLOAD",
      "path": "102"
    },
    "40": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        263,
        275
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0xFF"
    },
    "42": {
      "branch": 2,
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        263,
        275
      ],
      "op": "AND",
      "path": "102"
    },
    "43": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        258,
        310
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x32"
    },
    "45": {
      "branch": 2,
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        258,
        310
      ],
      "op": "JUMPI",
      "path": "102"
    },
    "46": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        291,
        299
      ],
      "op": "PUSH1",
      "path": "102",
      "statement": 0,
      "value": "0x0"
    },
    "48": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        291,
        299
      ],
      "op": "DUP1",
      "path": "102"
    },
    "49": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        291,
        299
      ],
      "op": "REVERT",
      "path": "102"
    },
    "50": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        258,
        310
      ],
      "op": "JUMPDEST",
      "path": "102"
    },
    "51": {
      "offset": [
        58,
        318
      ],
      "op": "STOP",
      "path": "102"
    },
    "52": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        58,
        318
      ],
      "op": "JUMPDEST",
      "path": "102"
    },
    "53": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        58,
        318
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x0"
    },
    "55": {
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        58,
        318
      ],
      "op": "DUP1",
      "path": "102"
    },
    "56": {
      "first_revert": true,
      "fn": "EtherReceiverMock.<receive>",
      "offset": [
        58,
        318
      ],
      "op": "REVERT",
      "path": "102"
    },
    "57": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "JUMPDEST",
      "path": "102"
    },
    "58": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "CALLVALUE",
      "path": "102"
    },
    "59": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "DUP1",
      "path": "102"
    },
    "60": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "ISZERO",
      "path": "102"
    },
    "61": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x44"
    },
    "63": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "JUMPI",
      "path": "102"
    },
    "64": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x0"
    },
    "66": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "DUP1",
      "path": "102"
    },
    "67": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "REVERT",
      "path": "102"
    },
    "68": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "JUMPDEST",
      "path": "102"
    },
    "69": {
      "op": "POP"
    },
    "70": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x32"
    },
    "72": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x50"
    },
    "74": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "CALLDATASIZE",
      "path": "102"
    },
    "75": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x4"
    },
    "77": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "PUSH1",
      "path": "102",
      "value": "0x63"
    },
    "79": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "jump": "i",
      "offset": [
        123,
        215
      ],
      "op": "JUMP",
      "path": "102"
    },
    "80": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "JUMPDEST",
      "path": "102"
    },
    "81": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        194
      ],
      "op": "PUSH1",
      "path": "102",
      "statement": 1,
      "value": "0x0"
    },
    "83": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "DUP1",
      "path": "102"
    },
    "84": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "SLOAD",
      "path": "102"
    },
    "85": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "87": {
      "op": "NOT"
    },
    "88": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "AND",
      "path": "102"
    },
    "89": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "SWAP2",
      "path": "102"
    },
    "90": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "ISZERO",
      "path": "102"
    },
    "91": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "ISZERO",
      "path": "102"
    },
    "92": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "SWAP2",
      "path": "102"
    },
    "93": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "SWAP1",
      "path": "102"
    },
    "94": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "SWAP2",
      "path": "102"
    },
    "95": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "OR",
      "path": "102"
    },
    "96": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "SWAP1",
      "path": "102"
    },
    "97": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        182,
        208
      ],
      "op": "SSTORE",
      "path": "102"
    },
    "98": {
      "fn": "EtherReceiverMock.setAcceptEther",
      "offset": [
        123,
        215
      ],
      "op": "JUMP",
      "path": "102"
    },
    "99": {
      "op": "JUMPDEST"
    },
    "100": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "102": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "104": {
      "op": "DUP3"
    },
    "105": {
      "op": "DUP5"
    },
    "106": {
      "op": "SUB"
    },
    "107": {
      "op": "SLT"
    },
    "108": {
      "op": "ISZERO"
    },
    "109": {
      "op": "PUSH1",
      "value": "0x74"
    },
    "111": {
      "op": "JUMPI"
    },
    "112": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "114": {
      "op": "DUP1"
    },
    "115": {
      "op": "REVERT"
    },
    "116": {
      "op": "JUMPDEST"
    },
    "117": {
      "op": "DUP2"
    },
    "118": {
      "op": "CALLDATALOAD"
    },
    "119": {
      "op": "DUP1"
    },
    "120": {
      "op": "ISZERO"
    },
    "121": {
      "op": "ISZERO"
    },
    "122": {
      "op": "DUP2"
    },
    "123": {
      "op": "EQ"
    },
    "124": {
      "op": "PUSH1",
      "value": "0x83"
    },
    "126": {
      "op": "JUMPI"
    },
    "127": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "129": {
      "op": "DUP1"
    },
    "130": {
      "op": "REVERT"
    },
    "131": {
      "op": "JUMPDEST"
    },
    "132": {
      "op": "SWAP4"
    },
    "133": {
      "op": "SWAP3"
    },
    "134": {
      "op": "POP"
    },
    "135": {
      "op": "POP"
    },
    "136": {
      "op": "POP"
    },
    "137": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "56025467d405be662dcef8602398c4d1899cbc28",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract EtherReceiverMock {\n    bool private _acceptEther;\n\n    function setAcceptEther(bool acceptEther) public {\n        _acceptEther = acceptEther;\n    }\n\n    receive() external payable {\n        if (!_acceptEther) {\n            revert();\n        }\n    }\n}\n",
  "sourceMap": "58:260:102:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin-solidity/contracts/mocks/EtherReceiverMock.sol",
  "type": "contract"
}