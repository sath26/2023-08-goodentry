{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "callback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ReentrancyAttack",
          "name": "attacker",
          "type": "address"
        }
      ],
      "name": "countAndCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "countLocalRecursive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "countThisRecursive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "119": "contracts/openzeppelin-solidity/contracts/mocks/ReentrancyAttack.sol",
    "120": "contracts/openzeppelin-solidity/contracts/mocks/ReentrancyMock.sol",
    "151": "contracts/openzeppelin-solidity/contracts/security/ReentrancyGuard.sol",
    "202": "contracts/openzeppelin-solidity/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin-solidity/contracts/mocks/ReentrancyMock.sol",
    "exportedSymbols": {
      "Context": [
        30190
      ],
      "ReentrancyAttack": [
        17012
      ],
      "ReentrancyGuard": [
        21411
      ],
      "ReentrancyMock": [
        17132
      ]
    },
    "id": 17133,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 17014,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:120"
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/security/ReentrancyGuard.sol",
        "file": "../security/ReentrancyGuard.sol",
        "id": 17015,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 17133,
        "sourceUnit": 21412,
        "src": "58:41:120",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin-solidity/contracts/mocks/ReentrancyAttack.sol",
        "file": "./ReentrancyAttack.sol",
        "id": 17016,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 17133,
        "sourceUnit": 17013,
        "src": "100:32:120",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 17017,
              "name": "ReentrancyGuard",
              "nameLocations": [
                "161:15:120"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21411,
              "src": "161:15:120"
            },
            "id": 17018,
            "nodeType": "InheritanceSpecifier",
            "src": "161:15:120"
          }
        ],
        "canonicalName": "ReentrancyMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 17132,
        "linearizedBaseContracts": [
          17132,
          21411
        ],
        "name": "ReentrancyMock",
        "nameLocation": "143:14:120",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "61bc221a",
            "id": 17020,
            "mutability": "mutable",
            "name": "counter",
            "nameLocation": "198:7:120",
            "nodeType": "VariableDeclaration",
            "scope": 17132,
            "src": "183:22:120",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17019,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "183:7:120",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 17027,
              "nodeType": "Block",
              "src": "226:28:120",
              "statements": [
                {
                  "expression": {
                    "id": 17025,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 17023,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17020,
                      "src": "236:7:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 17024,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "246:1:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "236:11:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 17026,
                  "nodeType": "ExpressionStatement",
                  "src": "236:11:120"
                }
              ]
            },
            "id": 17028,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17021,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "223:2:120"
            },
            "returnParameters": {
              "id": 17022,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "226:0:120"
            },
            "scope": 17132,
            "src": "212:42:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 17036,
              "nodeType": "Block",
              "src": "302:25:120",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 17033,
                      "name": "_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17131,
                      "src": "312:6:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 17034,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "312:8:120",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17035,
                  "nodeType": "ExpressionStatement",
                  "src": "312:8:120"
                }
              ]
            },
            "functionSelector": "083b2732",
            "id": 17037,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 17031,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 17030,
                  "name": "nonReentrant",
                  "nameLocations": [
                    "289:12:120"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 21410,
                  "src": "289:12:120"
                },
                "nodeType": "ModifierInvocation",
                "src": "289:12:120"
              }
            ],
            "name": "callback",
            "nameLocation": "269:8:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17029,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "277:2:120"
            },
            "returnParameters": {
              "id": 17032,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "302:0:120"
            },
            "scope": 17132,
            "src": "260:67:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 17058,
              "nodeType": "Block",
              "src": "393:100:120",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 17046,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 17044,
                      "name": "n",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17039,
                      "src": "407:1:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 17045,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "411:1:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "407:5:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 17057,
                  "nodeType": "IfStatement",
                  "src": "403:84:120",
                  "trueBody": {
                    "id": 17056,
                    "nodeType": "Block",
                    "src": "414:73:120",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 17047,
                            "name": "_count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 17131,
                            "src": "428:6:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 17048,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "428:8:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 17049,
                        "nodeType": "ExpressionStatement",
                        "src": "428:8:120"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 17053,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 17051,
                                "name": "n",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 17039,
                                "src": "470:1:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 17052,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "474:1:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "470:5:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 17050,
                            "name": "countLocalRecursive",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 17059,
                            "src": "450:19:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 17054,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "450:26:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 17055,
                        "nodeType": "ExpressionStatement",
                        "src": "450:26:120"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "96ffa690",
            "id": 17059,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 17042,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 17041,
                  "name": "nonReentrant",
                  "nameLocations": [
                    "380:12:120"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 21410,
                  "src": "380:12:120"
                },
                "nodeType": "ModifierInvocation",
                "src": "380:12:120"
              }
            ],
            "name": "countLocalRecursive",
            "nameLocation": "342:19:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17040,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17039,
                  "mutability": "mutable",
                  "name": "n",
                  "nameLocation": "370:1:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 17059,
                  "src": "362:9:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 17038,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "362:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "361:11:120"
            },
            "returnParameters": {
              "id": 17043,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "393:0:120"
            },
            "scope": 17132,
            "src": "333:160:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 17095,
              "nodeType": "Block",
              "src": "558:235:120",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 17068,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 17066,
                      "name": "n",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17061,
                      "src": "572:1:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 17067,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "576:1:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "572:5:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 17094,
                  "nodeType": "IfStatement",
                  "src": "568:219:120",
                  "trueBody": {
                    "id": 17093,
                    "nodeType": "Block",
                    "src": "579:208:120",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 17069,
                            "name": "_count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 17131,
                            "src": "593:6:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 17070,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "593:8:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 17071,
                        "nodeType": "ExpressionStatement",
                        "src": "593:8:120"
                      },
                      {
                        "assignments": [
                          17073,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 17073,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "621:7:120",
                            "nodeType": "VariableDeclaration",
                            "scope": 17093,
                            "src": "616:12:120",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 17072,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "616:4:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 17087,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "636f756e74546869735265637572736976652875696e7432353629",
                                  "id": 17081,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "677:29:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8c5344fa6b010fdd5e2cff6c41f85eb27e8b457f2d042f418209d56095018878",
                                    "typeString": "literal_string \"countThisRecursive(uint256)\""
                                  },
                                  "value": "countThisRecursive(uint256)"
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 17084,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 17082,
                                    "name": "n",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 17061,
                                    "src": "708:1:120",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "hexValue": "31",
                                    "id": 17083,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "712:1:120",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "708:5:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_8c5344fa6b010fdd5e2cff6c41f85eb27e8b457f2d042f418209d56095018878",
                                    "typeString": "literal_string \"countThisRecursive(uint256)\""
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 17079,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "653:3:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 17080,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "657:19:120",
                                "memberName": "encodeWithSignature",
                                "nodeType": "MemberAccess",
                                "src": "653:23:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (string memory) pure returns (bytes memory)"
                                }
                              },
                              "id": 17085,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "653:61:120",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 17076,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "642:4:120",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ReentrancyMock_$17132",
                                    "typeString": "contract ReentrancyMock"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ReentrancyMock_$17132",
                                    "typeString": "contract ReentrancyMock"
                                  }
                                ],
                                "id": 17075,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "634:7:120",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 17074,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "634:7:120",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 17077,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "634:13:120",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 17078,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "648:4:120",
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "634:18:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 17086,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "634:81:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "615:100:120"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 17089,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 17073,
                              "src": "737:7:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5265656e7472616e63794d6f636b3a206661696c65642063616c6c",
                              "id": 17090,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "746:29:120",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6e7df6a41596369ff81d71c1a274a01b76010e7a5848023b008a2b13b15462a6",
                                "typeString": "literal_string \"ReentrancyMock: failed call\""
                              },
                              "value": "ReentrancyMock: failed call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6e7df6a41596369ff81d71c1a274a01b76010e7a5848023b008a2b13b15462a6",
                                "typeString": "literal_string \"ReentrancyMock: failed call\""
                              }
                            ],
                            "id": 17088,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "729:7:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 17091,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "729:47:120",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 17092,
                        "nodeType": "ExpressionStatement",
                        "src": "729:47:120"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "8c5344fa",
            "id": 17096,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 17064,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 17063,
                  "name": "nonReentrant",
                  "nameLocations": [
                    "545:12:120"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 21410,
                  "src": "545:12:120"
                },
                "nodeType": "ModifierInvocation",
                "src": "545:12:120"
              }
            ],
            "name": "countThisRecursive",
            "nameLocation": "508:18:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17062,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17061,
                  "mutability": "mutable",
                  "name": "n",
                  "nameLocation": "535:1:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 17096,
                  "src": "527:9:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 17060,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "527:7:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "526:11:120"
            },
            "returnParameters": {
              "id": 17065,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "558:0:120"
            },
            "scope": 17132,
            "src": "499:294:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 17122,
              "nodeType": "Block",
              "src": "868:115:120",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 17104,
                      "name": "_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17131,
                      "src": "878:6:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 17105,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "878:8:120",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17106,
                  "nodeType": "ExpressionStatement",
                  "src": "878:8:120"
                },
                {
                  "assignments": [
                    17108
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 17108,
                      "mutability": "mutable",
                      "name": "func",
                      "nameLocation": "903:4:120",
                      "nodeType": "VariableDeclaration",
                      "scope": 17122,
                      "src": "896:11:120",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "typeName": {
                        "id": 17107,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "896:6:120",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 17115,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "63616c6c6261636b2829",
                            "id": 17112,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "927:12:120",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402",
                              "typeString": "literal_string \"callback()\""
                            },
                            "value": "callback()"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402",
                              "typeString": "literal_string \"callback()\""
                            }
                          ],
                          "id": 17111,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "917:9:120",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 17113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "917:23:120",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 17110,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "910:6:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes4_$",
                        "typeString": "type(bytes4)"
                      },
                      "typeName": {
                        "id": 17109,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "910:6:120",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 17114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "910:31:120",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "896:45:120"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 17119,
                        "name": "func",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17108,
                        "src": "971:4:120",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      ],
                      "expression": {
                        "id": 17116,
                        "name": "attacker",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17099,
                        "src": "951:8:120",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ReentrancyAttack_$17012",
                          "typeString": "contract ReentrancyAttack"
                        }
                      },
                      "id": 17118,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "960:10:120",
                      "memberName": "callSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17011,
                      "src": "951:19:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bytes4_$returns$__$",
                        "typeString": "function (bytes4) external"
                      }
                    },
                    "id": 17120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "951:25:120",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17121,
                  "nodeType": "ExpressionStatement",
                  "src": "951:25:120"
                }
              ]
            },
            "functionSelector": "b672ad8b",
            "id": 17123,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 17102,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 17101,
                  "name": "nonReentrant",
                  "nameLocations": [
                    "855:12:120"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 21410,
                  "src": "855:12:120"
                },
                "nodeType": "ModifierInvocation",
                "src": "855:12:120"
              }
            ],
            "name": "countAndCall",
            "nameLocation": "808:12:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17100,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17099,
                  "mutability": "mutable",
                  "name": "attacker",
                  "nameLocation": "838:8:120",
                  "nodeType": "VariableDeclaration",
                  "scope": 17123,
                  "src": "821:25:120",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ReentrancyAttack_$17012",
                    "typeString": "contract ReentrancyAttack"
                  },
                  "typeName": {
                    "id": 17098,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 17097,
                      "name": "ReentrancyAttack",
                      "nameLocations": [
                        "821:16:120"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 17012,
                      "src": "821:16:120"
                    },
                    "referencedDeclaration": 17012,
                    "src": "821:16:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ReentrancyAttack_$17012",
                      "typeString": "contract ReentrancyAttack"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "820:27:120"
            },
            "returnParameters": {
              "id": 17103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "868:0:120"
            },
            "scope": 17132,
            "src": "799:184:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 17130,
              "nodeType": "Block",
              "src": "1015:29:120",
              "statements": [
                {
                  "expression": {
                    "id": 17128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 17126,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17020,
                      "src": "1025:7:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 17127,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1036:1:120",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1025:12:120",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 17129,
                  "nodeType": "ExpressionStatement",
                  "src": "1025:12:120"
                }
              ]
            },
            "id": 17131,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_count",
            "nameLocation": "998:6:120",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17124,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1004:2:120"
            },
            "returnParameters": {
              "id": 17125,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1015:0:120"
            },
            "scope": 17132,
            "src": "989:55:120",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          }
        ],
        "scope": 17133,
        "src": "134:912:120",
        "usedErrors": [],
        "usedEvents": []
      }
    ],
    "src": "33:1014:120"
  },
  "bytecode": "608060405234801561001057600080fd5b5060016000818155905561045d806100296000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008157806396ffa69014610094578063b672ad8b146100a7575b600080fd5b6100646100ba565b005b61006f60015481565b60405190815260200160405180910390f35b61006461008f366004610336565b6100f9565b6100646100a2366004610336565b610220565b6100646100b536600461034f565b610263565b6002600054036100e55760405162461bcd60e51b81526004016100dc9061037f565b60405180910390fd5b60026000556100f261031d565b6001600055565b60026000540361011b5760405162461bcd60e51b81526004016100dc9061037f565b600260005580156102185761012e61031d565b60003061013c6001846103cc565b60405160240161014e91815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634629a27d60e11b1790525161018391906103e5565b6000604051808303816000865af19150503d80600081146101c0576040519150601f19603f3d011682016040523d82523d6000602084013e6101c5565b606091505b50509050806102165760405162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c000000000060448201526064016100dc565b505b506001600055565b6002600054036102425760405162461bcd60e51b81526004016100dc9061037f565b600260005580156102185761025561031d565b6102186100a26001836103cc565b6002600054036102855760405162461bcd60e51b81526004016100dc9061037f565b600260005561029261031d565b604051630a2df1ed60e01b815263041d939960e11b60048201527f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402906001600160a01b03831690630a2df1ed90602401600060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b5050600160005550505050565b600180600082825461032f9190610414565b9091555050565b60006020828403121561034857600080fd5b5035919050565b60006020828403121561036157600080fd5b81356001600160a01b038116811461037857600080fd5b9392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156103df576103df6103b6565b92915050565b6000825160005b8181101561040657602081860181015185830152016103ec565b506000920191825250919050565b808201808211156103df576103df6103b656fea2646970667358221220c9bc0ec73f9ecb8137c9f6bf950204cc9c11505f064cdcf8e30c5f619605fbf364736f6c63430008150033",
  "bytecodeSha1": "5f2f0fcc5bc00bcb307ef72c8a8f7b973d19887a",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.21+commit.d9974bed"
  },
  "contractName": "ReentrancyMock",
  "coverageMap": {
    "branches": {
      "119": {},
      "120": {
        "ReentrancyMock.countLocalRecursive": {
          "10": [
            407,
            412,
            false
          ]
        },
        "ReentrancyMock.countThisRecursive": {
          "8": [
            572,
            577,
            false
          ],
          "9": [
            737,
            744,
            true
          ]
        }
      },
      "151": {},
      "202": {}
    },
    "statements": {
      "119": {},
      "120": {
        "ReentrancyMock._count": {
          "7": [
            1025,
            1037
          ]
        },
        "ReentrancyMock.callback": {
          "0": [
            312,
            320
          ]
        },
        "ReentrancyMock.countAndCall": {
          "5": [
            878,
            886
          ],
          "6": [
            951,
            976
          ]
        },
        "ReentrancyMock.countLocalRecursive": {
          "3": [
            428,
            436
          ],
          "4": [
            450,
            476
          ]
        },
        "ReentrancyMock.countThisRecursive": {
          "1": [
            593,
            601
          ],
          "2": [
            729,
            776
          ]
        }
      },
      "151": {},
      "202": {}
    }
  },
  "dependencies": [
    "Context",
    "ReentrancyAttack",
    "ReentrancyGuard"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063083b27321461005c57806361bc221a146100665780638c5344fa1461008157806396ffa69014610094578063b672ad8b146100a7575b600080fd5b6100646100ba565b005b61006f60015481565b60405190815260200160405180910390f35b61006461008f366004610336565b6100f9565b6100646100a2366004610336565b610220565b6100646100b536600461034f565b610263565b6002600054036100e55760405162461bcd60e51b81526004016100dc9061037f565b60405180910390fd5b60026000556100f261031d565b6001600055565b60026000540361011b5760405162461bcd60e51b81526004016100dc9061037f565b600260005580156102185761012e61031d565b60003061013c6001846103cc565b60405160240161014e91815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316634629a27d60e11b1790525161018391906103e5565b6000604051808303816000865af19150503d80600081146101c0576040519150601f19603f3d011682016040523d82523d6000602084013e6101c5565b606091505b50509050806102165760405162461bcd60e51b815260206004820152601b60248201527f5265656e7472616e63794d6f636b3a206661696c65642063616c6c000000000060448201526064016100dc565b505b506001600055565b6002600054036102425760405162461bcd60e51b81526004016100dc9061037f565b600260005580156102185761025561031d565b6102186100a26001836103cc565b6002600054036102855760405162461bcd60e51b81526004016100dc9061037f565b600260005561029261031d565b604051630a2df1ed60e01b815263041d939960e11b60048201527f083b2732f78169bfaad6b407fa338cc97d697ed69d3915a18239cc111d51a402906001600160a01b03831690630a2df1ed90602401600060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b5050600160005550505050565b600180600082825461032f9190610414565b9091555050565b60006020828403121561034857600080fd5b5035919050565b60006020828403121561036157600080fd5b81356001600160a01b038116811461037857600080fd5b9392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156103df576103df6103b6565b92915050565b6000825160005b8181101561040657602081860181015185830152016103ec565b506000920191825250919050565b808201808211156103df576103df6103b656fea2646970667358221220c9bc0ec73f9ecb8137c9f6bf950204cc9c11505f064cdcf8e30c5f619605fbf364736f6c63430008150033",
  "deployedSourceMap": "134:912:120:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;260:67;;;:::i;:::-;;183:22;;;;;;;;;160:25:249;;;148:2;133:18;183:22:120;;;;;;;499:294;;;;;;:::i;:::-;;:::i;333:160::-;;;;;;:::i;:::-;;:::i;799:184::-;;;;;;:::i;:::-;;:::i;260:67::-;1744:1:151;2325:7;;:19;2317:63;;;;-1:-1:-1;;;2317:63:151;;;;;;;:::i;:::-;;;;;;;;;1744:1;2455:7;:18;312:8:120::1;:6;:8::i;:::-;1701:1:151::0;2628:7;:22;260:67:120:o;499:294::-;1744:1:151;2325:7;;:19;2317:63;;;;-1:-1:-1;;;2317:63:151;;;;;;;:::i;:::-;1744:1;2455:7;:18;572:5:120;;568:219:::1;;593:8;:6;:8::i;:::-;616:12;642:4;708:5;712:1;708::::0;:5:::1;:::i;:::-;653:61;;;;;;160:25:249::0;;148:2;133:18;;14:177;653:61:120::1;;::::0;;-1:-1:-1;;653:61:120;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;653:61:120::1;-1:-1:-1::0;;;653:61:120::1;::::0;;634:81;::::1;::::0;653:61;634:81:::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;615:100;;;737:7;729:47;;;::::0;-1:-1:-1;;;729:47:120;;1942:2:249;729:47:120::1;::::0;::::1;1924:21:249::0;1981:2;1961:18;;;1954:30;2020:29;2000:18;;;1993:57;2067:18;;729:47:120::1;1740:351:249::0;729:47:120::1;579:208;568:219;-1:-1:-1::0;1701:1:151;2628:7;:22;499:294:120:o;333:160::-;1744:1:151;2325:7;;:19;2317:63;;;;-1:-1:-1;;;2317:63:151;;;;;;;:::i;:::-;1744:1;2455:7;:18;407:5:120;;403:84:::1;;428:8;:6;:8::i;:::-;450:26;470:5;474:1;470::::0;:5:::1;:::i;799:184::-:0;1744:1:151;2325:7;;:19;2317:63;;;;-1:-1:-1;;;2317:63:151;;;;;;;:::i;:::-;1744:1;2455:7;:18;878:8:120::1;:6;:8::i;:::-;951:25;::::0;-1:-1:-1;;;951:25:120;;-1:-1:-1;;;951:25:120::1;::::0;::::1;2240:52:249::0;917:23:120::1;::::0;-1:-1:-1;;;;;951:19:120;::::1;::::0;::::1;::::0;2213:18:249;;951:25:120::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;1701:1:151;2628:7;:22;-1:-1:-1;;;;799:184:120:o;989:55::-;1036:1;1025:7;;:12;;;;;;;:::i;:::-;;;;-1:-1:-1;;989:55:120:o;196:180:249:-;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;-1:-1:-1;347:23:249;;196:180;-1:-1:-1;196:180:249:o;381:312::-;466:6;519:2;507:9;498:7;494:23;490:32;487:52;;;535:1;532;525:12;487:52;561:23;;-1:-1:-1;;;;;613:31:249;;603:42;;593:70;;659:1;656;649:12;593:70;682:5;381:312;-1:-1:-1;;;381:312:249:o;698:355::-;900:2;882:21;;;939:2;919:18;;;912:30;978:33;973:2;958:18;;951:61;1044:2;1029:18;;698:355::o;1058:127::-;1119:10;1114:3;1110:20;1107:1;1100:31;1150:4;1147:1;1140:15;1174:4;1171:1;1164:15;1190:128;1257:9;;;1278:11;;;1275:37;;;1292:18;;:::i;:::-;1190:128;;;;:::o;1323:412::-;1452:3;1490:6;1484:13;1515:1;1525:129;1539:6;1536:1;1533:13;1525:129;;;1637:4;1621:14;;;1617:25;;1611:32;1598:11;;;1591:53;1554:12;1525:129;;;-1:-1:-1;1709:1:249;1673:16;;1698:13;;;-1:-1:-1;1673:16:249;1323:412;-1:-1:-1;1323:412:249:o;2303:125::-;2368:9;;;2389:10;;;2386:36;;;2402:18;;:::i",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    134,
    1046
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83B2732 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x61BC221A EQ PUSH2 0x66 JUMPI DUP1 PUSH4 0x8C5344FA EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x96FFA690 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0xB672AD8B EQ PUSH2 0xA7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0xBA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6F PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x64 PUSH2 0x8F CALLDATASIZE PUSH1 0x4 PUSH2 0x336 JUMP JUMPDEST PUSH2 0xF9 JUMP JUMPDEST PUSH2 0x64 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x336 JUMP JUMPDEST PUSH2 0x220 JUMP JUMPDEST PUSH2 0x64 PUSH2 0xB5 CALLDATASIZE PUSH1 0x4 PUSH2 0x34F JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0xE5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC SWAP1 PUSH2 0x37F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0xF2 PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x11B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC SWAP1 PUSH2 0x37F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE DUP1 ISZERO PUSH2 0x218 JUMPI PUSH2 0x12E PUSH2 0x31D JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH2 0x13C PUSH1 0x1 DUP5 PUSH2 0x3CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x14E SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x4629A27D PUSH1 0xE1 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1C0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x216 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E63794D6F636B3A206661696C65642063616C6C0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xDC JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x242 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC SWAP1 PUSH2 0x37F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE DUP1 ISZERO PUSH2 0x218 JUMPI PUSH2 0x255 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x218 PUSH2 0xA2 PUSH1 0x1 DUP4 PUSH2 0x3CC JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC SWAP1 PUSH2 0x37F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x292 PUSH2 0x31D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA2DF1ED PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x41D9399 PUSH1 0xE1 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x83B2732F78169BFAAD6B407FA338CC97D697ED69D3915A18239CC111D51A402 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA2DF1ED SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x310 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x32F SWAP2 SWAP1 PUSH2 0x414 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3DF JUMPI PUSH2 0x3DF PUSH2 0x3B6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x406 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x3EC JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3DF JUMPI PUSH2 0x3DF PUSH2 0x3B6 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0xBC 0xE 0xC7 EXTCODEHASH SWAP15 0xCB DUP2 CALLDATACOPY 0xC9 0xF6 0xBF SWAP6 MUL DIV 0xCC SWAP13 GT POP PUSH0 MOD 0x4C 0xDC 0xF8 0xE3 0xC PUSH0 PUSH2 0x9605 0xFB RETURN PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        134,
        1046
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "MSTORE",
      "path": "120"
    },
    "5": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "CALLVALUE",
      "path": "120"
    },
    "6": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "DUP1",
      "path": "120"
    },
    "7": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "ISZERO",
      "path": "120"
    },
    "8": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "12": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "DUP1",
      "path": "120"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "REVERT",
      "path": "120"
    },
    "16": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "17": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "POP",
      "path": "120"
    },
    "18": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "CALLDATASIZE",
      "path": "120"
    },
    "21": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "LT",
      "path": "120"
    },
    "22": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "26": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "CALLDATALOAD",
      "path": "120"
    },
    "29": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "SHR",
      "path": "120"
    },
    "32": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "DUP1",
      "path": "120"
    },
    "33": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH4",
      "path": "120",
      "value": "0x83B2732"
    },
    "38": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "EQ",
      "path": "120"
    },
    "39": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "43": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "DUP1",
      "path": "120"
    },
    "44": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH4",
      "path": "120",
      "value": "0x61BC221A"
    },
    "49": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "EQ",
      "path": "120"
    },
    "50": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "54": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "DUP1",
      "path": "120"
    },
    "55": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH4",
      "path": "120",
      "value": "0x8C5344FA"
    },
    "60": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "EQ",
      "path": "120"
    },
    "61": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x81"
    },
    "64": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "65": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "DUP1",
      "path": "120"
    },
    "66": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH4",
      "path": "120",
      "value": "0x96FFA690"
    },
    "71": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "EQ",
      "path": "120"
    },
    "72": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x94"
    },
    "75": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "76": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "DUP1",
      "path": "120"
    },
    "77": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH4",
      "path": "120",
      "value": "0xB672AD8B"
    },
    "82": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "EQ",
      "path": "120"
    },
    "83": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0xA7"
    },
    "86": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "87": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "88": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "DUP1",
      "path": "120"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        134,
        1046
      ],
      "op": "REVERT",
      "path": "120"
    },
    "92": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        260,
        327
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "93": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        260,
        327
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x64"
    },
    "96": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        260,
        327
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0xBA"
    },
    "99": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        260,
        327
      ],
      "op": "JUMP",
      "path": "120"
    },
    "100": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        260,
        327
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "101": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        260,
        327
      ],
      "op": "STOP",
      "path": "120"
    },
    "102": {
      "offset": [
        183,
        205
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "103": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x6F"
    },
    "106": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x1"
    },
    "108": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "SLOAD",
      "path": "120"
    },
    "109": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "DUP2",
      "path": "120"
    },
    "110": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "JUMP",
      "path": "120"
    },
    "111": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "112": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "114": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "115": {
      "op": "SWAP1"
    },
    "116": {
      "op": "DUP2"
    },
    "117": {
      "op": "MSTORE"
    },
    "118": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "120": {
      "op": "ADD"
    },
    "121": {
      "offset": [
        183,
        205
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "123": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "124": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "DUP1",
      "path": "120"
    },
    "125": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "126": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "SUB",
      "path": "120"
    },
    "127": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "128": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        183,
        205
      ],
      "op": "RETURN",
      "path": "120"
    },
    "129": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "130": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x64"
    },
    "133": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x8F"
    },
    "136": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "CALLDATASIZE",
      "path": "120"
    },
    "137": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x4"
    },
    "139": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x336"
    },
    "142": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        499,
        793
      ],
      "op": "JUMP",
      "path": "120"
    },
    "143": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "144": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0xF9"
    },
    "147": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        499,
        793
      ],
      "op": "JUMP",
      "path": "120"
    },
    "148": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "149": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x64"
    },
    "152": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0xA2"
    },
    "155": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "CALLDATASIZE",
      "path": "120"
    },
    "156": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x4"
    },
    "158": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x336"
    },
    "161": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        333,
        493
      ],
      "op": "JUMP",
      "path": "120"
    },
    "162": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "163": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x220"
    },
    "166": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        333,
        493
      ],
      "op": "JUMP",
      "path": "120"
    },
    "167": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "168": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x64"
    },
    "171": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0xB5"
    },
    "174": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "CALLDATASIZE",
      "path": "120"
    },
    "175": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x4"
    },
    "177": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x34F"
    },
    "180": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        799,
        983
      ],
      "op": "JUMP",
      "path": "120"
    },
    "181": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "182": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x263"
    },
    "185": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        799,
        983
      ],
      "op": "JUMP",
      "path": "120"
    },
    "186": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        260,
        327
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "187": {
      "offset": [
        1744,
        1745
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x2"
    },
    "189": {
      "offset": [
        2325,
        2332
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "191": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2325,
        2332
      ],
      "op": "SLOAD",
      "path": "151"
    },
    "192": {
      "offset": [
        2325,
        2344
      ],
      "op": "SUB",
      "path": "151"
    },
    "193": {
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0xE5"
    },
    "196": {
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPI",
      "path": "151"
    },
    "197": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x40"
    },
    "199": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "MLOAD",
      "path": "151"
    },
    "200": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "204": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "206": {
      "op": "SHL"
    },
    "207": {
      "offset": [
        2317,
        2380
      ],
      "op": "DUP2",
      "path": "151"
    },
    "208": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "MSTORE",
      "path": "151"
    },
    "209": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x4"
    },
    "211": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "ADD",
      "path": "151"
    },
    "212": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0xDC"
    },
    "215": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "SWAP1",
      "path": "151"
    },
    "216": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0x37F"
    },
    "219": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMP",
      "path": "151"
    },
    "220": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPDEST",
      "path": "151"
    },
    "221": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x40"
    },
    "223": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "MLOAD",
      "path": "151"
    },
    "224": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "DUP1",
      "path": "151"
    },
    "225": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "SWAP2",
      "path": "151"
    },
    "226": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "SUB",
      "path": "151"
    },
    "227": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "SWAP1",
      "path": "151"
    },
    "228": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "151"
    },
    "229": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPDEST",
      "path": "151"
    },
    "230": {
      "offset": [
        1744,
        1745
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x2"
    },
    "232": {
      "offset": [
        2455,
        2462
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "234": {
      "offset": [
        2455,
        2473
      ],
      "op": "SSTORE",
      "path": "151"
    },
    "235": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        312,
        320
      ],
      "op": "PUSH2",
      "path": "120",
      "statement": 0,
      "value": "0xF2"
    },
    "238": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        312,
        318
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x31D"
    },
    "241": {
      "fn": "ReentrancyMock.callback",
      "jump": "i",
      "offset": [
        312,
        320
      ],
      "op": "JUMP",
      "path": "120"
    },
    "242": {
      "fn": "ReentrancyMock.callback",
      "offset": [
        312,
        320
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "243": {
      "offset": [
        1701,
        1702
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x1"
    },
    "245": {
      "offset": [
        2628,
        2635
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "247": {
      "offset": [
        2628,
        2650
      ],
      "op": "SSTORE",
      "path": "151"
    },
    "248": {
      "fn": "ReentrancyMock.callback",
      "jump": "o",
      "offset": [
        260,
        327
      ],
      "op": "JUMP",
      "path": "120"
    },
    "249": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        499,
        793
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "250": {
      "offset": [
        1744,
        1745
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x2"
    },
    "252": {
      "offset": [
        2325,
        2332
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "254": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2325,
        2332
      ],
      "op": "SLOAD",
      "path": "151"
    },
    "255": {
      "offset": [
        2325,
        2344
      ],
      "op": "SUB",
      "path": "151"
    },
    "256": {
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0x11B"
    },
    "259": {
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPI",
      "path": "151"
    },
    "260": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x40"
    },
    "262": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "MLOAD",
      "path": "151"
    },
    "263": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "267": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "269": {
      "op": "SHL"
    },
    "270": {
      "offset": [
        2317,
        2380
      ],
      "op": "DUP2",
      "path": "151"
    },
    "271": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "MSTORE",
      "path": "151"
    },
    "272": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x4"
    },
    "274": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "ADD",
      "path": "151"
    },
    "275": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0xDC"
    },
    "278": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "SWAP1",
      "path": "151"
    },
    "279": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0x37F"
    },
    "282": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMP",
      "path": "151"
    },
    "283": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPDEST",
      "path": "151"
    },
    "284": {
      "offset": [
        1744,
        1745
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x2"
    },
    "286": {
      "offset": [
        2455,
        2462
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "288": {
      "offset": [
        2455,
        2473
      ],
      "op": "SSTORE",
      "path": "151"
    },
    "289": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        572,
        577
      ],
      "op": "DUP1",
      "path": "120"
    },
    "290": {
      "branch": 8,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        572,
        577
      ],
      "op": "ISZERO",
      "path": "120"
    },
    "291": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        568,
        787
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x218"
    },
    "294": {
      "branch": 8,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        568,
        787
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "295": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        593,
        601
      ],
      "op": "PUSH2",
      "path": "120",
      "statement": 1,
      "value": "0x12E"
    },
    "298": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        593,
        599
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x31D"
    },
    "301": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        593,
        601
      ],
      "op": "JUMP",
      "path": "120"
    },
    "302": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        593,
        601
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "303": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        616,
        628
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "305": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        642,
        646
      ],
      "op": "ADDRESS",
      "path": "120"
    },
    "306": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        708,
        713
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x13C"
    },
    "309": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        712,
        713
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x1"
    },
    "311": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        708,
        709
      ],
      "op": "DUP5",
      "path": "120"
    },
    "312": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        708,
        713
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x3CC"
    },
    "315": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        708,
        713
      ],
      "op": "JUMP",
      "path": "120"
    },
    "316": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        708,
        713
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "317": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "319": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "320": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x24"
    },
    "322": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "ADD",
      "path": "120"
    },
    "323": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x14E"
    },
    "326": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "327": {
      "op": "DUP2"
    },
    "328": {
      "op": "MSTORE"
    },
    "329": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "331": {
      "op": "ADD"
    },
    "332": {
      "op": "SWAP1"
    },
    "333": {
      "op": "JUMP"
    },
    "334": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "335": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "337": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "DUP1",
      "path": "120"
    },
    "338": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "341": {
      "op": "NOT"
    },
    "342": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "DUP2",
      "path": "120"
    },
    "343": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "DUP5",
      "path": "120"
    },
    "344": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "SUB",
      "path": "120"
    },
    "345": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "ADD",
      "path": "120"
    },
    "346": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "DUP2",
      "path": "120"
    },
    "347": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "MSTORE",
      "path": "120"
    },
    "348": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "349": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "DUP2",
      "path": "120"
    },
    "350": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "MSTORE",
      "path": "120"
    },
    "351": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x20"
    },
    "353": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "DUP3",
      "path": "120"
    },
    "354": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "ADD",
      "path": "120"
    },
    "355": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "DUP1",
      "path": "120"
    },
    "356": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "357": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "361": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "363": {
      "op": "SHL"
    },
    "364": {
      "op": "SUB"
    },
    "365": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "AND",
      "path": "120"
    },
    "366": {
      "op": "PUSH4",
      "value": "0x4629A27D"
    },
    "371": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "373": {
      "op": "SHL"
    },
    "374": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "OR",
      "path": "120"
    },
    "375": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "376": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "MSTORE",
      "path": "120"
    },
    "377": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "378": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x183"
    },
    "381": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "382": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        653,
        714
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "383": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x3E5"
    },
    "386": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "i",
      "offset": [
        634,
        715
      ],
      "op": "JUMP",
      "path": "120"
    },
    "387": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "388": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "390": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "392": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "393": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP1",
      "path": "120"
    },
    "394": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP4",
      "path": "120"
    },
    "395": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "SUB",
      "path": "120"
    },
    "396": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP2",
      "path": "120"
    },
    "397": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "399": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP7",
      "path": "120"
    },
    "400": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "GAS",
      "path": "120"
    },
    "401": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "CALL",
      "path": "120"
    },
    "402": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "403": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "POP",
      "path": "120"
    },
    "404": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "POP",
      "path": "120"
    },
    "405": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "RETURNDATASIZE",
      "path": "120"
    },
    "406": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP1",
      "path": "120"
    },
    "407": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "409": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP2",
      "path": "120"
    },
    "410": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "EQ",
      "path": "120"
    },
    "411": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x1C0"
    },
    "414": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "415": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "417": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "418": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "419": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "POP",
      "path": "120"
    },
    "420": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x1F"
    },
    "422": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "NOT",
      "path": "120"
    },
    "423": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x3F"
    },
    "425": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "RETURNDATASIZE",
      "path": "120"
    },
    "426": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "ADD",
      "path": "120"
    },
    "427": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "AND",
      "path": "120"
    },
    "428": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP3",
      "path": "120"
    },
    "429": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "ADD",
      "path": "120"
    },
    "430": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "432": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "MSTORE",
      "path": "120"
    },
    "433": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "RETURNDATASIZE",
      "path": "120"
    },
    "434": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP3",
      "path": "120"
    },
    "435": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "MSTORE",
      "path": "120"
    },
    "436": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "RETURNDATASIZE",
      "path": "120"
    },
    "437": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "439": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x20"
    },
    "441": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "DUP5",
      "path": "120"
    },
    "442": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "ADD",
      "path": "120"
    },
    "443": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "RETURNDATACOPY",
      "path": "120"
    },
    "444": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x1C5"
    },
    "447": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "JUMP",
      "path": "120"
    },
    "448": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "449": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x60"
    },
    "451": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "452": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "POP",
      "path": "120"
    },
    "453": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "454": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        634,
        715
      ],
      "op": "POP",
      "path": "120"
    },
    "455": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        615,
        715
      ],
      "op": "POP",
      "path": "120"
    },
    "456": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        615,
        715
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "457": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        615,
        715
      ],
      "op": "POP",
      "path": "120"
    },
    "458": {
      "branch": 9,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        737,
        744
      ],
      "op": "DUP1",
      "path": "120",
      "statement": 2
    },
    "459": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x216"
    },
    "462": {
      "branch": 9,
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "463": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "465": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "466": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "470": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "472": {
      "op": "SHL"
    },
    "473": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "DUP2",
      "path": "120"
    },
    "474": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "MSTORE",
      "path": "120"
    },
    "475": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "477": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x4"
    },
    "479": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "DUP3",
      "path": "120"
    },
    "480": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "ADD",
      "path": "120"
    },
    "481": {
      "op": "MSTORE"
    },
    "482": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "484": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "486": {
      "op": "DUP3"
    },
    "487": {
      "op": "ADD"
    },
    "488": {
      "op": "MSTORE"
    },
    "489": {
      "op": "PUSH32",
      "value": "0x5265656E7472616E63794D6F636B3A206661696C65642063616C6C0000000000"
    },
    "522": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "524": {
      "op": "DUP3"
    },
    "525": {
      "op": "ADD"
    },
    "526": {
      "op": "MSTORE"
    },
    "527": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "529": {
      "op": "ADD"
    },
    "530": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0xDC"
    },
    "533": {
      "op": "JUMP"
    },
    "534": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        729,
        776
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "535": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        579,
        787
      ],
      "op": "POP",
      "path": "120"
    },
    "536": {
      "fn": "ReentrancyMock.countThisRecursive",
      "offset": [
        568,
        787
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "537": {
      "op": "POP"
    },
    "538": {
      "offset": [
        1701,
        1702
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x1"
    },
    "540": {
      "offset": [
        2628,
        2635
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "542": {
      "offset": [
        2628,
        2650
      ],
      "op": "SSTORE",
      "path": "151"
    },
    "543": {
      "fn": "ReentrancyMock.countThisRecursive",
      "jump": "o",
      "offset": [
        499,
        793
      ],
      "op": "JUMP",
      "path": "120"
    },
    "544": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        333,
        493
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "545": {
      "offset": [
        1744,
        1745
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x2"
    },
    "547": {
      "offset": [
        2325,
        2332
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "549": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2325,
        2332
      ],
      "op": "SLOAD",
      "path": "151"
    },
    "550": {
      "offset": [
        2325,
        2344
      ],
      "op": "SUB",
      "path": "151"
    },
    "551": {
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0x242"
    },
    "554": {
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPI",
      "path": "151"
    },
    "555": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x40"
    },
    "557": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "MLOAD",
      "path": "151"
    },
    "558": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "562": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "564": {
      "op": "SHL"
    },
    "565": {
      "offset": [
        2317,
        2380
      ],
      "op": "DUP2",
      "path": "151"
    },
    "566": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "MSTORE",
      "path": "151"
    },
    "567": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x4"
    },
    "569": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "ADD",
      "path": "151"
    },
    "570": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0xDC"
    },
    "573": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "SWAP1",
      "path": "151"
    },
    "574": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0x37F"
    },
    "577": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMP",
      "path": "151"
    },
    "578": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPDEST",
      "path": "151"
    },
    "579": {
      "offset": [
        1744,
        1745
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x2"
    },
    "581": {
      "offset": [
        2455,
        2462
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "583": {
      "offset": [
        2455,
        2473
      ],
      "op": "SSTORE",
      "path": "151"
    },
    "584": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        407,
        412
      ],
      "op": "DUP1",
      "path": "120"
    },
    "585": {
      "branch": 10,
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        407,
        412
      ],
      "op": "ISZERO",
      "path": "120"
    },
    "586": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        403,
        487
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x218"
    },
    "589": {
      "branch": 10,
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        403,
        487
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "590": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        428,
        436
      ],
      "op": "PUSH2",
      "path": "120",
      "statement": 3,
      "value": "0x255"
    },
    "593": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        428,
        434
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x31D"
    },
    "596": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        428,
        436
      ],
      "op": "JUMP",
      "path": "120"
    },
    "597": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        428,
        436
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "598": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        450,
        476
      ],
      "op": "PUSH2",
      "path": "120",
      "statement": 4,
      "value": "0x218"
    },
    "601": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        470,
        475
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0xA2"
    },
    "604": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        474,
        475
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x1"
    },
    "606": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        470,
        471
      ],
      "op": "DUP4",
      "path": "120"
    },
    "607": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "offset": [
        470,
        475
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x3CC"
    },
    "610": {
      "fn": "ReentrancyMock.countLocalRecursive",
      "jump": "i",
      "offset": [
        470,
        475
      ],
      "op": "JUMP",
      "path": "120"
    },
    "611": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        799,
        983
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "612": {
      "offset": [
        1744,
        1745
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x2"
    },
    "614": {
      "offset": [
        2325,
        2332
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "616": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2325,
        2332
      ],
      "op": "SLOAD",
      "path": "151"
    },
    "617": {
      "offset": [
        2325,
        2344
      ],
      "op": "SUB",
      "path": "151"
    },
    "618": {
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0x285"
    },
    "621": {
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPI",
      "path": "151"
    },
    "622": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x40"
    },
    "624": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "MLOAD",
      "path": "151"
    },
    "625": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "629": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "631": {
      "op": "SHL"
    },
    "632": {
      "offset": [
        2317,
        2380
      ],
      "op": "DUP2",
      "path": "151"
    },
    "633": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "MSTORE",
      "path": "151"
    },
    "634": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x4"
    },
    "636": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "ADD",
      "path": "151"
    },
    "637": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0xDC"
    },
    "640": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "SWAP1",
      "path": "151"
    },
    "641": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "PUSH2",
      "path": "151",
      "value": "0x37F"
    },
    "644": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMP",
      "path": "151"
    },
    "645": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        2317,
        2380
      ],
      "op": "JUMPDEST",
      "path": "151"
    },
    "646": {
      "offset": [
        1744,
        1745
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x2"
    },
    "648": {
      "offset": [
        2455,
        2462
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "650": {
      "offset": [
        2455,
        2473
      ],
      "op": "SSTORE",
      "path": "151"
    },
    "651": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        878,
        886
      ],
      "op": "PUSH2",
      "path": "120",
      "statement": 5,
      "value": "0x292"
    },
    "654": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        878,
        884
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x31D"
    },
    "657": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "i",
      "offset": [
        878,
        886
      ],
      "op": "JUMP",
      "path": "120"
    },
    "658": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        878,
        886
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "659": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH1",
      "path": "120",
      "statement": 6,
      "value": "0x40"
    },
    "661": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "662": {
      "op": "PUSH4",
      "value": "0xA2DF1ED"
    },
    "667": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "669": {
      "op": "SHL"
    },
    "670": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP2",
      "path": "120"
    },
    "671": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "MSTORE",
      "path": "120"
    },
    "672": {
      "op": "PUSH4",
      "value": "0x41D9399"
    },
    "677": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "679": {
      "op": "SHL"
    },
    "680": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x4"
    },
    "682": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP3",
      "path": "120"
    },
    "683": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "ADD",
      "path": "120"
    },
    "684": {
      "op": "MSTORE"
    },
    "685": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        917,
        940
      ],
      "op": "PUSH32",
      "path": "120",
      "value": "0x83B2732F78169BFAAD6B407FA338CC97D697ED69D3915A18239CC111D51A402"
    },
    "718": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        917,
        940
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "723": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "725": {
      "op": "SHL"
    },
    "726": {
      "op": "SUB"
    },
    "727": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        970
      ],
      "op": "DUP4",
      "path": "120"
    },
    "728": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        970
      ],
      "op": "AND",
      "path": "120"
    },
    "729": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        970
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "730": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        970
      ],
      "op": "PUSH4",
      "path": "120",
      "value": "0xA2DF1ED"
    },
    "735": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        970
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "736": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "738": {
      "op": "ADD"
    },
    "739": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "741": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x40"
    },
    "743": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "MLOAD",
      "path": "120"
    },
    "744": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP1",
      "path": "120"
    },
    "745": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP4",
      "path": "120"
    },
    "746": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "SUB",
      "path": "120"
    },
    "747": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP2",
      "path": "120"
    },
    "748": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "750": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP8",
      "path": "120"
    },
    "751": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP1",
      "path": "120"
    },
    "752": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "EXTCODESIZE",
      "path": "120"
    },
    "753": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "ISZERO",
      "path": "120"
    },
    "754": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP1",
      "path": "120"
    },
    "755": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "ISZERO",
      "path": "120"
    },
    "756": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x2FC"
    },
    "759": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "760": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "762": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP1",
      "path": "120"
    },
    "763": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "REVERT",
      "path": "120"
    },
    "764": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "765": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "POP",
      "path": "120"
    },
    "766": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "GAS",
      "path": "120"
    },
    "767": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "CALL",
      "path": "120"
    },
    "768": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "ISZERO",
      "path": "120"
    },
    "769": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP1",
      "path": "120"
    },
    "770": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "ISZERO",
      "path": "120"
    },
    "771": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x310"
    },
    "774": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "JUMPI",
      "path": "120"
    },
    "775": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "RETURNDATASIZE",
      "path": "120"
    },
    "776": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "778": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "DUP1",
      "path": "120"
    },
    "779": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "RETURNDATACOPY",
      "path": "120"
    },
    "780": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "RETURNDATASIZE",
      "path": "120"
    },
    "781": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "783": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "REVERT",
      "path": "120"
    },
    "784": {
      "fn": "ReentrancyMock.countAndCall",
      "offset": [
        951,
        976
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "785": {
      "op": "POP"
    },
    "786": {
      "op": "POP"
    },
    "787": {
      "offset": [
        1701,
        1702
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x1"
    },
    "789": {
      "offset": [
        2628,
        2635
      ],
      "op": "PUSH1",
      "path": "151",
      "value": "0x0"
    },
    "791": {
      "offset": [
        2628,
        2650
      ],
      "op": "SSTORE",
      "path": "151"
    },
    "792": {
      "op": "POP"
    },
    "793": {
      "op": "POP"
    },
    "794": {
      "op": "POP"
    },
    "795": {
      "op": "POP"
    },
    "796": {
      "fn": "ReentrancyMock.countAndCall",
      "jump": "o",
      "offset": [
        799,
        983
      ],
      "op": "JUMP",
      "path": "120"
    },
    "797": {
      "fn": "ReentrancyMock._count",
      "offset": [
        989,
        1044
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "798": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1036,
        1037
      ],
      "op": "PUSH1",
      "path": "120",
      "statement": 7,
      "value": "0x1"
    },
    "800": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1032
      ],
      "op": "DUP1",
      "path": "120"
    },
    "801": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1032
      ],
      "op": "PUSH1",
      "path": "120",
      "value": "0x0"
    },
    "803": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "DUP3",
      "path": "120"
    },
    "804": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "DUP3",
      "path": "120"
    },
    "805": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "SLOAD",
      "path": "120"
    },
    "806": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x32F"
    },
    "809": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "810": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "811": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "PUSH2",
      "path": "120",
      "value": "0x414"
    },
    "814": {
      "fn": "ReentrancyMock._count",
      "jump": "i",
      "offset": [
        1025,
        1037
      ],
      "op": "JUMP",
      "path": "120"
    },
    "815": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "JUMPDEST",
      "path": "120"
    },
    "816": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "SWAP1",
      "path": "120"
    },
    "817": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "SWAP2",
      "path": "120"
    },
    "818": {
      "fn": "ReentrancyMock._count",
      "offset": [
        1025,
        1037
      ],
      "op": "SSTORE",
      "path": "120"
    },
    "819": {
      "op": "POP"
    },
    "820": {
      "op": "POP"
    },
    "821": {
      "fn": "ReentrancyMock._count",
      "jump": "o",
      "offset": [
        989,
        1044
      ],
      "op": "JUMP",
      "path": "120"
    },
    "822": {
      "op": "JUMPDEST"
    },
    "823": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "825": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "827": {
      "op": "DUP3"
    },
    "828": {
      "op": "DUP5"
    },
    "829": {
      "op": "SUB"
    },
    "830": {
      "op": "SLT"
    },
    "831": {
      "op": "ISZERO"
    },
    "832": {
      "op": "PUSH2",
      "value": "0x348"
    },
    "835": {
      "op": "JUMPI"
    },
    "836": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "838": {
      "op": "DUP1"
    },
    "839": {
      "op": "REVERT"
    },
    "840": {
      "op": "JUMPDEST"
    },
    "841": {
      "op": "POP"
    },
    "842": {
      "op": "CALLDATALOAD"
    },
    "843": {
      "op": "SWAP2"
    },
    "844": {
      "op": "SWAP1"
    },
    "845": {
      "op": "POP"
    },
    "846": {
      "jump": "o",
      "op": "JUMP"
    },
    "847": {
      "op": "JUMPDEST"
    },
    "848": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "850": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "852": {
      "op": "DUP3"
    },
    "853": {
      "op": "DUP5"
    },
    "854": {
      "op": "SUB"
    },
    "855": {
      "op": "SLT"
    },
    "856": {
      "op": "ISZERO"
    },
    "857": {
      "op": "PUSH2",
      "value": "0x361"
    },
    "860": {
      "op": "JUMPI"
    },
    "861": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "863": {
      "op": "DUP1"
    },
    "864": {
      "op": "REVERT"
    },
    "865": {
      "op": "JUMPDEST"
    },
    "866": {
      "op": "DUP2"
    },
    "867": {
      "op": "CALLDATALOAD"
    },
    "868": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "870": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "872": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "874": {
      "op": "SHL"
    },
    "875": {
      "op": "SUB"
    },
    "876": {
      "op": "DUP2"
    },
    "877": {
      "op": "AND"
    },
    "878": {
      "op": "DUP2"
    },
    "879": {
      "op": "EQ"
    },
    "880": {
      "op": "PUSH2",
      "value": "0x378"
    },
    "883": {
      "op": "JUMPI"
    },
    "884": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "886": {
      "op": "DUP1"
    },
    "887": {
      "op": "REVERT"
    },
    "888": {
      "op": "JUMPDEST"
    },
    "889": {
      "op": "SWAP4"
    },
    "890": {
      "op": "SWAP3"
    },
    "891": {
      "op": "POP"
    },
    "892": {
      "op": "POP"
    },
    "893": {
      "op": "POP"
    },
    "894": {
      "jump": "o",
      "op": "JUMP"
    },
    "895": {
      "op": "JUMPDEST"
    },
    "896": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "898": {
      "op": "DUP1"
    },
    "899": {
      "op": "DUP3"
    },
    "900": {
      "op": "MSTORE"
    },
    "901": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "903": {
      "op": "SWAP1"
    },
    "904": {
      "op": "DUP3"
    },
    "905": {
      "op": "ADD"
    },
    "906": {
      "op": "MSTORE"
    },
    "907": {
      "op": "PUSH32",
      "value": "0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
    },
    "940": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "942": {
      "op": "DUP3"
    },
    "943": {
      "op": "ADD"
    },
    "944": {
      "op": "MSTORE"
    },
    "945": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "947": {
      "op": "ADD"
    },
    "948": {
      "op": "SWAP1"
    },
    "949": {
      "jump": "o",
      "op": "JUMP"
    },
    "950": {
      "op": "JUMPDEST"
    },
    "951": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "956": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "958": {
      "op": "SHL"
    },
    "959": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "961": {
      "op": "MSTORE"
    },
    "962": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "964": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "966": {
      "op": "MSTORE"
    },
    "967": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "969": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "971": {
      "op": "REVERT"
    },
    "972": {
      "op": "JUMPDEST"
    },
    "973": {
      "op": "DUP2"
    },
    "974": {
      "op": "DUP2"
    },
    "975": {
      "op": "SUB"
    },
    "976": {
      "op": "DUP2"
    },
    "977": {
      "op": "DUP2"
    },
    "978": {
      "op": "GT"
    },
    "979": {
      "op": "ISZERO"
    },
    "980": {
      "op": "PUSH2",
      "value": "0x3DF"
    },
    "983": {
      "op": "JUMPI"
    },
    "984": {
      "op": "PUSH2",
      "value": "0x3DF"
    },
    "987": {
      "op": "PUSH2",
      "value": "0x3B6"
    },
    "990": {
      "jump": "i",
      "op": "JUMP"
    },
    "991": {
      "op": "JUMPDEST"
    },
    "992": {
      "op": "SWAP3"
    },
    "993": {
      "op": "SWAP2"
    },
    "994": {
      "op": "POP"
    },
    "995": {
      "op": "POP"
    },
    "996": {
      "jump": "o",
      "op": "JUMP"
    },
    "997": {
      "op": "JUMPDEST"
    },
    "998": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1000": {
      "op": "DUP3"
    },
    "1001": {
      "op": "MLOAD"
    },
    "1002": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1004": {
      "op": "JUMPDEST"
    },
    "1005": {
      "op": "DUP2"
    },
    "1006": {
      "op": "DUP2"
    },
    "1007": {
      "op": "LT"
    },
    "1008": {
      "op": "ISZERO"
    },
    "1009": {
      "op": "PUSH2",
      "value": "0x406"
    },
    "1012": {
      "op": "JUMPI"
    },
    "1013": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1015": {
      "op": "DUP2"
    },
    "1016": {
      "op": "DUP7"
    },
    "1017": {
      "op": "ADD"
    },
    "1018": {
      "op": "DUP2"
    },
    "1019": {
      "op": "ADD"
    },
    "1020": {
      "op": "MLOAD"
    },
    "1021": {
      "op": "DUP6"
    },
    "1022": {
      "op": "DUP4"
    },
    "1023": {
      "op": "ADD"
    },
    "1024": {
      "op": "MSTORE"
    },
    "1025": {
      "op": "ADD"
    },
    "1026": {
      "op": "PUSH2",
      "value": "0x3EC"
    },
    "1029": {
      "op": "JUMP"
    },
    "1030": {
      "op": "JUMPDEST"
    },
    "1031": {
      "op": "POP"
    },
    "1032": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1034": {
      "op": "SWAP3"
    },
    "1035": {
      "op": "ADD"
    },
    "1036": {
      "op": "SWAP2"
    },
    "1037": {
      "op": "DUP3"
    },
    "1038": {
      "op": "MSTORE"
    },
    "1039": {
      "op": "POP"
    },
    "1040": {
      "op": "SWAP2"
    },
    "1041": {
      "op": "SWAP1"
    },
    "1042": {
      "op": "POP"
    },
    "1043": {
      "jump": "o",
      "op": "JUMP"
    },
    "1044": {
      "op": "JUMPDEST"
    },
    "1045": {
      "op": "DUP1"
    },
    "1046": {
      "op": "DUP3"
    },
    "1047": {
      "op": "ADD"
    },
    "1048": {
      "op": "DUP1"
    },
    "1049": {
      "op": "DUP3"
    },
    "1050": {
      "op": "GT"
    },
    "1051": {
      "op": "ISZERO"
    },
    "1052": {
      "op": "PUSH2",
      "value": "0x3DF"
    },
    "1055": {
      "op": "JUMPI"
    },
    "1056": {
      "op": "PUSH2",
      "value": "0x3DF"
    },
    "1059": {
      "op": "PUSH2",
      "value": "0x3B6"
    },
    "1062": {
      "jump": "i",
      "op": "JUMP"
    }
  },
  "sha1": "31aa0cb528dbc7d9d24205e802905a7d8f6fe8a0",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../security/ReentrancyGuard.sol\";\nimport \"./ReentrancyAttack.sol\";\n\ncontract ReentrancyMock is ReentrancyGuard {\n    uint256 public counter;\n\n    constructor() {\n        counter = 0;\n    }\n\n    function callback() external nonReentrant {\n        _count();\n    }\n\n    function countLocalRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            countLocalRecursive(n - 1);\n        }\n    }\n\n    function countThisRecursive(uint256 n) public nonReentrant {\n        if (n > 0) {\n            _count();\n            (bool success, ) = address(this).call(abi.encodeWithSignature(\"countThisRecursive(uint256)\", n - 1));\n            require(success, \"ReentrancyMock: failed call\");\n        }\n    }\n\n    function countAndCall(ReentrancyAttack attacker) public nonReentrant {\n        _count();\n        bytes4 func = bytes4(keccak256(\"callback()\"));\n        attacker.callSender(func);\n    }\n\n    function _count() private {\n        counter += 1;\n    }\n}\n",
  "sourceMap": "134:912:120:-:0;;;212:42;;;;;;;;;-1:-1:-1;1701:1:151;1806:7;:22;;;236:11:120;;134:912;;;;;;",
  "sourcePath": "contracts/openzeppelin-solidity/contracts/mocks/ReentrancyMock.sol",
  "type": "contract"
}